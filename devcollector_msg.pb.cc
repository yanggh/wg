// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: devcollector_msg.proto

#include "devcollector_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace mpfmessage {
class SnmpBaseParaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SnmpBasePara>
      _instance;
} _SnmpBasePara_default_instance_;
class SnmpExtParaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SnmpExtPara>
      _instance;
} _SnmpExtPara_default_instance_;
class SnmpInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SnmpInfo>
      _instance;
} _SnmpInfo_default_instance_;
class TelnetParaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelnetPara>
      _instance;
} _TelnetPara_default_instance_;
class SshParaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SshPara>
      _instance;
} _SshPara_default_instance_;
class PingParaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PingPara>
      _instance;
} _PingPara_default_instance_;
class DbLoginParaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DbLoginPara>
      _instance;
} _DbLoginPara_default_instance_;
class NetDevBaseInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetDevBaseInfo>
      _instance;
} _NetDevBaseInfo_default_instance_;
class DiskInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DiskInfo>
      _instance;
} _DiskInfo_default_instance_;
class PartitionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartitionInfo>
      _instance;
} _PartitionInfo_default_instance_;
class ProcessorInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProcessorInfo>
      _instance;
} _ProcessorInfo_default_instance_;
class HostBaseInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HostBaseInfo>
      _instance;
} _HostBaseInfo_default_instance_;
class IfBaseInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IfBaseInfo>
      _instance;
} _IfBaseInfo_default_instance_;
class IfResInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IfResInfo>
      _instance;
} _IfResInfo_default_instance_;
class ProcessInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProcessInfo>
      _instance;
} _ProcessInfo_default_instance_;
class SoftwareInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SoftwareInfo>
      _instance;
} _SoftwareInfo_default_instance_;
class PerfParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfParameter>
      _instance;
} _PerfParameter_default_instance_;
class MidwarePerfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MidwarePerf>
      _instance;
} _MidwarePerf_default_instance_;
class DatabasePerfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DatabasePerf>
      _instance;
} _DatabasePerf_default_instance_;
class IfPerfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IfPerf>
      _instance;
} _IfPerf_default_instance_;
class MsgTopoDiscoveryRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgTopoDiscoveryResp>
      _instance;
} _MsgTopoDiscoveryResp_default_instance_;
class DiscoveredDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DiscoveredDev>
      _instance;
} _DiscoveredDev_default_instance_;
class MsgTopoDiscoveryNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgTopoDiscoveryNotify>
      _instance;
} _MsgTopoDiscoveryNotify_default_instance_;
class ResSynInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResSynInfo>
      _instance;
} _ResSynInfo_default_instance_;
class RespAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RespAddr>
      _instance;
} _RespAddr_default_instance_;
class MsgResSynReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgResSynReq>
      _instance;
} _MsgResSynReq_default_instance_;
class MsgResSynRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgResSynResp>
      _instance;
} _MsgResSynResp_default_instance_;
class ResSynResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResSynResult>
      _instance;
} _ResSynResult_default_instance_;
class MsgResSynNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgResSynNotify>
      _instance;
} _MsgResSynNotify_default_instance_;
class MsgDevPerfCollectReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgDevPerfCollectReq>
      _instance;
} _MsgDevPerfCollectReq_default_instance_;
class MsgDevPerfCollectRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgDevPerfCollectResp>
      _instance;
} _MsgDevPerfCollectResp_default_instance_;
class MsgGetHostProcListReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgGetHostProcListReq>
      _instance;
} _MsgGetHostProcListReq_default_instance_;
class MsgGetHostProcListRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgGetHostProcListResp>
      _instance;
} _MsgGetHostProcListResp_default_instance_;
class MsgGetHostFileSystemListReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgGetHostFileSystemListReq>
      _instance;
} _MsgGetHostFileSystemListReq_default_instance_;
class MsgGetHostFileSystemListRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgGetHostFileSystemListResp>
      _instance;
} _MsgGetHostFileSystemListResp_default_instance_;
class DBResInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DBResInfo>
      _instance;
} _DBResInfo_default_instance_;
class MsgDBPerfCollectReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgDBPerfCollectReq>
      _instance;
} _MsgDBPerfCollectReq_default_instance_;
class MsgDBPerfCollectRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgDBPerfCollectResp>
      _instance;
} _MsgDBPerfCollectResp_default_instance_;
class MidwareResInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MidwareResInfo>
      _instance;
} _MidwareResInfo_default_instance_;
class MsgMidwarePerfCollectReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgMidwarePerfCollectReq>
      _instance;
} _MsgMidwarePerfCollectReq_default_instance_;
class MsgMidwarePerfCollectRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgMidwarePerfCollectResp>
      _instance;
} _MsgMidwarePerfCollectResp_default_instance_;
class DataSourceIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataSourceId>
      _instance;
} _DataSourceId_default_instance_;
class MsgRoomResSyncReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgRoomResSyncReq>
      _instance;
} _MsgRoomResSyncReq_default_instance_;
class SensorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sensor>
      _instance;
} _Sensor_default_instance_;
class DataSourceSyncResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataSourceSyncResult>
      _instance;
} _DataSourceSyncResult_default_instance_;
class MsgMachineRoomResSyncRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgMachineRoomResSyncResp>
      _instance;
} _MsgMachineRoomResSyncResp_default_instance_;
class MsgGetSenserValueReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgGetSenserValueReq>
      _instance;
} _MsgGetSenserValueReq_default_instance_;
class SenserValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SenserValue>
      _instance;
} _SenserValue_default_instance_;
class SenserSyncResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SenserSyncResult>
      _instance;
} _SenserSyncResult_default_instance_;
class MsgGetSenserValueRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgGetSenserValueResp>
      _instance;
} _MsgGetSenserValueResp_default_instance_;
class ConnectivityTestSynReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectivityTestSynReq>
      _instance;
} _ConnectivityTestSynReq_default_instance_;
class MsgConnectivityTestSynRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgConnectivityTestSynResp>
      _instance;
} _MsgConnectivityTestSynResp_default_instance_;
class MsgDevTestParaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgDevTestPara>
      _instance;
} _MsgDevTestPara_default_instance_;
class MsgReachableTestReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgReachableTestReq>
      _instance;
} _MsgReachableTestReq_default_instance_;
class MsgReachableTestRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgReachableTestResp>
      _instance;
} _MsgReachableTestResp_default_instance_;
class PingPerfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PingPerf>
      _instance;
} _PingPerf_default_instance_;
class ReachableTestResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReachableTestResult>
      _instance;
} _ReachableTestResult_default_instance_;
class MsgReachableTestNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgReachableTestNotify>
      _instance;
} _MsgReachableTestNotify_default_instance_;
class IpGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IpGroup>
      _instance;
} _IpGroup_default_instance_;
class MsgTopoDiscoveryReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgTopoDiscoveryReq>
      _instance;
} _MsgTopoDiscoveryReq_default_instance_;
class MsgTopoFindRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgTopoFindResp>
      _instance;
} _MsgTopoFindResp_default_instance_;
class TopoNodeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TopoNodeInfo>
      _instance;
} _TopoNodeInfo_default_instance_;
class TopoLinkInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TopoLinkInfo>
      _instance;
} _TopoLinkInfo_default_instance_;
}  // namespace mpfmessage
namespace protobuf_devcollector_5fmsg_2eproto {
void InitDefaultsSnmpBaseParaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_SnmpBasePara_default_instance_;
    new (ptr) ::mpfmessage::SnmpBasePara();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::SnmpBasePara::InitAsDefaultInstance();
}

void InitDefaultsSnmpBasePara() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSnmpBaseParaImpl);
}

void InitDefaultsSnmpExtParaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_SnmpExtPara_default_instance_;
    new (ptr) ::mpfmessage::SnmpExtPara();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::SnmpExtPara::InitAsDefaultInstance();
}

void InitDefaultsSnmpExtPara() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSnmpExtParaImpl);
}

void InitDefaultsSnmpInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpBasePara();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpExtPara();
  {
    void* ptr = &::mpfmessage::_SnmpInfo_default_instance_;
    new (ptr) ::mpfmessage::SnmpInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::SnmpInfo::InitAsDefaultInstance();
}

void InitDefaultsSnmpInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSnmpInfoImpl);
}

void InitDefaultsTelnetParaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_TelnetPara_default_instance_;
    new (ptr) ::mpfmessage::TelnetPara();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::TelnetPara::InitAsDefaultInstance();
}

void InitDefaultsTelnetPara() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelnetParaImpl);
}

void InitDefaultsSshParaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_SshPara_default_instance_;
    new (ptr) ::mpfmessage::SshPara();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::SshPara::InitAsDefaultInstance();
}

void InitDefaultsSshPara() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSshParaImpl);
}

void InitDefaultsPingParaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_PingPara_default_instance_;
    new (ptr) ::mpfmessage::PingPara();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::PingPara::InitAsDefaultInstance();
}

void InitDefaultsPingPara() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPingParaImpl);
}

void InitDefaultsDbLoginParaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_DbLoginPara_default_instance_;
    new (ptr) ::mpfmessage::DbLoginPara();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::DbLoginPara::InitAsDefaultInstance();
}

void InitDefaultsDbLoginPara() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDbLoginParaImpl);
}

void InitDefaultsNetDevBaseInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_NetDevBaseInfo_default_instance_;
    new (ptr) ::mpfmessage::NetDevBaseInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::NetDevBaseInfo::InitAsDefaultInstance();
}

void InitDefaultsNetDevBaseInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNetDevBaseInfoImpl);
}

void InitDefaultsDiskInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_DiskInfo_default_instance_;
    new (ptr) ::mpfmessage::DiskInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::DiskInfo::InitAsDefaultInstance();
}

void InitDefaultsDiskInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDiskInfoImpl);
}

void InitDefaultsPartitionInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_PartitionInfo_default_instance_;
    new (ptr) ::mpfmessage::PartitionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::PartitionInfo::InitAsDefaultInstance();
}

void InitDefaultsPartitionInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPartitionInfoImpl);
}

void InitDefaultsProcessorInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_ProcessorInfo_default_instance_;
    new (ptr) ::mpfmessage::ProcessorInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::ProcessorInfo::InitAsDefaultInstance();
}

void InitDefaultsProcessorInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProcessorInfoImpl);
}

void InitDefaultsHostBaseInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsProcessorInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsDiskInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsPartitionInfo();
  {
    void* ptr = &::mpfmessage::_HostBaseInfo_default_instance_;
    new (ptr) ::mpfmessage::HostBaseInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::HostBaseInfo::InitAsDefaultInstance();
}

void InitDefaultsHostBaseInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHostBaseInfoImpl);
}

void InitDefaultsIfBaseInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_IfBaseInfo_default_instance_;
    new (ptr) ::mpfmessage::IfBaseInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::IfBaseInfo::InitAsDefaultInstance();
}

void InitDefaultsIfBaseInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIfBaseInfoImpl);
}

void InitDefaultsIfResInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_IfResInfo_default_instance_;
    new (ptr) ::mpfmessage::IfResInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::IfResInfo::InitAsDefaultInstance();
}

void InitDefaultsIfResInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIfResInfoImpl);
}

void InitDefaultsProcessInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_ProcessInfo_default_instance_;
    new (ptr) ::mpfmessage::ProcessInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::ProcessInfo::InitAsDefaultInstance();
}

void InitDefaultsProcessInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProcessInfoImpl);
}

void InitDefaultsSoftwareInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_SoftwareInfo_default_instance_;
    new (ptr) ::mpfmessage::SoftwareInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::SoftwareInfo::InitAsDefaultInstance();
}

void InitDefaultsSoftwareInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSoftwareInfoImpl);
}

void InitDefaultsPerfParameterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_PerfParameter_default_instance_;
    new (ptr) ::mpfmessage::PerfParameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::PerfParameter::InitAsDefaultInstance();
}

void InitDefaultsPerfParameter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPerfParameterImpl);
}

void InitDefaultsMidwarePerfImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsPerfParameter();
  {
    void* ptr = &::mpfmessage::_MidwarePerf_default_instance_;
    new (ptr) ::mpfmessage::MidwarePerf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MidwarePerf::InitAsDefaultInstance();
}

void InitDefaultsMidwarePerf() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMidwarePerfImpl);
}

void InitDefaultsDatabasePerfImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsPerfParameter();
  {
    void* ptr = &::mpfmessage::_DatabasePerf_default_instance_;
    new (ptr) ::mpfmessage::DatabasePerf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::DatabasePerf::InitAsDefaultInstance();
}

void InitDefaultsDatabasePerf() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDatabasePerfImpl);
}

void InitDefaultsIfPerfImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_IfPerf_default_instance_;
    new (ptr) ::mpfmessage::IfPerf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::IfPerf::InitAsDefaultInstance();
}

void InitDefaultsIfPerf() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIfPerfImpl);
}

void InitDefaultsMsgTopoDiscoveryRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_5fcommon_2eproto::InitDefaultsMsgCommonData();
  {
    void* ptr = &::mpfmessage::_MsgTopoDiscoveryResp_default_instance_;
    new (ptr) ::mpfmessage::MsgTopoDiscoveryResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgTopoDiscoveryResp::InitAsDefaultInstance();
}

void InitDefaultsMsgTopoDiscoveryResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgTopoDiscoveryRespImpl);
}

void InitDefaultsDiscoveredDevImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsNetDevBaseInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsHostBaseInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsIfBaseInfo();
  {
    void* ptr = &::mpfmessage::_DiscoveredDev_default_instance_;
    new (ptr) ::mpfmessage::DiscoveredDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::DiscoveredDev::InitAsDefaultInstance();
}

void InitDefaultsDiscoveredDev() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDiscoveredDevImpl);
}

void InitDefaultsMsgTopoDiscoveryNotifyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsTopoNodeInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsTopoLinkInfo();
  {
    void* ptr = &::mpfmessage::_MsgTopoDiscoveryNotify_default_instance_;
    new (ptr) ::mpfmessage::MsgTopoDiscoveryNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgTopoDiscoveryNotify::InitAsDefaultInstance();
}

void InitDefaultsMsgTopoDiscoveryNotify() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgTopoDiscoveryNotifyImpl);
}

void InitDefaultsResSynInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsTelnetPara();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSshPara();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsIfResInfo();
  {
    void* ptr = &::mpfmessage::_ResSynInfo_default_instance_;
    new (ptr) ::mpfmessage::ResSynInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::ResSynInfo::InitAsDefaultInstance();
}

void InitDefaultsResSynInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResSynInfoImpl);
}

void InitDefaultsRespAddrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_RespAddr_default_instance_;
    new (ptr) ::mpfmessage::RespAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::RespAddr::InitAsDefaultInstance();
}

void InitDefaultsRespAddr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRespAddrImpl);
}

void InitDefaultsMsgResSynReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsResSynInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsRespAddr();
  {
    void* ptr = &::mpfmessage::_MsgResSynReq_default_instance_;
    new (ptr) ::mpfmessage::MsgResSynReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgResSynReq::InitAsDefaultInstance();
}

void InitDefaultsMsgResSynReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgResSynReqImpl);
}

void InitDefaultsMsgResSynRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_5fcommon_2eproto::InitDefaultsMsgCommonData();
  {
    void* ptr = &::mpfmessage::_MsgResSynResp_default_instance_;
    new (ptr) ::mpfmessage::MsgResSynResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgResSynResp::InitAsDefaultInstance();
}

void InitDefaultsMsgResSynResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgResSynRespImpl);
}

void InitDefaultsResSynResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsNetDevBaseInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsHostBaseInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsIfBaseInfo();
  {
    void* ptr = &::mpfmessage::_ResSynResult_default_instance_;
    new (ptr) ::mpfmessage::ResSynResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::ResSynResult::InitAsDefaultInstance();
}

void InitDefaultsResSynResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResSynResultImpl);
}

void InitDefaultsMsgResSynNotifyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsResSynResult();
  {
    void* ptr = &::mpfmessage::_MsgResSynNotify_default_instance_;
    new (ptr) ::mpfmessage::MsgResSynNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgResSynNotify::InitAsDefaultInstance();
}

void InitDefaultsMsgResSynNotify() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgResSynNotifyImpl);
}

void InitDefaultsMsgDevPerfCollectReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsResSynInfo();
  {
    void* ptr = &::mpfmessage::_MsgDevPerfCollectReq_default_instance_;
    new (ptr) ::mpfmessage::MsgDevPerfCollectReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgDevPerfCollectReq::InitAsDefaultInstance();
}

void InitDefaultsMsgDevPerfCollectReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgDevPerfCollectReqImpl);
}

void InitDefaultsMsgDevPerfCollectRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_5fcommon_2eproto::InitDefaultsMsgCommonData();
  {
    void* ptr = &::mpfmessage::_MsgDevPerfCollectResp_default_instance_;
    new (ptr) ::mpfmessage::MsgDevPerfCollectResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgDevPerfCollectResp::InitAsDefaultInstance();
}

void InitDefaultsMsgDevPerfCollectResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgDevPerfCollectRespImpl);
}

void InitDefaultsMsgGetHostProcListReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsTelnetPara();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSshPara();
  {
    void* ptr = &::mpfmessage::_MsgGetHostProcListReq_default_instance_;
    new (ptr) ::mpfmessage::MsgGetHostProcListReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgGetHostProcListReq::InitAsDefaultInstance();
}

void InitDefaultsMsgGetHostProcListReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgGetHostProcListReqImpl);
}

void InitDefaultsMsgGetHostProcListRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSoftwareInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsProcessInfo();
  {
    void* ptr = &::mpfmessage::_MsgGetHostProcListResp_default_instance_;
    new (ptr) ::mpfmessage::MsgGetHostProcListResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgGetHostProcListResp::InitAsDefaultInstance();
}

void InitDefaultsMsgGetHostProcListResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgGetHostProcListRespImpl);
}

void InitDefaultsMsgGetHostFileSystemListReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsTelnetPara();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSshPara();
  {
    void* ptr = &::mpfmessage::_MsgGetHostFileSystemListReq_default_instance_;
    new (ptr) ::mpfmessage::MsgGetHostFileSystemListReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgGetHostFileSystemListReq::InitAsDefaultInstance();
}

void InitDefaultsMsgGetHostFileSystemListReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgGetHostFileSystemListReqImpl);
}

void InitDefaultsMsgGetHostFileSystemListRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsPartitionInfo();
  {
    void* ptr = &::mpfmessage::_MsgGetHostFileSystemListResp_default_instance_;
    new (ptr) ::mpfmessage::MsgGetHostFileSystemListResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgGetHostFileSystemListResp::InitAsDefaultInstance();
}

void InitDefaultsMsgGetHostFileSystemListResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgGetHostFileSystemListRespImpl);
}

void InitDefaultsDBResInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsDbLoginPara();
  {
    void* ptr = &::mpfmessage::_DBResInfo_default_instance_;
    new (ptr) ::mpfmessage::DBResInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::DBResInfo::InitAsDefaultInstance();
}

void InitDefaultsDBResInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDBResInfoImpl);
}

void InitDefaultsMsgDBPerfCollectReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsDBResInfo();
  {
    void* ptr = &::mpfmessage::_MsgDBPerfCollectReq_default_instance_;
    new (ptr) ::mpfmessage::MsgDBPerfCollectReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgDBPerfCollectReq::InitAsDefaultInstance();
}

void InitDefaultsMsgDBPerfCollectReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgDBPerfCollectReqImpl);
}

void InitDefaultsMsgDBPerfCollectRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_5fcommon_2eproto::InitDefaultsMsgCommonData();
  {
    void* ptr = &::mpfmessage::_MsgDBPerfCollectResp_default_instance_;
    new (ptr) ::mpfmessage::MsgDBPerfCollectResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgDBPerfCollectResp::InitAsDefaultInstance();
}

void InitDefaultsMsgDBPerfCollectResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgDBPerfCollectRespImpl);
}

void InitDefaultsMidwareResInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpInfo();
  {
    void* ptr = &::mpfmessage::_MidwareResInfo_default_instance_;
    new (ptr) ::mpfmessage::MidwareResInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MidwareResInfo::InitAsDefaultInstance();
}

void InitDefaultsMidwareResInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMidwareResInfoImpl);
}

void InitDefaultsMsgMidwarePerfCollectReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsMidwareResInfo();
  {
    void* ptr = &::mpfmessage::_MsgMidwarePerfCollectReq_default_instance_;
    new (ptr) ::mpfmessage::MsgMidwarePerfCollectReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgMidwarePerfCollectReq::InitAsDefaultInstance();
}

void InitDefaultsMsgMidwarePerfCollectReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgMidwarePerfCollectReqImpl);
}

void InitDefaultsMsgMidwarePerfCollectRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_5fcommon_2eproto::InitDefaultsMsgCommonData();
  {
    void* ptr = &::mpfmessage::_MsgMidwarePerfCollectResp_default_instance_;
    new (ptr) ::mpfmessage::MsgMidwarePerfCollectResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgMidwarePerfCollectResp::InitAsDefaultInstance();
}

void InitDefaultsMsgMidwarePerfCollectResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgMidwarePerfCollectRespImpl);
}

void InitDefaultsDataSourceIdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpInfo();
  {
    void* ptr = &::mpfmessage::_DataSourceId_default_instance_;
    new (ptr) ::mpfmessage::DataSourceId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::DataSourceId::InitAsDefaultInstance();
}

void InitDefaultsDataSourceId() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDataSourceIdImpl);
}

void InitDefaultsMsgRoomResSyncReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsDataSourceId();
  {
    void* ptr = &::mpfmessage::_MsgRoomResSyncReq_default_instance_;
    new (ptr) ::mpfmessage::MsgRoomResSyncReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgRoomResSyncReq::InitAsDefaultInstance();
}

void InitDefaultsMsgRoomResSyncReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgRoomResSyncReqImpl);
}

void InitDefaultsSensorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_Sensor_default_instance_;
    new (ptr) ::mpfmessage::Sensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::Sensor::InitAsDefaultInstance();
}

void InitDefaultsSensor() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSensorImpl);
}

void InitDefaultsDataSourceSyncResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSensor();
  {
    void* ptr = &::mpfmessage::_DataSourceSyncResult_default_instance_;
    new (ptr) ::mpfmessage::DataSourceSyncResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::DataSourceSyncResult::InitAsDefaultInstance();
}

void InitDefaultsDataSourceSyncResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDataSourceSyncResultImpl);
}

void InitDefaultsMsgMachineRoomResSyncRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsDataSourceSyncResult();
  {
    void* ptr = &::mpfmessage::_MsgMachineRoomResSyncResp_default_instance_;
    new (ptr) ::mpfmessage::MsgMachineRoomResSyncResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgMachineRoomResSyncResp::InitAsDefaultInstance();
}

void InitDefaultsMsgMachineRoomResSyncResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgMachineRoomResSyncRespImpl);
}

void InitDefaultsMsgGetSenserValueReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsDataSourceId();
  {
    void* ptr = &::mpfmessage::_MsgGetSenserValueReq_default_instance_;
    new (ptr) ::mpfmessage::MsgGetSenserValueReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgGetSenserValueReq::InitAsDefaultInstance();
}

void InitDefaultsMsgGetSenserValueReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgGetSenserValueReqImpl);
}

void InitDefaultsSenserValueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_SenserValue_default_instance_;
    new (ptr) ::mpfmessage::SenserValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::SenserValue::InitAsDefaultInstance();
}

void InitDefaultsSenserValue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSenserValueImpl);
}

void InitDefaultsSenserSyncResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSenserValue();
  {
    void* ptr = &::mpfmessage::_SenserSyncResult_default_instance_;
    new (ptr) ::mpfmessage::SenserSyncResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::SenserSyncResult::InitAsDefaultInstance();
}

void InitDefaultsSenserSyncResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSenserSyncResultImpl);
}

void InitDefaultsMsgGetSenserValueRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_5fcommon_2eproto::InitDefaultsMsgCommonData();
  {
    void* ptr = &::mpfmessage::_MsgGetSenserValueResp_default_instance_;
    new (ptr) ::mpfmessage::MsgGetSenserValueResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgGetSenserValueResp::InitAsDefaultInstance();
}

void InitDefaultsMsgGetSenserValueResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgGetSenserValueRespImpl);
}

void InitDefaultsConnectivityTestSynReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsTelnetPara();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSshPara();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsPingPara();
  {
    void* ptr = &::mpfmessage::_ConnectivityTestSynReq_default_instance_;
    new (ptr) ::mpfmessage::ConnectivityTestSynReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::ConnectivityTestSynReq::InitAsDefaultInstance();
}

void InitDefaultsConnectivityTestSynReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConnectivityTestSynReqImpl);
}

void InitDefaultsMsgConnectivityTestSynRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_MsgConnectivityTestSynResp_default_instance_;
    new (ptr) ::mpfmessage::MsgConnectivityTestSynResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgConnectivityTestSynResp::InitAsDefaultInstance();
}

void InitDefaultsMsgConnectivityTestSynResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgConnectivityTestSynRespImpl);
}

void InitDefaultsMsgDevTestParaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsPingPara();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSshPara();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsTelnetPara();
  {
    void* ptr = &::mpfmessage::_MsgDevTestPara_default_instance_;
    new (ptr) ::mpfmessage::MsgDevTestPara();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgDevTestPara::InitAsDefaultInstance();
}

void InitDefaultsMsgDevTestPara() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgDevTestParaImpl);
}

void InitDefaultsMsgReachableTestReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgDevTestPara();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsRespAddr();
  {
    void* ptr = &::mpfmessage::_MsgReachableTestReq_default_instance_;
    new (ptr) ::mpfmessage::MsgReachableTestReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgReachableTestReq::InitAsDefaultInstance();
}

void InitDefaultsMsgReachableTestReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgReachableTestReqImpl);
}

void InitDefaultsMsgReachableTestRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_5fcommon_2eproto::InitDefaultsMsgCommonData();
  {
    void* ptr = &::mpfmessage::_MsgReachableTestResp_default_instance_;
    new (ptr) ::mpfmessage::MsgReachableTestResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgReachableTestResp::InitAsDefaultInstance();
}

void InitDefaultsMsgReachableTestResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgReachableTestRespImpl);
}

void InitDefaultsPingPerfImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_PingPerf_default_instance_;
    new (ptr) ::mpfmessage::PingPerf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::PingPerf::InitAsDefaultInstance();
}

void InitDefaultsPingPerf() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPingPerfImpl);
}

void InitDefaultsReachableTestResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsPingPerf();
  {
    void* ptr = &::mpfmessage::_ReachableTestResult_default_instance_;
    new (ptr) ::mpfmessage::ReachableTestResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::ReachableTestResult::InitAsDefaultInstance();
}

void InitDefaultsReachableTestResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReachableTestResultImpl);
}

void InitDefaultsMsgReachableTestNotifyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsReachableTestResult();
  {
    void* ptr = &::mpfmessage::_MsgReachableTestNotify_default_instance_;
    new (ptr) ::mpfmessage::MsgReachableTestNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgReachableTestNotify::InitAsDefaultInstance();
}

void InitDefaultsMsgReachableTestNotify() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgReachableTestNotifyImpl);
}

void InitDefaultsIpGroupImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_IpGroup_default_instance_;
    new (ptr) ::mpfmessage::IpGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::IpGroup::InitAsDefaultInstance();
}

void InitDefaultsIpGroup() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIpGroupImpl);
}

void InitDefaultsMsgTopoDiscoveryReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpInfo();
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsIpGroup();
  {
    void* ptr = &::mpfmessage::_MsgTopoDiscoveryReq_default_instance_;
    new (ptr) ::mpfmessage::MsgTopoDiscoveryReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgTopoDiscoveryReq::InitAsDefaultInstance();
}

void InitDefaultsMsgTopoDiscoveryReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgTopoDiscoveryReqImpl);
}

void InitDefaultsMsgTopoFindRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_msg_5fcommon_2eproto::InitDefaultsMsgCommonData();
  {
    void* ptr = &::mpfmessage::_MsgTopoFindResp_default_instance_;
    new (ptr) ::mpfmessage::MsgTopoFindResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::MsgTopoFindResp::InitAsDefaultInstance();
}

void InitDefaultsMsgTopoFindResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgTopoFindRespImpl);
}

void InitDefaultsTopoNodeInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpInfo();
  {
    void* ptr = &::mpfmessage::_TopoNodeInfo_default_instance_;
    new (ptr) ::mpfmessage::TopoNodeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::TopoNodeInfo::InitAsDefaultInstance();
}

void InitDefaultsTopoNodeInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTopoNodeInfoImpl);
}

void InitDefaultsTopoLinkInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mpfmessage::_TopoLinkInfo_default_instance_;
    new (ptr) ::mpfmessage::TopoLinkInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mpfmessage::TopoLinkInfo::InitAsDefaultInstance();
}

void InitDefaultsTopoLinkInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTopoLinkInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[63];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[16];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpBasePara, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpBasePara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpBasePara, ip_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpBasePara, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpBasePara, read_community_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpBasePara, write_community_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpBasePara, version_),
  0,
  3,
  1,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpExtPara, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpExtPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpExtPara, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpExtPara, auth_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpExtPara, auth_password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpExtPara, encryptmethod_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpExtPara, encrypt_password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpExtPara, engine_id_),
  0,
  4,
  1,
  5,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpInfo, base_para_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpInfo, ext_para_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpInfo, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SnmpInfo, retry_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TelnetPara, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TelnetPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TelnetPara, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TelnetPara, pass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TelnetPara, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TelnetPara, retry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TelnetPara, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TelnetPara, port_),
  0,
  1,
  3,
  4,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SshPara, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SshPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SshPara, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SshPara, pass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SshPara, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SshPara, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SshPara, retry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SshPara, ip_),
  0,
  1,
  3,
  4,
  5,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PingPara, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PingPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PingPara, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PingPara, retry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PingPara, res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PingPara, timeout_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DbLoginPara, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DbLoginPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DbLoginPara, db_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DbLoginPara, login_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DbLoginPara, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DbLoginPara, os_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DbLoginPara, dbname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DbLoginPara, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DbLoginPara, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DbLoginPara, db_version_),
  6,
  0,
  5,
  7,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::NetDevBaseInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::NetDevBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::NetDevBaseInfo, dev_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::NetDevBaseInfo, dev_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::NetDevBaseInfo, dev_serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::NetDevBaseInfo, sys_oid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::NetDevBaseInfo, sys_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::NetDevBaseInfo, sys_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::NetDevBaseInfo, contactor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::NetDevBaseInfo, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::NetDevBaseInfo, up_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::NetDevBaseInfo, syn_time_),
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DiskInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DiskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DiskInfo, disk_access_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DiskInfo, media_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DiskInfo, disk_size_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PartitionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PartitionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PartitionInfo, part_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PartitionInfo, part_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PartitionInfo, part_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PartitionInfo, part_used_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ProcessorInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ProcessorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ProcessorInfo, processor_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ProcessorInfo, processor_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ProcessorInfo, processor_load_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::HostBaseInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::HostBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::HostBaseInfo, sys_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::HostBaseInfo, run_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::HostBaseInfo, online_user_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::HostBaseInfo, process_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::HostBaseInfo, cpulist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::HostBaseInfo, total_phy_memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::HostBaseInfo, total_virtual_memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::HostBaseInfo, total_disk_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::HostBaseInfo, disklist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::HostBaseInfo, partilist_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfBaseInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfBaseInfo, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfBaseInfo, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfBaseInfo, iftype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfBaseInfo, if_phys_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfBaseInfo, rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfBaseInfo, mtu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfBaseInfo, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfBaseInfo, mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfBaseInfo, oper_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfBaseInfo, admin_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfBaseInfo, alias_),
  5,
  0,
  9,
  1,
  6,
  7,
  2,
  3,
  10,
  8,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfResInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfResInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfResInfo, dev_resid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfResInfo, if_resid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfResInfo, ifindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfResInfo, ifdesc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfResInfo, ip_),
  2,
  3,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ProcessInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ProcessInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ProcessInfo, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ProcessInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ProcessInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ProcessInfo, cpu_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ProcessInfo, mem_use_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ProcessInfo, run_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ProcessInfo, parameter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ProcessInfo, status_),
  3,
  0,
  7,
  4,
  5,
  1,
  2,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SoftwareInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SoftwareInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SoftwareInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SoftwareInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SoftwareInfo, install_time_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PerfParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PerfParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PerfParameter, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PerfParameter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PerfParameter, value_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MidwarePerf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MidwarePerf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MidwarePerf, resid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MidwarePerf, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MidwarePerf, available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MidwarePerf, cpu_rate_app_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MidwarePerf, mem_use_app_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MidwarePerf, paralist_),
  1,
  0,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DatabasePerf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DatabasePerf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DatabasePerf, resid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DatabasePerf, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DatabasePerf, available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DatabasePerf, cpu_rate_app_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DatabasePerf, mem_use_app_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DatabasePerf, paralist_),
  1,
  0,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfPerf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfPerf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfPerf, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfPerf, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfPerf, oper_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfPerf, admin_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfPerf, rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfPerf, byte_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfPerf, byte_out_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfPerf, error_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfPerf, error_out_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfPerf, discard_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IfPerf, discard_out_),
  1,
  0,
  9,
  10,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgTopoDiscoveryResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgTopoDiscoveryResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgTopoDiscoveryResp, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DiscoveredDev, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DiscoveredDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DiscoveredDev, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DiscoveredDev, resultcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DiscoveredDev, detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DiscoveredDev, dev_base_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DiscoveredDev, host_base_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DiscoveredDev, if_base_info_),
  0,
  4,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgTopoDiscoveryNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgTopoDiscoveryNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgTopoDiscoveryNotify, topo_node_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgTopoDiscoveryNotify, topo_link_info_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynInfo, res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynInfo, res_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynInfo, snmp_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynInfo, telentpara_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynInfo, sshpara_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynInfo, if_list_),
  3,
  4,
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::RespAddr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::RespAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::RespAddr, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::RespAddr, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgResSynReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgResSynReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgResSynReq, res_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgResSynReq, resp_addr_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgResSynResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgResSynResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgResSynResp, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynResult, res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynResult, res_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynResult, resultcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynResult, detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynResult, dev_base_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynResult, host_base_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ResSynResult, if_base_info_),
  3,
  5,
  4,
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgResSynNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgResSynNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgResSynNotify, res_syn_data_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevPerfCollectReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevPerfCollectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevPerfCollectReq, res_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevPerfCollectReq, collect_time_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevPerfCollectResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevPerfCollectResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevPerfCollectResp, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostProcListReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostProcListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostProcListReq, host_res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostProcListReq, snmp_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostProcListReq, telentpara_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostProcListReq, sshpara_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostProcListResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostProcListResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostProcListResp, host_res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostProcListResp, resultcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostProcListResp, detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostProcListResp, softwarelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostProcListResp, proclist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostProcListResp, collect_time_),
  1,
  2,
  0,
  ~0u,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostFileSystemListReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostFileSystemListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostFileSystemListReq, host_res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostFileSystemListReq, snmp_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostFileSystemListReq, telentpara_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostFileSystemListReq, sshpara_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostFileSystemListResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostFileSystemListResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostFileSystemListResp, host_res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostFileSystemListResp, resultcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostFileSystemListResp, detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostFileSystemListResp, partilist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetHostFileSystemListResp, collect_time_),
  1,
  2,
  0,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DBResInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DBResInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DBResInfo, res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DBResInfo, snmp_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DBResInfo, db_conn_pare_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDBPerfCollectReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDBPerfCollectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDBPerfCollectReq, dbreslist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDBPerfCollectReq, collect_time_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDBPerfCollectResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDBPerfCollectResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDBPerfCollectResp, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MidwareResInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MidwareResInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MidwareResInfo, res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MidwareResInfo, snmp_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MidwareResInfo, os_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MidwareResInfo, mid_type_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgMidwarePerfCollectReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgMidwarePerfCollectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgMidwarePerfCollectReq, midreslist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgMidwarePerfCollectReq, collect_time_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgMidwarePerfCollectResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgMidwarePerfCollectResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgMidwarePerfCollectResp, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DataSourceId, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DataSourceId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DataSourceId, device_room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DataSourceId, res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DataSourceId, snmp_info_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgRoomResSyncReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgRoomResSyncReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgRoomResSyncReq, ds_list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::Sensor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::Sensor, serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::Sensor, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::Sensor, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::Sensor, units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::Sensor, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::Sensor, sensorid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::Sensor, index_),
  0,
  1,
  4,
  2,
  6,
  5,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DataSourceSyncResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DataSourceSyncResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DataSourceSyncResult, ds_res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DataSourceSyncResult, resultcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DataSourceSyncResult, detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::DataSourceSyncResult, sensorlist_),
  1,
  2,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgMachineRoomResSyncResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgMachineRoomResSyncResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgMachineRoomResSyncResp, ds_res_list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetSenserValueReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetSenserValueReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetSenserValueReq, ds_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetSenserValueReq, collect_time_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SenserValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SenserValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SenserValue, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SenserValue, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SenserValue, available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SenserValue, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SenserValue, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SenserValue, timestamp_),
  0,
  1,
  2,
  5,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SenserSyncResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SenserSyncResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SenserSyncResult, ds_res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SenserSyncResult, resultcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SenserSyncResult, detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::SenserSyncResult, valuelist_),
  1,
  2,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetSenserValueResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetSenserValueResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgGetSenserValueResp, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ConnectivityTestSynReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ConnectivityTestSynReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ConnectivityTestSynReq, res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ConnectivityTestSynReq, res_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ConnectivityTestSynReq, test_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ConnectivityTestSynReq, snmp_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ConnectivityTestSynReq, telentpara_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ConnectivityTestSynReq, sshpara_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ConnectivityTestSynReq, pingpara_),
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgConnectivityTestSynResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgConnectivityTestSynResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgConnectivityTestSynResp, res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgConnectivityTestSynResp, result_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevTestPara, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevTestPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevTestPara, res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevTestPara, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevTestPara, test_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevTestPara, ping_para_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevTestPara, snmp_para_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevTestPara, ssh_para_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgDevTestPara, telnet_para_),
  5,
  0,
  6,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgReachableTestReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgReachableTestReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgReachableTestReq, dev_para_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgReachableTestReq, notify_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgReachableTestReq, collect_time_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgReachableTestResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgReachableTestResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgReachableTestResp, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PingPerf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PingPerf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PingPerf, send_pack_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PingPerf, recieve_pack_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PingPerf, loss_pack_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PingPerf, max_cost_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PingPerf, min_cost_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::PingPerf, average_cost_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ReachableTestResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ReachableTestResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ReachableTestResult, res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ReachableTestResult, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ReachableTestResult, ping_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ReachableTestResult, snmp_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ReachableTestResult, ssh_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ReachableTestResult, telnet_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ReachableTestResult, detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ReachableTestResult, ping_perf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::ReachableTestResult, collect_time_),
  4,
  0,
  5,
  6,
  7,
  8,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgReachableTestNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgReachableTestNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgReachableTestNotify, result_data_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IpGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IpGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IpGroup, start_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::IpGroup, end_ip_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgTopoDiscoveryReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgTopoDiscoveryReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgTopoDiscoveryReq, snmp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgTopoDiscoveryReq, ip_group_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgTopoFindResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgTopoFindResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::MsgTopoFindResp, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TopoNodeInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TopoNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TopoNodeInfo, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TopoNodeInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TopoNodeInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TopoNodeInfo, run_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TopoNodeInfo, snmp_info_),
  0,
  1,
  3,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TopoLinkInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TopoLinkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TopoLinkInfo, src_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TopoLinkInfo, dest_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TopoLinkInfo, src_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TopoLinkInfo, dest_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TopoLinkInfo, src_if_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mpfmessage::TopoLinkInfo, dest_if_name_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::mpfmessage::SnmpBasePara)},
  { 15, 26, sizeof(::mpfmessage::SnmpExtPara)},
  { 32, 41, sizeof(::mpfmessage::SnmpInfo)},
  { 45, 56, sizeof(::mpfmessage::TelnetPara)},
  { 62, 73, sizeof(::mpfmessage::SshPara)},
  { 79, 88, sizeof(::mpfmessage::PingPara)},
  { 92, 105, sizeof(::mpfmessage::DbLoginPara)},
  { 113, 128, sizeof(::mpfmessage::NetDevBaseInfo)},
  { 138, 146, sizeof(::mpfmessage::DiskInfo)},
  { 149, 158, sizeof(::mpfmessage::PartitionInfo)},
  { 162, 170, sizeof(::mpfmessage::ProcessorInfo)},
  { 173, 188, sizeof(::mpfmessage::HostBaseInfo)},
  { 198, 214, sizeof(::mpfmessage::IfBaseInfo)},
  { 225, 235, sizeof(::mpfmessage::IfResInfo)},
  { 240, 253, sizeof(::mpfmessage::ProcessInfo)},
  { 261, 269, sizeof(::mpfmessage::SoftwareInfo)},
  { 272, 280, sizeof(::mpfmessage::PerfParameter)},
  { 283, 294, sizeof(::mpfmessage::MidwarePerf)},
  { 300, 311, sizeof(::mpfmessage::DatabasePerf)},
  { 317, 333, sizeof(::mpfmessage::IfPerf)},
  { 344, 350, sizeof(::mpfmessage::MsgTopoDiscoveryResp)},
  { 351, 362, sizeof(::mpfmessage::DiscoveredDev)},
  { 368, 375, sizeof(::mpfmessage::MsgTopoDiscoveryNotify)},
  { 377, 388, sizeof(::mpfmessage::ResSynInfo)},
  { 394, 401, sizeof(::mpfmessage::RespAddr)},
  { 403, 410, sizeof(::mpfmessage::MsgResSynReq)},
  { 412, 418, sizeof(::mpfmessage::MsgResSynResp)},
  { 419, 431, sizeof(::mpfmessage::ResSynResult)},
  { 438, 444, sizeof(::mpfmessage::MsgResSynNotify)},
  { 445, 452, sizeof(::mpfmessage::MsgDevPerfCollectReq)},
  { 454, 460, sizeof(::mpfmessage::MsgDevPerfCollectResp)},
  { 461, 470, sizeof(::mpfmessage::MsgGetHostProcListReq)},
  { 474, 485, sizeof(::mpfmessage::MsgGetHostProcListResp)},
  { 491, 500, sizeof(::mpfmessage::MsgGetHostFileSystemListReq)},
  { 504, 514, sizeof(::mpfmessage::MsgGetHostFileSystemListResp)},
  { 519, 527, sizeof(::mpfmessage::DBResInfo)},
  { 530, 537, sizeof(::mpfmessage::MsgDBPerfCollectReq)},
  { 539, 545, sizeof(::mpfmessage::MsgDBPerfCollectResp)},
  { 546, 555, sizeof(::mpfmessage::MidwareResInfo)},
  { 559, 566, sizeof(::mpfmessage::MsgMidwarePerfCollectReq)},
  { 568, 574, sizeof(::mpfmessage::MsgMidwarePerfCollectResp)},
  { 575, 583, sizeof(::mpfmessage::DataSourceId)},
  { 586, 592, sizeof(::mpfmessage::MsgRoomResSyncReq)},
  { 593, 605, sizeof(::mpfmessage::Sensor)},
  { 612, 621, sizeof(::mpfmessage::DataSourceSyncResult)},
  { 625, 631, sizeof(::mpfmessage::MsgMachineRoomResSyncResp)},
  { 632, 639, sizeof(::mpfmessage::MsgGetSenserValueReq)},
  { 641, 652, sizeof(::mpfmessage::SenserValue)},
  { 658, 667, sizeof(::mpfmessage::SenserSyncResult)},
  { 671, 677, sizeof(::mpfmessage::MsgGetSenserValueResp)},
  { 678, 690, sizeof(::mpfmessage::ConnectivityTestSynReq)},
  { 697, 704, sizeof(::mpfmessage::MsgConnectivityTestSynResp)},
  { 706, 718, sizeof(::mpfmessage::MsgDevTestPara)},
  { 725, 733, sizeof(::mpfmessage::MsgReachableTestReq)},
  { 736, 742, sizeof(::mpfmessage::MsgReachableTestResp)},
  { 743, 754, sizeof(::mpfmessage::PingPerf)},
  { 760, 774, sizeof(::mpfmessage::ReachableTestResult)},
  { 783, 789, sizeof(::mpfmessage::MsgReachableTestNotify)},
  { 790, 797, sizeof(::mpfmessage::IpGroup)},
  { 799, 806, sizeof(::mpfmessage::MsgTopoDiscoveryReq)},
  { 808, 814, sizeof(::mpfmessage::MsgTopoFindResp)},
  { 815, 825, sizeof(::mpfmessage::TopoNodeInfo)},
  { 830, 841, sizeof(::mpfmessage::TopoLinkInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_SnmpBasePara_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_SnmpExtPara_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_SnmpInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_TelnetPara_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_SshPara_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_PingPara_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_DbLoginPara_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_NetDevBaseInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_DiskInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_PartitionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_ProcessorInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_HostBaseInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_IfBaseInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_IfResInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_ProcessInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_SoftwareInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_PerfParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MidwarePerf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_DatabasePerf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_IfPerf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgTopoDiscoveryResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_DiscoveredDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgTopoDiscoveryNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_ResSynInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_RespAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgResSynReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgResSynResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_ResSynResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgResSynNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgDevPerfCollectReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgDevPerfCollectResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgGetHostProcListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgGetHostProcListResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgGetHostFileSystemListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgGetHostFileSystemListResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_DBResInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgDBPerfCollectReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgDBPerfCollectResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MidwareResInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgMidwarePerfCollectReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgMidwarePerfCollectResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_DataSourceId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgRoomResSyncReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_Sensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_DataSourceSyncResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgMachineRoomResSyncResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgGetSenserValueReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_SenserValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_SenserSyncResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgGetSenserValueResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_ConnectivityTestSynReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgConnectivityTestSynResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgDevTestPara_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgReachableTestReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgReachableTestResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_PingPerf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_ReachableTestResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgReachableTestNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_IpGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgTopoDiscoveryReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_MsgTopoFindResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_TopoNodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mpfmessage::_TopoLinkInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "devcollector_msg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 63);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026devcollector_msg.proto\022\nmpfmessage\032\020ms"
      "g_common.proto\"\210\001\n\014SnmpBasePara\022\017\n\007ip_ad"
      "dr\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\026\n\016read_community"
      "\030\003 \001(\t\022\027\n\017write_community\030\004 \001(\t\022(\n\007versi"
      "on\030\005 \001(\0162\027.mpfmessage.SnmpVersion\"\276\001\n\013Sn"
      "mpExtPara\022\014\n\004user\030\001 \001(\t\022+\n\013auth_method\030\002"
      " \001(\0162\026.mpfmessage.AuthMethod\022\025\n\rauth_pas"
      "sword\030\003 \001(\t\0220\n\rencryptMethod\030\004 \001(\0162\031.mpf"
      "message.EncryptMethod\022\030\n\020encrypt_passwor"
      "d\030\005 \001(\t\022\021\n\tengine_id\030\006 \001(\t\"\202\001\n\010SnmpInfo\022"
      "+\n\tbase_para\030\001 \001(\0132\030.mpfmessage.SnmpBase"
      "Para\022)\n\010ext_para\030\002 \001(\0132\027.mpfmessage.Snmp"
      "ExtPara\022\017\n\007timeout\030\003 \001(\r\022\r\n\005retry\030\004 \001(\r\""
      "b\n\nTelnetPara\022\014\n\004user\030\001 \001(\t\022\014\n\004pass\030\002 \001("
      "\t\022\017\n\007timeout\030\003 \001(\r\022\r\n\005retry\030\004 \001(\r\022\n\n\002ip\030"
      "\005 \001(\t\022\014\n\004port\030\006 \001(\r\"_\n\007SshPara\022\014\n\004user\030\001"
      " \001(\t\022\014\n\004pass\030\002 \001(\t\022\014\n\004port\030\003 \001(\r\022\017\n\007time"
      "out\030\004 \001(\r\022\r\n\005retry\030\005 \001(\r\022\n\n\002ip\030\006 \001(\t\"F\n\010"
      "PingPara\022\n\n\002ip\030\001 \001(\t\022\r\n\005retry\030\002 \001(\r\022\016\n\006r"
      "es_id\030\003 \001(\r\022\017\n\007timeout\030\004 \001(\r\"\300\001\n\013DbLogin"
      "Para\022)\n\007db_type\030\001 \001(\0162\030.mpfmessage.Datab"
      "aseType\022\020\n\010login_ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\r\022"
      "#\n\007os_type\030\004 \001(\0162\022.mpfmessage.OSTYPE\022\016\n\006"
      "dbname\030\005 \001(\t\022\013\n\003uid\030\006 \001(\t\022\020\n\010password\030\007 "
      "\001(\t\022\022\n\ndb_version\030\010 \001(\t\"\360\001\n\016NetDevBaseIn"
      "fo\022&\n\ndev_status\030\001 \001(\0162\022.mpfmessage.Stat"
      "us\022%\n\010dev_type\030\002 \001(\0162\023.mpfmessage.ResTyp"
      "e\022\022\n\ndev_serial\030\003 \001(\t\022\017\n\007sys_oid\030\004 \001(\t\022\020"
      "\n\010sys_desc\030\005 \001(\t\022\020\n\010sys_name\030\006 \001(\t\022\021\n\tco"
      "ntactor\030\007 \001(\t\022\020\n\010location\030\010 \001(\t\022\017\n\007up_ti"
      "me\030\t \001(\r\022\020\n\010syn_time\030\n \001(\r\"|\n\010DiskInfo\022,"
      "\n\013disk_access\030\001 \001(\0162\027.mpfmessage.DISK_AC"
      "CESS\022/\n\nmedia_type\030\002 \001(\0162\033.mpfmessage.DI"
      "SK_MEDIA_TYPE\022\021\n\tdisk_size\030\003 \001(\r\"\\\n\rPart"
      "itionInfo\022\022\n\npart_index\030\001 \001(\r\022\021\n\tpart_na"
      "me\030\002 \001(\t\022\021\n\tpart_size\030\003 \001(\r\022\021\n\tpart_used"
      "\030\004 \001(\r\"X\n\rProcessorInfo\022\027\n\017processor_ind"
      "ex\030\001 \001(\r\022\026\n\016processor_desc\030\002 \001(\t\022\026\n\016proc"
      "essor_load\030\003 \001(\r\"\264\002\n\014HostBaseInfo\022\020\n\010sys"
      "_time\030\001 \001(\t\022\020\n\010run_time\030\002 \001(\r\022\027\n\017online_"
      "user_num\030\003 \001(\r\022\023\n\013process_num\030\004 \001(\r\022*\n\007c"
      "pulist\030\005 \003(\0132\031.mpfmessage.ProcessorInfo\022"
      "\030\n\020total_phy_memory\030\006 \001(\r\022\034\n\024total_virtu"
      "al_memory\030\007 \001(\r\022\030\n\020total_disk_space\030\010 \001("
      "\r\022&\n\010diskList\030\t \003(\0132\024.mpfmessage.DiskInf"
      "o\022,\n\tpartiList\030\n \003(\0132\031.mpfmessage.Partit"
      "ionInfo\"\372\001\n\nIfBaseInfo\022\r\n\005index\030\001 \001(\r\022\014\n"
      "\004desc\030\002 \001(\t\022\"\n\006iftype\030\003 \001(\0162\022.mpfmessage"
      ".IfType\022\024\n\014if_phys_addr\030\004 \001(\014\022\014\n\004rate\030\005 "
      "\001(\r\022\013\n\003mtu\030\006 \001(\r\022\n\n\002ip\030\007 \001(\t\022\014\n\004mask\030\010 \001"
      "(\t\022\'\n\013oper_status\030\t \001(\0162\022.mpfmessage.Sta"
      "tus\022(\n\014admin_status\030\n \001(\0162\022.mpfmessage.S"
      "tatus\022\r\n\005alias\030\013 \001(\t\"]\n\tIfResInfo\022\021\n\tdev"
      "_resid\030\001 \001(\r\022\020\n\010if_resid\030\002 \001(\r\022\017\n\007ifinde"
      "x\030\003 \001(\r\022\016\n\006ifdesc\030\004 \001(\t\022\n\n\002ip\030\005 \001(\t\"\250\001\n\013"
      "ProcessInfo\022\013\n\003pid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022&"
      "\n\004type\030\003 \001(\0162\030.mpfmessage.SoftwareType\022\020"
      "\n\010cpu_rate\030\004 \001(\r\022\017\n\007mem_use\030\005 \001(\r\022\020\n\010run"
      "_path\030\006 \001(\t\022\021\n\tparameter\030\007 \001(\t\022\016\n\006status"
      "\030\010 \001(\r\"Z\n\014SoftwareInfo\022\014\n\004name\030\001 \001(\t\022&\n\004"
      "type\030\002 \001(\0162\030.mpfmessage.SoftwareType\022\024\n\014"
      "install_time\030\003 \001(\t\"<\n\rPerfParameter\022\016\n\006t"
      "ypeid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\003 \001(\r"
      "\"\225\001\n\013MidwarePerf\022\r\n\005resid\030\001 \001(\r\022\014\n\004name\030"
      "\002 \001(\t\022\021\n\tavailable\030\003 \001(\r\022\024\n\014cpu_rate_app"
      "\030\004 \001(\r\022\023\n\013mem_use_app\030\005 \001(\r\022+\n\010paralist\030"
      "\006 \003(\0132\031.mpfmessage.PerfParameter\"\226\001\n\014Dat"
      "abasePerf\022\r\n\005resid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\021"
      "\n\tavailable\030\003 \001(\r\022\024\n\014cpu_rate_app\030\004 \001(\r\022"
      "\023\n\013mem_use_app\030\005 \001(\r\022+\n\010paralist\030\006 \003(\0132\031"
      ".mpfmessage.PerfParameter\"\367\001\n\006IfPerf\022\r\n\005"
      "index\030\001 \001(\r\022\014\n\004desc\030\002 \001(\t\022\'\n\013oper_status"
      "\030\003 \001(\0162\022.mpfmessage.Status\022(\n\014admin_stat"
      "us\030\004 \001(\0162\022.mpfmessage.Status\022\014\n\004rate\030\005 \001"
      "(\r\022\017\n\007byte_in\030\006 \001(\r\022\020\n\010byte_out\030\007 \001(\r\022\020\n"
      "\010error_in\030\010 \001(\r\022\021\n\terror_out\030\t \001(\r\022\022\n\ndi"
      "scard_in\030\n \001(\r\022\023\n\013discard_out\030\013 \001(\r\"A\n\024M"
      "sgTopoDiscoveryResp\022)\n\006result\030\001 \001(\0132\031.mp"
      "fmessage.MsgCommonData\"\322\001\n\rDiscoveredDev"
      "\022\n\n\002ip\030\001 \001(\t\022\022\n\nresultcode\030\002 \001(\r\022\016\n\006deta"
      "il\030\003 \001(\t\0221\n\rdev_base_info\030\004 \001(\0132\032.mpfmes"
      "sage.NetDevBaseInfo\0220\n\016host_base_info\030\005 "
      "\001(\0132\030.mpfmessage.HostBaseInfo\022,\n\014if_base"
      "_info\030\006 \003(\0132\026.mpfmessage.IfBaseInfo\"|\n\026M"
      "sgTopoDiscoveryNotify\0220\n\016topo_node_info\030"
      "\001 \003(\0132\030.mpfmessage.TopoNodeInfo\0220\n\016topo_"
      "link_info\030\002 \003(\0132\030.mpfmessage.TopoLinkInf"
      "o\"\346\001\n\nResSynInfo\022\016\n\006res_id\030\001 \001(\r\022%\n\010res_"
      "type\030\002 \001(\0162\023.mpfmessage.ResType\022\'\n\tsnmp_"
      "info\030\003 \001(\0132\024.mpfmessage.SnmpInfo\022*\n\ntele"
      "ntPara\030\004 \001(\0132\026.mpfmessage.TelnetPara\022$\n\007"
      "sshPara\030\005 \001(\0132\023.mpfmessage.SshPara\022&\n\007if"
      "_list\030\006 \003(\0132\025.mpfmessage.IfResInfo\"&\n\010Re"
      "spAddr\022\014\n\004addr\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\"a\n\014Ms"
      "gResSynReq\022(\n\010res_list\030\001 \003(\0132\026.mpfmessag"
      "e.ResSynInfo\022\'\n\tresp_addr\030\002 \001(\0132\024.mpfmes"
      "sage.RespAddr\":\n\rMsgResSynResp\022)\n\006result"
      "\030\001 \001(\0132\031.mpfmessage.MsgCommonData\"\374\001\n\014Re"
      "sSynResult\022\016\n\006res_id\030\001 \001(\r\022%\n\010res_type\030\002"
      " \001(\0162\023.mpfmessage.ResType\022\022\n\nresultcode\030"
      "\003 \001(\r\022\016\n\006detail\030\004 \001(\t\0221\n\rdev_base_info\030\005"
      " \001(\0132\032.mpfmessage.NetDevBaseInfo\0220\n\016host"
      "_base_info\030\006 \001(\0132\030.mpfmessage.HostBaseIn"
      "fo\022,\n\014if_base_info\030\007 \003(\0132\026.mpfmessage.If"
      "BaseInfo\"A\n\017MsgResSynNotify\022.\n\014res_syn_d"
      "ata\030\001 \003(\0132\030.mpfmessage.ResSynResult\"V\n\024M"
      "sgDevPerfCollectReq\022(\n\010res_list\030\001 \003(\0132\026."
      "mpfmessage.ResSynInfo\022\024\n\014collect_time\030\002 "
      "\001(\r\"B\n\025MsgDevPerfCollectResp\022)\n\006result\030\001"
      " \001(\0132\031.mpfmessage.MsgCommonData\"\247\001\n\025MsgG"
      "etHostProcListReq\022\023\n\013host_res_id\030\001 \001(\r\022\'"
      "\n\tsnmp_info\030\002 \001(\0132\024.mpfmessage.SnmpInfo\022"
      "*\n\ntelentPara\030\003 \001(\0132\026.mpfmessage.TelnetP"
      "ara\022$\n\007sshPara\030\004 \001(\0132\023.mpfmessage.SshPar"
      "a\"\302\001\n\026MsgGetHostProcListResp\022\023\n\013host_res"
      "_id\030\001 \001(\r\022\022\n\nresultcode\030\002 \001(\r\022\016\n\006detail\030"
      "\003 \001(\t\022.\n\014softwarelist\030\004 \003(\0132\030.mpfmessage"
      ".SoftwareInfo\022)\n\010proclist\030\005 \003(\0132\027.mpfmes"
      "sage.ProcessInfo\022\024\n\014collect_time\030\006 \001(\r\"\255"
      "\001\n\033MsgGetHostFileSystemListReq\022\023\n\013host_r"
      "es_id\030\001 \001(\r\022\'\n\tsnmp_info\030\002 \001(\0132\024.mpfmess"
      "age.SnmpInfo\022*\n\ntelentPara\030\003 \001(\0132\026.mpfme"
      "ssage.TelnetPara\022$\n\007sshPara\030\004 \001(\0132\023.mpfm"
      "essage.SshPara\"\233\001\n\034MsgGetHostFileSystemL"
      "istResp\022\023\n\013host_res_id\030\001 \001(\r\022\022\n\nresultco"
      "de\030\002 \001(\r\022\016\n\006detail\030\003 \001(\t\022,\n\tpartiList\030\004 "
      "\003(\0132\031.mpfmessage.PartitionInfo\022\024\n\014collec"
      "t_time\030\005 \001(\r\"s\n\tDBResInfo\022\016\n\006res_id\030\001 \001("
      "\r\022\'\n\tsnmp_info\030\002 \001(\0132\024.mpfmessage.SnmpIn"
      "fo\022-\n\014db_conn_pare\030\003 \001(\0132\027.mpfmessage.Db"
      "LoginPara\"U\n\023MsgDBPerfCollectReq\022(\n\tdbre"
      "slist\030\001 \003(\0132\025.mpfmessage.DBResInfo\022\024\n\014co"
      "llect_time\030\002 \001(\r\"A\n\024MsgDBPerfCollectResp"
      "\022)\n\006result\030\001 \001(\0132\031.mpfmessage.MsgCommonD"
      "ata\"\231\001\n\016MidwareResInfo\022\016\n\006res_id\030\001 \001(\r\022\'"
      "\n\tsnmp_info\030\002 \001(\0132\024.mpfmessage.SnmpInfo\022"
      "#\n\007os_type\030\003 \001(\0162\022.mpfmessage.OSTYPE\022)\n\010"
      "mid_type\030\004 \001(\0162\027.mpfmessage.MidwareType\""
      "`\n\030MsgMidwarePerfCollectReq\022.\n\nmidreslis"
      "t\030\001 \003(\0132\032.mpfmessage.MidwareResInfo\022\024\n\014c"
      "ollect_time\030\002 \001(\r\"F\n\031MsgMidwarePerfColle"
      "ctResp\022)\n\006result\030\001 \001(\0132\031.mpfmessage.MsgC"
      "ommonData\"_\n\014DataSourceId\022\026\n\016device_room"
      "_id\030\001 \001(\r\022\016\n\006res_id\030\002 \001(\r\022\'\n\tsnmp_info\030\003"
      " \001(\0132\024.mpfmessage.SnmpInfo\">\n\021MsgRoomRes"
      "SyncReq\022)\n\007ds_list\030\001 \003(\0132\030.mpfmessage.Da"
      "taSourceId\"\221\001\n\006Sensor\022\016\n\006serial\030\001 \001(\t\022\014\n"
      "\004name\030\002 \001(\t\022\014\n\004type\030\003 \001(\r\022\r\n\005units\030\004 \001(\t"
      "\022+\n\006status\030\005 \001(\0162\033.mpfmessage.AvailableS"
      "tatus\022\020\n\010sensorid\030\006 \001(\r\022\r\n\005index\030\007 \001(\t\"u"
      "\n\024DataSourceSyncResult\022\021\n\tds_res_id\030\001 \001("
      "\r\022\022\n\nresultcode\030\002 \001(\r\022\016\n\006detail\030\003 \001(\t\022&\n"
      "\nsensorlist\030\004 \003(\0132\022.mpfmessage.Sensor\"R\n"
      "\031MsgMachineRoomResSyncResp\0225\n\013ds_res_lis"
      "t\030\001 \003(\0132 .mpfmessage.DataSourceSyncResul"
      "t\"W\n\024MsgGetSenserValueReq\022)\n\007ds_list\030\001 \003"
      "(\0132\030.mpfmessage.DataSourceId\022\024\n\014collect_"
      "time\030\002 \001(\r\"\203\001\n\013SenserValue\022\r\n\005index\030\001 \001("
      "\r\022\014\n\004type\030\002 \001(\r\022\021\n\tavailable\030\003 \001(\r\022\"\n\006st"
      "atus\030\004 \001(\0162\022.mpfmessage.Status\022\r\n\005value\030"
      "\005 \001(\r\022\021\n\ttimestamp\030\006 \001(\r\"u\n\020SenserSyncRe"
      "sult\022\021\n\tds_res_id\030\001 \001(\r\022\022\n\nresultcode\030\002 "
      "\001(\r\022\016\n\006detail\030\003 \001(\t\022*\n\tvaluelist\030\004 \003(\0132\027"
      ".mpfmessage.SenserValue\"B\n\025MsgGetSenserV"
      "alueResp\022)\n\006result\030\001 \001(\0132\031.mpfmessage.Ms"
      "gCommonData\"\247\002\n\026ConnectivityTestSynReq\022\016"
      "\n\006res_id\030\001 \001(\r\022%\n\010res_type\030\002 \001(\0162\023.mpfme"
      "ssage.ResType\0223\n\ttest_type\030\003 \001(\0162 .mpfme"
      "ssage.ConnectivityTestType\022\'\n\tsnmp_info\030"
      "\004 \001(\0132\024.mpfmessage.SnmpInfo\022*\n\ntelentPar"
      "a\030\005 \001(\0132\026.mpfmessage.TelnetPara\022$\n\007sshPa"
      "ra\030\006 \001(\0132\023.mpfmessage.SshPara\022&\n\010pingPar"
      "a\030\007 \001(\0132\024.mpfmessage.PingPara\"`\n\032MsgConn"
      "ectivityTestSynResp\022\016\n\006res_id\030\001 \001(\r\0222\n\006r"
      "esult\030\002 \001(\0162\".mpfmessage.ConnectivityTes"
      "tResult\"\345\001\n\016MsgDevTestPara\022\016\n\006res_id\030\001 \001"
      "(\r\022\n\n\002ip\030\002 \001(\t\022\021\n\ttest_type\030\003 \001(\r\022\'\n\tpin"
      "g_para\030\004 \001(\0132\024.mpfmessage.PingPara\022\'\n\tsn"
      "mp_para\030\005 \001(\0132\024.mpfmessage.SnmpInfo\022%\n\010s"
      "sh_para\030\006 \001(\0132\023.mpfmessage.SshPara\022+\n\013te"
      "lnet_para\030\007 \001(\0132\026.mpfmessage.TelnetPara\""
      "\211\001\n\023MsgReachableTestReq\0221\n\rdev_para_list"
      "\030\001 \003(\0132\032.mpfmessage.MsgDevTestPara\022)\n\013no"
      "tify_addr\030\002 \001(\0132\024.mpfmessage.RespAddr\022\024\n"
      "\014collect_time\030\003 \001(\004\"A\n\024MsgReachableTestR"
      "esp\022)\n\006result\030\001 \001(\0132\031.mpfmessage.MsgComm"
      "onData\"\233\001\n\010PingPerf\022\025\n\rsend_pack_num\030\001 \001"
      "(\r\022\030\n\020recieve_pack_num\030\002 \001(\r\022\025\n\rloss_pac"
      "k_num\030\003 \001(\r\022\025\n\rmax_cost_time\030\004 \001(\002\022\025\n\rmi"
      "n_cost_time\030\005 \001(\002\022\031\n\021average_cost_time\030\006"
      " \001(\002\"\265\002\n\023ReachableTestResult\022\016\n\006res_id\030\001"
      " \001(\r\022\n\n\002ip\030\002 \001(\t\022+\n\013ping_result\030\003 \001(\0162\026."
      "mpfmessage.TestResult\022+\n\013snmp_result\030\004 \001"
      "(\0162\026.mpfmessage.TestResult\022*\n\nssh_result"
      "\030\005 \001(\0162\026.mpfmessage.TestResult\022-\n\rtelnet"
      "_result\030\006 \001(\0162\026.mpfmessage.TestResult\022\016\n"
      "\006detail\030\007 \001(\t\022\'\n\tping_perf\030\010 \001(\0132\024.mpfme"
      "ssage.PingPerf\022\024\n\014collect_time\030\t \001(\004\"N\n\026"
      "MsgReachableTestNotify\0224\n\013result_data\030\001 "
      "\003(\0132\037.mpfmessage.ReachableTestResult\"+\n\007"
      "IpGroup\022\020\n\010start_ip\030\001 \001(\t\022\016\n\006end_ip\030\002 \001("
      "\t\"`\n\023MsgTopoDiscoveryReq\022\"\n\004snmp\030\001 \003(\0132\024"
      ".mpfmessage.SnmpInfo\022%\n\010ip_group\030\002 \003(\0132\023"
      ".mpfmessage.IpGroup\"<\n\017MsgTopoFindResp\022)"
      "\n\006result\030\001 \001(\0132\031.mpfmessage.MsgCommonDat"
      "a\"s\n\014TopoNodeInfo\022\n\n\002ip\030\001 \001(\t\022\014\n\004name\030\002 "
      "\001(\t\022\014\n\004type\030\003 \001(\r\022\022\n\nrun_status\030\004 \001(\r\022\'\n"
      "\tsnmp_info\030\005 \001(\0132\024.mpfmessage.SnmpInfo\"\177"
      "\n\014TopoLinkInfo\022\016\n\006src_ip\030\001 \001(\t\022\017\n\007dest_i"
      "p\030\002 \001(\t\022\020\n\010src_name\030\003 \001(\t\022\021\n\tdest_name\030\004"
      " \001(\t\022\023\n\013src_if_name\030\005 \001(\t\022\024\n\014dest_if_nam"
      "e\030\006 \001(\t*}\n\007ResType\022\n\n\006ROUTER\020\001\022\n\n\006SWITCH"
      "\020\002\022\014\n\010FIREWALL\020\003\022\010\n\004HOST\020\004\022\r\n\tINTERFACE\020"
      "\005\022\014\n\010DATABASE\020\006\022\013\n\007MIDWARE\020\007\022\010\n\004ROOM\020\010\022\016"
      "\n\nOTHER_TYPE\020\t*4\n\013SnmpVersion\022\013\n\007SNMP_V1"
      "\020\001\022\013\n\007SNMP_V2\020\002\022\013\n\007SNMP_V3\020\003*-\n\nAuthMeth"
      "od\022\007\n\003MD5\020\001\022\007\n\003SHA\020\002\022\r\n\tNONE_AUTH\020\003*3\n\rE"
      "ncryptMethod\022\007\n\003DES\020\001\022\007\n\003AES\020\002\022\020\n\014NONE_E"
      "NCRYPT\020\003*D\n\014DatabaseType\022\n\n\006ORACLE\020\001\022\t\n\005"
      "MYSQL\020\002\022\017\n\013MSSQLSERVER\020\003\022\014\n\010POSTGRES\020\004*+"
      "\n\006OSTYPE\022\013\n\007WINDOWS\020\001\022\t\n\005LINUX\020\002\022\t\n\005MACO"
      "S\020\003*-\n\013MidwareType\022\n\n\006TOMCAT\020\001\022\t\n\005JETTY\020"
      "\002\022\007\n\003IIS\020\003**\n\013DISK_ACCESS\022\r\n\treadWrite\020\001"
      "\022\014\n\010readOnly\020\002*\234\001\n\017DISK_MEDIA_TYPE\022\017\n\013ot"
      "her_media\020\001\022\021\n\runknown_media\020\002\022\014\n\010hardDi"
      "sk\020\003\022\016\n\nfloppyDisk\020\004\022\022\n\016opticalDiskROM\020\005"
      "\022\023\n\017opticalDiskWORM\020\006\022\021\n\ropticalDiskRW\020\007"
      "\022\013\n\007ramDisk\020\010*W\n\006Status\022\006\n\002up\020\001\022\010\n\004down\020"
      "\002\022\013\n\007testing\020\003\022\013\n\007unknown\020\004\022\020\n\014other_sta"
      "tus\020\005\022\017\n\013not_present\020\006*\320\001\n\006IfType\022\n\n\006oth"
      "ers\020\001\022\022\n\016ethernetCsmacd\020\006\022\007\n\003ppp\020\027\022\024\n\020so"
      "ftwareLoopback\020\030\022\007\n\003atm\020%\022\r\n\tfastEther\020>"
      "\022\013\n\007channel\020F\022\r\n\tieee80211\020G\022\010\n\004adsl\020^\022\023"
      "\n\017gigabitEthernet\020u\022\010\n\004fast\020}\022\013\n\006tunnel\020"
      "\203\001\022\t\n\004mpls\020\246\001\022\010\n\003pos\020\253\001\022\010\n\003usb\020\240\001*V\n\014Sof"
      "twareType\022\016\n\nunknown_sw\020\001\022\023\n\017operatingSy"
      "stem\020\002\022\020\n\014deviceDriver\020\003\022\017\n\013application\020"
      "\004*2\n\017AvailableStatus\022\r\n\tavailable\020\001\022\020\n\014n"
      "o_available\020\002*S\n\024ConnectivityTestType\022\r\n"
      "\tPING_TEST\020\001\022\r\n\tSNMP_TEST\020\002\022\017\n\013TELNET_TE"
      "ST\020\004\022\014\n\010SSH_TEST\020\010*K\n\026ConnectivityTestRe"
      "sult\022\017\n\013UNREACHABLE\020\001\022\016\n\nLOGINERROR\020\002\022\020\n"
      "\014CONNECTIONOK\020\003*}\n\nTestResult\022\024\n\020REACHAB"
      "LE_STATUS\020\001\022\026\n\022UNREACHABLE_STATUS\020\002\022\025\n\021M"
      "ANAGEMENT_STATUS\020\003\022\030\n\024NOTMANAGEMENT_STAT"
      "US\020\004\022\020\n\014OTHER_STATUS\020\005B\002H\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 9826);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "devcollector_msg.proto", &protobuf_RegisterTypes);
  ::protobuf_msg_5fcommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_devcollector_5fmsg_2eproto
namespace mpfmessage {
const ::google::protobuf::EnumDescriptor* ResType_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[0];
}
bool ResType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SnmpVersion_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[1];
}
bool SnmpVersion_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AuthMethod_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[2];
}
bool AuthMethod_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EncryptMethod_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[3];
}
bool EncryptMethod_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DatabaseType_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[4];
}
bool DatabaseType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OSTYPE_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[5];
}
bool OSTYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MidwareType_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[6];
}
bool MidwareType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DISK_ACCESS_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[7];
}
bool DISK_ACCESS_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DISK_MEDIA_TYPE_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[8];
}
bool DISK_MEDIA_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[9];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IfType_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[10];
}
bool IfType_IsValid(int value) {
  switch (value) {
    case 1:
    case 6:
    case 23:
    case 24:
    case 37:
    case 62:
    case 70:
    case 71:
    case 94:
    case 117:
    case 125:
    case 131:
    case 160:
    case 166:
    case 171:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SoftwareType_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[11];
}
bool SoftwareType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AvailableStatus_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[12];
}
bool AvailableStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConnectivityTestType_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[13];
}
bool ConnectivityTestType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConnectivityTestResult_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[14];
}
bool ConnectivityTestResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TestResult_descriptor() {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_devcollector_5fmsg_2eproto::file_level_enum_descriptors[15];
}
bool TestResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SnmpBasePara::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnmpBasePara::kIpAddrFieldNumber;
const int SnmpBasePara::kPortFieldNumber;
const int SnmpBasePara::kReadCommunityFieldNumber;
const int SnmpBasePara::kWriteCommunityFieldNumber;
const int SnmpBasePara::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnmpBasePara::SnmpBasePara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpBasePara();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.SnmpBasePara)
}
SnmpBasePara::SnmpBasePara(const SnmpBasePara& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_addr()) {
    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  read_community_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_read_community()) {
    read_community_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_community_);
  }
  write_community_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_write_community()) {
    write_community_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.write_community_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&port_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.SnmpBasePara)
}

void SnmpBasePara::SharedCtor() {
  _cached_size_ = 0;
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_community_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  write_community_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  version_ = 1;
}

SnmpBasePara::~SnmpBasePara() {
  // @@protoc_insertion_point(destructor:mpfmessage.SnmpBasePara)
  SharedDtor();
}

void SnmpBasePara::SharedDtor() {
  ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_community_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  write_community_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnmpBasePara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnmpBasePara::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnmpBasePara& SnmpBasePara::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpBasePara();
  return *internal_default_instance();
}

SnmpBasePara* SnmpBasePara::New(::google::protobuf::Arena* arena) const {
  SnmpBasePara* n = new SnmpBasePara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnmpBasePara::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.SnmpBasePara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!ip_addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_addr_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!read_community_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*read_community_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!write_community_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*write_community_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 24u) {
    port_ = 0u;
    version_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnmpBasePara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.SnmpBasePara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.SnmpBasePara.ip_addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string read_community = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_read_community()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->read_community().data(), static_cast<int>(this->read_community().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.SnmpBasePara.read_community");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string write_community = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_write_community()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->write_community().data(), static_cast<int>(this->write_community().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.SnmpBasePara.write_community");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SnmpVersion version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::SnmpVersion_IsValid(value)) {
            set_version(static_cast< ::mpfmessage::SnmpVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.SnmpBasePara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.SnmpBasePara)
  return false;
#undef DO_
}

void SnmpBasePara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.SnmpBasePara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SnmpBasePara.ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_addr(), output);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional string read_community = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->read_community().data(), static_cast<int>(this->read_community().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SnmpBasePara.read_community");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->read_community(), output);
  }

  // optional string write_community = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->write_community().data(), static_cast<int>(this->write_community().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SnmpBasePara.write_community");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->write_community(), output);
  }

  // optional .mpfmessage.SnmpVersion version = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.SnmpBasePara)
}

::google::protobuf::uint8* SnmpBasePara::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.SnmpBasePara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SnmpBasePara.ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_addr(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional string read_community = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->read_community().data(), static_cast<int>(this->read_community().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SnmpBasePara.read_community");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->read_community(), target);
  }

  // optional string write_community = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->write_community().data(), static_cast<int>(this->write_community().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SnmpBasePara.write_community");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->write_community(), target);
  }

  // optional .mpfmessage.SnmpVersion version = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.SnmpBasePara)
  return target;
}

size_t SnmpBasePara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.SnmpBasePara)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string ip_addr = 1;
    if (has_ip_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_addr());
    }

    // optional string read_community = 3;
    if (has_read_community()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->read_community());
    }

    // optional string write_community = 4;
    if (has_write_community()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->write_community());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional .mpfmessage.SnmpVersion version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnmpBasePara::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.SnmpBasePara)
  GOOGLE_DCHECK_NE(&from, this);
  const SnmpBasePara* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnmpBasePara>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.SnmpBasePara)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.SnmpBasePara)
    MergeFrom(*source);
  }
}

void SnmpBasePara::MergeFrom(const SnmpBasePara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.SnmpBasePara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip_addr();
      ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_read_community();
      read_community_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_community_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_write_community();
      write_community_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.write_community_);
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnmpBasePara::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.SnmpBasePara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnmpBasePara::CopyFrom(const SnmpBasePara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.SnmpBasePara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnmpBasePara::IsInitialized() const {
  return true;
}

void SnmpBasePara::Swap(SnmpBasePara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnmpBasePara::InternalSwap(SnmpBasePara* other) {
  using std::swap;
  ip_addr_.Swap(&other->ip_addr_);
  read_community_.Swap(&other->read_community_);
  write_community_.Swap(&other->write_community_);
  swap(port_, other->port_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnmpBasePara::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SnmpExtPara::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnmpExtPara::kUserFieldNumber;
const int SnmpExtPara::kAuthMethodFieldNumber;
const int SnmpExtPara::kAuthPasswordFieldNumber;
const int SnmpExtPara::kEncryptMethodFieldNumber;
const int SnmpExtPara::kEncryptPasswordFieldNumber;
const int SnmpExtPara::kEngineIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnmpExtPara::SnmpExtPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpExtPara();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.SnmpExtPara)
}
SnmpExtPara::SnmpExtPara(const SnmpExtPara& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  auth_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_password()) {
    auth_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
  }
  encrypt_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encrypt_password()) {
    encrypt_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypt_password_);
  }
  engine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_engine_id()) {
    engine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.engine_id_);
  }
  ::memcpy(&auth_method_, &from.auth_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&encryptmethod_) -
    reinterpret_cast<char*>(&auth_method_)) + sizeof(encryptmethod_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.SnmpExtPara)
}

void SnmpExtPara::SharedCtor() {
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  engine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_method_ = 1;
  encryptmethod_ = 1;
}

SnmpExtPara::~SnmpExtPara() {
  // @@protoc_insertion_point(destructor:mpfmessage.SnmpExtPara)
  SharedDtor();
}

void SnmpExtPara::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  engine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnmpExtPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnmpExtPara::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnmpExtPara& SnmpExtPara::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpExtPara();
  return *internal_default_instance();
}

SnmpExtPara* SnmpExtPara::New(::google::protobuf::Arena* arena) const {
  SnmpExtPara* n = new SnmpExtPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnmpExtPara::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.SnmpExtPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!auth_password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*auth_password_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!encrypt_password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*encrypt_password_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!engine_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*engine_id_.UnsafeRawStringPointer())->clear();
    }
    auth_method_ = 1;
    encryptmethod_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnmpExtPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.SnmpExtPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.SnmpExtPara.user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.AuthMethod auth_method = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::AuthMethod_IsValid(value)) {
            set_auth_method(static_cast< ::mpfmessage::AuthMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string auth_password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->auth_password().data(), static_cast<int>(this->auth_password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.SnmpExtPara.auth_password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.EncryptMethod encryptMethod = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::EncryptMethod_IsValid(value)) {
            set_encryptmethod(static_cast< ::mpfmessage::EncryptMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string encrypt_password = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encrypt_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encrypt_password().data(), static_cast<int>(this->encrypt_password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.SnmpExtPara.encrypt_password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string engine_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_engine_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->engine_id().data(), static_cast<int>(this->engine_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.SnmpExtPara.engine_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.SnmpExtPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.SnmpExtPara)
  return false;
#undef DO_
}

void SnmpExtPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.SnmpExtPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SnmpExtPara.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // optional .mpfmessage.AuthMethod auth_method = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->auth_method(), output);
  }

  // optional string auth_password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_password().data(), static_cast<int>(this->auth_password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SnmpExtPara.auth_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->auth_password(), output);
  }

  // optional .mpfmessage.EncryptMethod encryptMethod = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->encryptmethod(), output);
  }

  // optional string encrypt_password = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt_password().data(), static_cast<int>(this->encrypt_password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SnmpExtPara.encrypt_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->encrypt_password(), output);
  }

  // optional string engine_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->engine_id().data(), static_cast<int>(this->engine_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SnmpExtPara.engine_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->engine_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.SnmpExtPara)
}

::google::protobuf::uint8* SnmpExtPara::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.SnmpExtPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SnmpExtPara.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // optional .mpfmessage.AuthMethod auth_method = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->auth_method(), target);
  }

  // optional string auth_password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_password().data(), static_cast<int>(this->auth_password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SnmpExtPara.auth_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->auth_password(), target);
  }

  // optional .mpfmessage.EncryptMethod encryptMethod = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->encryptmethod(), target);
  }

  // optional string encrypt_password = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt_password().data(), static_cast<int>(this->encrypt_password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SnmpExtPara.encrypt_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->encrypt_password(), target);
  }

  // optional string engine_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->engine_id().data(), static_cast<int>(this->engine_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SnmpExtPara.engine_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->engine_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.SnmpExtPara)
  return target;
}

size_t SnmpExtPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.SnmpExtPara)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string auth_password = 3;
    if (has_auth_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_password());
    }

    // optional string encrypt_password = 5;
    if (has_encrypt_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encrypt_password());
    }

    // optional string engine_id = 6;
    if (has_engine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->engine_id());
    }

    // optional .mpfmessage.AuthMethod auth_method = 2;
    if (has_auth_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->auth_method());
    }

    // optional .mpfmessage.EncryptMethod encryptMethod = 4;
    if (has_encryptmethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encryptmethod());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnmpExtPara::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.SnmpExtPara)
  GOOGLE_DCHECK_NE(&from, this);
  const SnmpExtPara* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnmpExtPara>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.SnmpExtPara)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.SnmpExtPara)
    MergeFrom(*source);
  }
}

void SnmpExtPara::MergeFrom(const SnmpExtPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.SnmpExtPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_auth_password();
      auth_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_encrypt_password();
      encrypt_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypt_password_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_engine_id();
      engine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.engine_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      auth_method_ = from.auth_method_;
    }
    if (cached_has_bits & 0x00000020u) {
      encryptmethod_ = from.encryptmethod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnmpExtPara::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.SnmpExtPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnmpExtPara::CopyFrom(const SnmpExtPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.SnmpExtPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnmpExtPara::IsInitialized() const {
  return true;
}

void SnmpExtPara::Swap(SnmpExtPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnmpExtPara::InternalSwap(SnmpExtPara* other) {
  using std::swap;
  user_.Swap(&other->user_);
  auth_password_.Swap(&other->auth_password_);
  encrypt_password_.Swap(&other->encrypt_password_);
  engine_id_.Swap(&other->engine_id_);
  swap(auth_method_, other->auth_method_);
  swap(encryptmethod_, other->encryptmethod_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnmpExtPara::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SnmpInfo::InitAsDefaultInstance() {
  ::mpfmessage::_SnmpInfo_default_instance_._instance.get_mutable()->base_para_ = const_cast< ::mpfmessage::SnmpBasePara*>(
      ::mpfmessage::SnmpBasePara::internal_default_instance());
  ::mpfmessage::_SnmpInfo_default_instance_._instance.get_mutable()->ext_para_ = const_cast< ::mpfmessage::SnmpExtPara*>(
      ::mpfmessage::SnmpExtPara::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnmpInfo::kBaseParaFieldNumber;
const int SnmpInfo::kExtParaFieldNumber;
const int SnmpInfo::kTimeoutFieldNumber;
const int SnmpInfo::kRetryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnmpInfo::SnmpInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.SnmpInfo)
}
SnmpInfo::SnmpInfo(const SnmpInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base_para()) {
    base_para_ = new ::mpfmessage::SnmpBasePara(*from.base_para_);
  } else {
    base_para_ = NULL;
  }
  if (from.has_ext_para()) {
    ext_para_ = new ::mpfmessage::SnmpExtPara(*from.ext_para_);
  } else {
    ext_para_ = NULL;
  }
  ::memcpy(&timeout_, &from.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&retry_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(retry_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.SnmpInfo)
}

void SnmpInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&base_para_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retry_) -
      reinterpret_cast<char*>(&base_para_)) + sizeof(retry_));
}

SnmpInfo::~SnmpInfo() {
  // @@protoc_insertion_point(destructor:mpfmessage.SnmpInfo)
  SharedDtor();
}

void SnmpInfo::SharedDtor() {
  if (this != internal_default_instance()) delete base_para_;
  if (this != internal_default_instance()) delete ext_para_;
}

void SnmpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnmpInfo::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnmpInfo& SnmpInfo::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSnmpInfo();
  return *internal_default_instance();
}

SnmpInfo* SnmpInfo::New(::google::protobuf::Arena* arena) const {
  SnmpInfo* n = new SnmpInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnmpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.SnmpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(base_para_ != NULL);
      base_para_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ext_para_ != NULL);
      ext_para_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&timeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&retry_) -
        reinterpret_cast<char*>(&timeout_)) + sizeof(retry_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnmpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.SnmpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpfmessage.SnmpBasePara base_para = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base_para()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SnmpExtPara ext_para = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ext_para()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 retry = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_retry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.SnmpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.SnmpInfo)
  return false;
#undef DO_
}

void SnmpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.SnmpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.SnmpBasePara base_para = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_para_, output);
  }

  // optional .mpfmessage.SnmpExtPara ext_para = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ext_para_, output);
  }

  // optional uint32 timeout = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timeout(), output);
  }

  // optional uint32 retry = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->retry(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.SnmpInfo)
}

::google::protobuf::uint8* SnmpInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.SnmpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.SnmpBasePara base_para = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->base_para_, deterministic, target);
  }

  // optional .mpfmessage.SnmpExtPara ext_para = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->ext_para_, deterministic, target);
  }

  // optional uint32 timeout = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timeout(), target);
  }

  // optional uint32 retry = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->retry(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.SnmpInfo)
  return target;
}

size_t SnmpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.SnmpInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .mpfmessage.SnmpBasePara base_para = 1;
    if (has_base_para()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->base_para_);
    }

    // optional .mpfmessage.SnmpExtPara ext_para = 2;
    if (has_ext_para()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->ext_para_);
    }

    // optional uint32 timeout = 3;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional uint32 retry = 4;
    if (has_retry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retry());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnmpInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.SnmpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SnmpInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnmpInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.SnmpInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.SnmpInfo)
    MergeFrom(*source);
  }
}

void SnmpInfo::MergeFrom(const SnmpInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.SnmpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_base_para()->::mpfmessage::SnmpBasePara::MergeFrom(from.base_para());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ext_para()->::mpfmessage::SnmpExtPara::MergeFrom(from.ext_para());
    }
    if (cached_has_bits & 0x00000004u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000008u) {
      retry_ = from.retry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnmpInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.SnmpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnmpInfo::CopyFrom(const SnmpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.SnmpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnmpInfo::IsInitialized() const {
  return true;
}

void SnmpInfo::Swap(SnmpInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnmpInfo::InternalSwap(SnmpInfo* other) {
  using std::swap;
  swap(base_para_, other->base_para_);
  swap(ext_para_, other->ext_para_);
  swap(timeout_, other->timeout_);
  swap(retry_, other->retry_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnmpInfo::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelnetPara::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelnetPara::kUserFieldNumber;
const int TelnetPara::kPassFieldNumber;
const int TelnetPara::kTimeoutFieldNumber;
const int TelnetPara::kRetryFieldNumber;
const int TelnetPara::kIpFieldNumber;
const int TelnetPara::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelnetPara::TelnetPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsTelnetPara();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.TelnetPara)
}
TelnetPara::TelnetPara(const TelnetPara& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pass()) {
    pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&timeout_, &from.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.TelnetPara)
}

void TelnetPara::SharedCtor() {
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(port_));
}

TelnetPara::~TelnetPara() {
  // @@protoc_insertion_point(destructor:mpfmessage.TelnetPara)
  SharedDtor();
}

void TelnetPara::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TelnetPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelnetPara::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelnetPara& TelnetPara::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsTelnetPara();
  return *internal_default_instance();
}

TelnetPara* TelnetPara::New(::google::protobuf::Arena* arena) const {
  TelnetPara* n = new TelnetPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelnetPara::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.TelnetPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!pass_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pass_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&timeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&port_) -
        reinterpret_cast<char*>(&timeout_)) + sizeof(port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TelnetPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.TelnetPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.TelnetPara.user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pass = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass().data(), static_cast<int>(this->pass().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.TelnetPara.pass");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 retry = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_retry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.TelnetPara.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.TelnetPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.TelnetPara)
  return false;
#undef DO_
}

void TelnetPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.TelnetPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TelnetPara.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // optional string pass = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), static_cast<int>(this->pass().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TelnetPara.pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pass(), output);
  }

  // optional uint32 timeout = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timeout(), output);
  }

  // optional uint32 retry = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->retry(), output);
  }

  // optional string ip = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TelnetPara.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ip(), output);
  }

  // optional uint32 port = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.TelnetPara)
}

::google::protobuf::uint8* TelnetPara::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.TelnetPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TelnetPara.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // optional string pass = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), static_cast<int>(this->pass().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TelnetPara.pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pass(), target);
  }

  // optional uint32 timeout = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timeout(), target);
  }

  // optional uint32 retry = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->retry(), target);
  }

  // optional string ip = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TelnetPara.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // optional uint32 port = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.TelnetPara)
  return target;
}

size_t TelnetPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.TelnetPara)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 timeout = 3;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional uint32 retry = 4;
    if (has_retry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retry());
    }

    // optional uint32 port = 6;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelnetPara::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.TelnetPara)
  GOOGLE_DCHECK_NE(&from, this);
  const TelnetPara* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelnetPara>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.TelnetPara)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.TelnetPara)
    MergeFrom(*source);
  }
}

void TelnetPara::MergeFrom(const TelnetPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.TelnetPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pass();
      pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000008u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000010u) {
      retry_ = from.retry_;
    }
    if (cached_has_bits & 0x00000020u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TelnetPara::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.TelnetPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelnetPara::CopyFrom(const TelnetPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.TelnetPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelnetPara::IsInitialized() const {
  return true;
}

void TelnetPara::Swap(TelnetPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelnetPara::InternalSwap(TelnetPara* other) {
  using std::swap;
  user_.Swap(&other->user_);
  pass_.Swap(&other->pass_);
  ip_.Swap(&other->ip_);
  swap(timeout_, other->timeout_);
  swap(retry_, other->retry_);
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelnetPara::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SshPara::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SshPara::kUserFieldNumber;
const int SshPara::kPassFieldNumber;
const int SshPara::kPortFieldNumber;
const int SshPara::kTimeoutFieldNumber;
const int SshPara::kRetryFieldNumber;
const int SshPara::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SshPara::SshPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSshPara();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.SshPara)
}
SshPara::SshPara(const SshPara& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pass()) {
    pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&retry_) -
    reinterpret_cast<char*>(&port_)) + sizeof(retry_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.SshPara)
}

void SshPara::SharedCtor() {
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retry_) -
      reinterpret_cast<char*>(&port_)) + sizeof(retry_));
}

SshPara::~SshPara() {
  // @@protoc_insertion_point(destructor:mpfmessage.SshPara)
  SharedDtor();
}

void SshPara::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SshPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SshPara::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SshPara& SshPara::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSshPara();
  return *internal_default_instance();
}

SshPara* SshPara::New(::google::protobuf::Arena* arena) const {
  SshPara* n = new SshPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SshPara::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.SshPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!pass_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pass_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&retry_) -
        reinterpret_cast<char*>(&port_)) + sizeof(retry_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SshPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.SshPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.SshPara.user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pass = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass().data(), static_cast<int>(this->pass().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.SshPara.pass");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 retry = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_retry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.SshPara.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.SshPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.SshPara)
  return false;
#undef DO_
}

void SshPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.SshPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SshPara.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // optional string pass = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), static_cast<int>(this->pass().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SshPara.pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pass(), output);
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional uint32 timeout = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timeout(), output);
  }

  // optional uint32 retry = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->retry(), output);
  }

  // optional string ip = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SshPara.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.SshPara)
}

::google::protobuf::uint8* SshPara::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.SshPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SshPara.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // optional string pass = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), static_cast<int>(this->pass().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SshPara.pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pass(), target);
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // optional uint32 timeout = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timeout(), target);
  }

  // optional uint32 retry = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->retry(), target);
  }

  // optional string ip = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SshPara.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.SshPara)
  return target;
}

size_t SshPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.SshPara)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass());
    }

    // optional string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 timeout = 4;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional uint32 retry = 5;
    if (has_retry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retry());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SshPara::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.SshPara)
  GOOGLE_DCHECK_NE(&from, this);
  const SshPara* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SshPara>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.SshPara)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.SshPara)
    MergeFrom(*source);
  }
}

void SshPara::MergeFrom(const SshPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.SshPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pass();
      pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000010u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000020u) {
      retry_ = from.retry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SshPara::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.SshPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SshPara::CopyFrom(const SshPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.SshPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SshPara::IsInitialized() const {
  return true;
}

void SshPara::Swap(SshPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SshPara::InternalSwap(SshPara* other) {
  using std::swap;
  user_.Swap(&other->user_);
  pass_.Swap(&other->pass_);
  ip_.Swap(&other->ip_);
  swap(port_, other->port_);
  swap(timeout_, other->timeout_);
  swap(retry_, other->retry_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SshPara::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PingPara::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingPara::kIpFieldNumber;
const int PingPara::kRetryFieldNumber;
const int PingPara::kResIdFieldNumber;
const int PingPara::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingPara::PingPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsPingPara();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.PingPara)
}
PingPara::PingPara(const PingPara& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&retry_, &from.retry_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&retry_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.PingPara)
}

void PingPara::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&retry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&retry_)) + sizeof(timeout_));
}

PingPara::~PingPara() {
  // @@protoc_insertion_point(destructor:mpfmessage.PingPara)
  SharedDtor();
}

void PingPara::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PingPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingPara::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PingPara& PingPara::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsPingPara();
  return *internal_default_instance();
}

PingPara* PingPara::New(::google::protobuf::Arena* arena) const {
  PingPara* n = new PingPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingPara::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.PingPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ip_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&retry_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&retry_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PingPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.PingPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.PingPara.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 retry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_retry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 res_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.PingPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.PingPara)
  return false;
#undef DO_
}

void PingPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.PingPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.PingPara.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 retry = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->retry(), output);
  }

  // optional uint32 res_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->res_id(), output);
  }

  // optional uint32 timeout = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.PingPara)
}

::google::protobuf::uint8* PingPara::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.PingPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.PingPara.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint32 retry = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->retry(), target);
  }

  // optional uint32 res_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->res_id(), target);
  }

  // optional uint32 timeout = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.PingPara)
  return target;
}

size_t PingPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.PingPara)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 retry = 2;
    if (has_retry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retry());
    }

    // optional uint32 res_id = 3;
    if (has_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_id());
    }

    // optional uint32 timeout = 4;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingPara::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.PingPara)
  GOOGLE_DCHECK_NE(&from, this);
  const PingPara* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PingPara>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.PingPara)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.PingPara)
    MergeFrom(*source);
  }
}

void PingPara::MergeFrom(const PingPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.PingPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      retry_ = from.retry_;
    }
    if (cached_has_bits & 0x00000004u) {
      res_id_ = from.res_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PingPara::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.PingPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingPara::CopyFrom(const PingPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.PingPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingPara::IsInitialized() const {
  return true;
}

void PingPara::Swap(PingPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingPara::InternalSwap(PingPara* other) {
  using std::swap;
  ip_.Swap(&other->ip_);
  swap(retry_, other->retry_);
  swap(res_id_, other->res_id_);
  swap(timeout_, other->timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingPara::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DbLoginPara::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DbLoginPara::kDbTypeFieldNumber;
const int DbLoginPara::kLoginIpFieldNumber;
const int DbLoginPara::kPortFieldNumber;
const int DbLoginPara::kOsTypeFieldNumber;
const int DbLoginPara::kDbnameFieldNumber;
const int DbLoginPara::kUidFieldNumber;
const int DbLoginPara::kPasswordFieldNumber;
const int DbLoginPara::kDbVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DbLoginPara::DbLoginPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsDbLoginPara();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.DbLoginPara)
}
DbLoginPara::DbLoginPara(const DbLoginPara& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  login_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_login_ip()) {
    login_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_ip_);
  }
  dbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dbname()) {
    dbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dbname_);
  }
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid()) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  db_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_db_version()) {
    db_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_version_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&os_type_) -
    reinterpret_cast<char*>(&port_)) + sizeof(os_type_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.DbLoginPara)
}

void DbLoginPara::SharedCtor() {
  _cached_size_ = 0;
  login_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  db_type_ = 1;
  os_type_ = 1;
}

DbLoginPara::~DbLoginPara() {
  // @@protoc_insertion_point(destructor:mpfmessage.DbLoginPara)
  SharedDtor();
}

void DbLoginPara::SharedDtor() {
  login_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DbLoginPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbLoginPara::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DbLoginPara& DbLoginPara::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsDbLoginPara();
  return *internal_default_instance();
}

DbLoginPara* DbLoginPara::New(::google::protobuf::Arena* arena) const {
  DbLoginPara* n = new DbLoginPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DbLoginPara::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.DbLoginPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!login_ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*login_ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!dbname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dbname_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!uid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!db_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*db_version_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 224u) {
    port_ = 0u;
    db_type_ = 1;
    os_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DbLoginPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.DbLoginPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpfmessage.DatabaseType db_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::DatabaseType_IsValid(value)) {
            set_db_type(static_cast< ::mpfmessage::DatabaseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string login_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login_ip().data(), static_cast<int>(this->login_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.DbLoginPara.login_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.OSTYPE os_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::OSTYPE_IsValid(value)) {
            set_os_type(static_cast< ::mpfmessage::OSTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dbname = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbname().data(), static_cast<int>(this->dbname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.DbLoginPara.dbname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.DbLoginPara.uid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.DbLoginPara.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string db_version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_version().data(), static_cast<int>(this->db_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.DbLoginPara.db_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.DbLoginPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.DbLoginPara)
  return false;
#undef DO_
}

void DbLoginPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.DbLoginPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.DatabaseType db_type = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->db_type(), output);
  }

  // optional string login_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_ip().data(), static_cast<int>(this->login_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DbLoginPara.login_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->login_ip(), output);
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional .mpfmessage.OSTYPE os_type = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->os_type(), output);
  }

  // optional string dbname = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbname().data(), static_cast<int>(this->dbname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DbLoginPara.dbname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->dbname(), output);
  }

  // optional string uid = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DbLoginPara.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->uid(), output);
  }

  // optional string password = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DbLoginPara.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->password(), output);
  }

  // optional string db_version = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_version().data(), static_cast<int>(this->db_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DbLoginPara.db_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->db_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.DbLoginPara)
}

::google::protobuf::uint8* DbLoginPara::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.DbLoginPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.DatabaseType db_type = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->db_type(), target);
  }

  // optional string login_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_ip().data(), static_cast<int>(this->login_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DbLoginPara.login_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->login_ip(), target);
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // optional .mpfmessage.OSTYPE os_type = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->os_type(), target);
  }

  // optional string dbname = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbname().data(), static_cast<int>(this->dbname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DbLoginPara.dbname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dbname(), target);
  }

  // optional string uid = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DbLoginPara.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->uid(), target);
  }

  // optional string password = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DbLoginPara.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->password(), target);
  }

  // optional string db_version = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_version().data(), static_cast<int>(this->db_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DbLoginPara.db_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->db_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.DbLoginPara)
  return target;
}

size_t DbLoginPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.DbLoginPara)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string login_ip = 2;
    if (has_login_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_ip());
    }

    // optional string dbname = 5;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }

    // optional string uid = 6;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string password = 7;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string db_version = 8;
    if (has_db_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_version());
    }

    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional .mpfmessage.DatabaseType db_type = 1;
    if (has_db_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->db_type());
    }

    // optional .mpfmessage.OSTYPE os_type = 4;
    if (has_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->os_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbLoginPara::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.DbLoginPara)
  GOOGLE_DCHECK_NE(&from, this);
  const DbLoginPara* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DbLoginPara>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.DbLoginPara)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.DbLoginPara)
    MergeFrom(*source);
  }
}

void DbLoginPara::MergeFrom(const DbLoginPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.DbLoginPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_login_ip();
      login_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_dbname();
      dbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dbname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_uid();
      uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_db_version();
      db_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_version_);
    }
    if (cached_has_bits & 0x00000020u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000040u) {
      db_type_ = from.db_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      os_type_ = from.os_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DbLoginPara::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.DbLoginPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbLoginPara::CopyFrom(const DbLoginPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.DbLoginPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbLoginPara::IsInitialized() const {
  return true;
}

void DbLoginPara::Swap(DbLoginPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DbLoginPara::InternalSwap(DbLoginPara* other) {
  using std::swap;
  login_ip_.Swap(&other->login_ip_);
  dbname_.Swap(&other->dbname_);
  uid_.Swap(&other->uid_);
  password_.Swap(&other->password_);
  db_version_.Swap(&other->db_version_);
  swap(port_, other->port_);
  swap(db_type_, other->db_type_);
  swap(os_type_, other->os_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DbLoginPara::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NetDevBaseInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetDevBaseInfo::kDevStatusFieldNumber;
const int NetDevBaseInfo::kDevTypeFieldNumber;
const int NetDevBaseInfo::kDevSerialFieldNumber;
const int NetDevBaseInfo::kSysOidFieldNumber;
const int NetDevBaseInfo::kSysDescFieldNumber;
const int NetDevBaseInfo::kSysNameFieldNumber;
const int NetDevBaseInfo::kContactorFieldNumber;
const int NetDevBaseInfo::kLocationFieldNumber;
const int NetDevBaseInfo::kUpTimeFieldNumber;
const int NetDevBaseInfo::kSynTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetDevBaseInfo::NetDevBaseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsNetDevBaseInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.NetDevBaseInfo)
}
NetDevBaseInfo::NetDevBaseInfo(const NetDevBaseInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dev_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dev_serial()) {
    dev_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dev_serial_);
  }
  sys_oid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sys_oid()) {
    sys_oid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sys_oid_);
  }
  sys_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sys_desc()) {
    sys_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sys_desc_);
  }
  sys_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sys_name()) {
    sys_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sys_name_);
  }
  contactor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contactor()) {
    contactor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contactor_);
  }
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_location()) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  ::memcpy(&up_time_, &from.up_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&dev_type_) -
    reinterpret_cast<char*>(&up_time_)) + sizeof(dev_type_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.NetDevBaseInfo)
}

void NetDevBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  dev_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sys_oid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sys_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sys_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contactor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&up_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&syn_time_) -
      reinterpret_cast<char*>(&up_time_)) + sizeof(syn_time_));
  dev_status_ = 1;
  dev_type_ = 1;
}

NetDevBaseInfo::~NetDevBaseInfo() {
  // @@protoc_insertion_point(destructor:mpfmessage.NetDevBaseInfo)
  SharedDtor();
}

void NetDevBaseInfo::SharedDtor() {
  dev_serial_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sys_oid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sys_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sys_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contactor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetDevBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetDevBaseInfo::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetDevBaseInfo& NetDevBaseInfo::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsNetDevBaseInfo();
  return *internal_default_instance();
}

NetDevBaseInfo* NetDevBaseInfo::New(::google::protobuf::Arena* arena) const {
  NetDevBaseInfo* n = new NetDevBaseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetDevBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.NetDevBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!dev_serial_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dev_serial_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!sys_oid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sys_oid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!sys_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sys_desc_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!sys_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sys_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!contactor_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*contactor_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!location_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*location_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&up_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&syn_time_) -
        reinterpret_cast<char*>(&up_time_)) + sizeof(syn_time_));
  }
  if (cached_has_bits & 768u) {
    dev_status_ = 1;
    dev_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetDevBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.NetDevBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpfmessage.Status dev_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::Status_IsValid(value)) {
            set_dev_status(static_cast< ::mpfmessage::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.ResType dev_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::ResType_IsValid(value)) {
            set_dev_type(static_cast< ::mpfmessage::ResType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dev_serial = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dev_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dev_serial().data(), static_cast<int>(this->dev_serial().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.NetDevBaseInfo.dev_serial");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sys_oid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sys_oid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sys_oid().data(), static_cast<int>(this->sys_oid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.NetDevBaseInfo.sys_oid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sys_desc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sys_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sys_desc().data(), static_cast<int>(this->sys_desc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.NetDevBaseInfo.sys_desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sys_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sys_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sys_name().data(), static_cast<int>(this->sys_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.NetDevBaseInfo.sys_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string contactor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contactor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contactor().data(), static_cast<int>(this->contactor().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.NetDevBaseInfo.contactor");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string location = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.NetDevBaseInfo.location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 up_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_up_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 syn_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_syn_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &syn_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.NetDevBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.NetDevBaseInfo)
  return false;
#undef DO_
}

void NetDevBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.NetDevBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.Status dev_status = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dev_status(), output);
  }

  // optional .mpfmessage.ResType dev_type = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dev_type(), output);
  }

  // optional string dev_serial = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dev_serial().data(), static_cast<int>(this->dev_serial().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.NetDevBaseInfo.dev_serial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dev_serial(), output);
  }

  // optional string sys_oid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sys_oid().data(), static_cast<int>(this->sys_oid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.NetDevBaseInfo.sys_oid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sys_oid(), output);
  }

  // optional string sys_desc = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sys_desc().data(), static_cast<int>(this->sys_desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.NetDevBaseInfo.sys_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sys_desc(), output);
  }

  // optional string sys_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sys_name().data(), static_cast<int>(this->sys_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.NetDevBaseInfo.sys_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sys_name(), output);
  }

  // optional string contactor = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contactor().data(), static_cast<int>(this->contactor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.NetDevBaseInfo.contactor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->contactor(), output);
  }

  // optional string location = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.NetDevBaseInfo.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->location(), output);
  }

  // optional uint32 up_time = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->up_time(), output);
  }

  // optional uint32 syn_time = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->syn_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.NetDevBaseInfo)
}

::google::protobuf::uint8* NetDevBaseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.NetDevBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.Status dev_status = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dev_status(), target);
  }

  // optional .mpfmessage.ResType dev_type = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dev_type(), target);
  }

  // optional string dev_serial = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dev_serial().data(), static_cast<int>(this->dev_serial().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.NetDevBaseInfo.dev_serial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dev_serial(), target);
  }

  // optional string sys_oid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sys_oid().data(), static_cast<int>(this->sys_oid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.NetDevBaseInfo.sys_oid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sys_oid(), target);
  }

  // optional string sys_desc = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sys_desc().data(), static_cast<int>(this->sys_desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.NetDevBaseInfo.sys_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sys_desc(), target);
  }

  // optional string sys_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sys_name().data(), static_cast<int>(this->sys_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.NetDevBaseInfo.sys_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sys_name(), target);
  }

  // optional string contactor = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contactor().data(), static_cast<int>(this->contactor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.NetDevBaseInfo.contactor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->contactor(), target);
  }

  // optional string location = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.NetDevBaseInfo.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->location(), target);
  }

  // optional uint32 up_time = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->up_time(), target);
  }

  // optional uint32 syn_time = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->syn_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.NetDevBaseInfo)
  return target;
}

size_t NetDevBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.NetDevBaseInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string dev_serial = 3;
    if (has_dev_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dev_serial());
    }

    // optional string sys_oid = 4;
    if (has_sys_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sys_oid());
    }

    // optional string sys_desc = 5;
    if (has_sys_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sys_desc());
    }

    // optional string sys_name = 6;
    if (has_sys_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sys_name());
    }

    // optional string contactor = 7;
    if (has_contactor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contactor());
    }

    // optional string location = 8;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // optional uint32 up_time = 9;
    if (has_up_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_time());
    }

    // optional uint32 syn_time = 10;
    if (has_syn_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->syn_time());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .mpfmessage.Status dev_status = 1;
    if (has_dev_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dev_status());
    }

    // optional .mpfmessage.ResType dev_type = 2;
    if (has_dev_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dev_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetDevBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.NetDevBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NetDevBaseInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetDevBaseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.NetDevBaseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.NetDevBaseInfo)
    MergeFrom(*source);
  }
}

void NetDevBaseInfo::MergeFrom(const NetDevBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.NetDevBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_dev_serial();
      dev_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dev_serial_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sys_oid();
      sys_oid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sys_oid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sys_desc();
      sys_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sys_desc_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_sys_name();
      sys_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sys_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_contactor();
      contactor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contactor_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_location();
      location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
    }
    if (cached_has_bits & 0x00000040u) {
      up_time_ = from.up_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      syn_time_ = from.syn_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      dev_status_ = from.dev_status_;
    }
    if (cached_has_bits & 0x00000200u) {
      dev_type_ = from.dev_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetDevBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.NetDevBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetDevBaseInfo::CopyFrom(const NetDevBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.NetDevBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetDevBaseInfo::IsInitialized() const {
  return true;
}

void NetDevBaseInfo::Swap(NetDevBaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetDevBaseInfo::InternalSwap(NetDevBaseInfo* other) {
  using std::swap;
  dev_serial_.Swap(&other->dev_serial_);
  sys_oid_.Swap(&other->sys_oid_);
  sys_desc_.Swap(&other->sys_desc_);
  sys_name_.Swap(&other->sys_name_);
  contactor_.Swap(&other->contactor_);
  location_.Swap(&other->location_);
  swap(up_time_, other->up_time_);
  swap(syn_time_, other->syn_time_);
  swap(dev_status_, other->dev_status_);
  swap(dev_type_, other->dev_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetDevBaseInfo::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DiskInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiskInfo::kDiskAccessFieldNumber;
const int DiskInfo::kMediaTypeFieldNumber;
const int DiskInfo::kDiskSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiskInfo::DiskInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsDiskInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.DiskInfo)
}
DiskInfo::DiskInfo(const DiskInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&disk_size_, &from.disk_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&media_type_) -
    reinterpret_cast<char*>(&disk_size_)) + sizeof(media_type_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.DiskInfo)
}

void DiskInfo::SharedCtor() {
  _cached_size_ = 0;
  disk_size_ = 0u;
  disk_access_ = 1;
  media_type_ = 1;
}

DiskInfo::~DiskInfo() {
  // @@protoc_insertion_point(destructor:mpfmessage.DiskInfo)
  SharedDtor();
}

void DiskInfo::SharedDtor() {
}

void DiskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskInfo::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DiskInfo& DiskInfo::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsDiskInfo();
  return *internal_default_instance();
}

DiskInfo* DiskInfo::New(::google::protobuf::Arena* arena) const {
  DiskInfo* n = new DiskInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.DiskInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    disk_size_ = 0u;
    disk_access_ = 1;
    media_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DiskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.DiskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpfmessage.DISK_ACCESS disk_access = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::DISK_ACCESS_IsValid(value)) {
            set_disk_access(static_cast< ::mpfmessage::DISK_ACCESS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.DISK_MEDIA_TYPE media_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::DISK_MEDIA_TYPE_IsValid(value)) {
            set_media_type(static_cast< ::mpfmessage::DISK_MEDIA_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 disk_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_disk_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &disk_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.DiskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.DiskInfo)
  return false;
#undef DO_
}

void DiskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.DiskInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.DISK_ACCESS disk_access = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->disk_access(), output);
  }

  // optional .mpfmessage.DISK_MEDIA_TYPE media_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->media_type(), output);
  }

  // optional uint32 disk_size = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->disk_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.DiskInfo)
}

::google::protobuf::uint8* DiskInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.DiskInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.DISK_ACCESS disk_access = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->disk_access(), target);
  }

  // optional .mpfmessage.DISK_MEDIA_TYPE media_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->media_type(), target);
  }

  // optional uint32 disk_size = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->disk_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.DiskInfo)
  return target;
}

size_t DiskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.DiskInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 disk_size = 3;
    if (has_disk_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->disk_size());
    }

    // optional .mpfmessage.DISK_ACCESS disk_access = 1;
    if (has_disk_access()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disk_access());
    }

    // optional .mpfmessage.DISK_MEDIA_TYPE media_type = 2;
    if (has_media_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->media_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.DiskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DiskInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DiskInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.DiskInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.DiskInfo)
    MergeFrom(*source);
  }
}

void DiskInfo::MergeFrom(const DiskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.DiskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      disk_size_ = from.disk_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      disk_access_ = from.disk_access_;
    }
    if (cached_has_bits & 0x00000004u) {
      media_type_ = from.media_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DiskInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.DiskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskInfo::CopyFrom(const DiskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.DiskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskInfo::IsInitialized() const {
  return true;
}

void DiskInfo::Swap(DiskInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiskInfo::InternalSwap(DiskInfo* other) {
  using std::swap;
  swap(disk_size_, other->disk_size_);
  swap(disk_access_, other->disk_access_);
  swap(media_type_, other->media_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiskInfo::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PartitionInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionInfo::kPartIndexFieldNumber;
const int PartitionInfo::kPartNameFieldNumber;
const int PartitionInfo::kPartSizeFieldNumber;
const int PartitionInfo::kPartUsedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionInfo::PartitionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsPartitionInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.PartitionInfo)
}
PartitionInfo::PartitionInfo(const PartitionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  part_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_part_name()) {
    part_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_name_);
  }
  ::memcpy(&part_index_, &from.part_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&part_used_) -
    reinterpret_cast<char*>(&part_index_)) + sizeof(part_used_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.PartitionInfo)
}

void PartitionInfo::SharedCtor() {
  _cached_size_ = 0;
  part_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&part_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&part_used_) -
      reinterpret_cast<char*>(&part_index_)) + sizeof(part_used_));
}

PartitionInfo::~PartitionInfo() {
  // @@protoc_insertion_point(destructor:mpfmessage.PartitionInfo)
  SharedDtor();
}

void PartitionInfo::SharedDtor() {
  part_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PartitionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartitionInfo::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PartitionInfo& PartitionInfo::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsPartitionInfo();
  return *internal_default_instance();
}

PartitionInfo* PartitionInfo::New(::google::protobuf::Arena* arena) const {
  PartitionInfo* n = new PartitionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartitionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.PartitionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!part_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*part_name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&part_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&part_used_) -
        reinterpret_cast<char*>(&part_index_)) + sizeof(part_used_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PartitionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.PartitionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 part_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_part_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &part_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string part_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->part_name().data(), static_cast<int>(this->part_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.PartitionInfo.part_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 part_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_part_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &part_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 part_used = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_part_used();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &part_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.PartitionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.PartitionInfo)
  return false;
#undef DO_
}

void PartitionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.PartitionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 part_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->part_index(), output);
  }

  // optional string part_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->part_name().data(), static_cast<int>(this->part_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.PartitionInfo.part_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->part_name(), output);
  }

  // optional uint32 part_size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->part_size(), output);
  }

  // optional uint32 part_used = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->part_used(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.PartitionInfo)
}

::google::protobuf::uint8* PartitionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.PartitionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 part_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->part_index(), target);
  }

  // optional string part_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->part_name().data(), static_cast<int>(this->part_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.PartitionInfo.part_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->part_name(), target);
  }

  // optional uint32 part_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->part_size(), target);
  }

  // optional uint32 part_used = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->part_used(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.PartitionInfo)
  return target;
}

size_t PartitionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.PartitionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string part_name = 2;
    if (has_part_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->part_name());
    }

    // optional uint32 part_index = 1;
    if (has_part_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->part_index());
    }

    // optional uint32 part_size = 3;
    if (has_part_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->part_size());
    }

    // optional uint32 part_used = 4;
    if (has_part_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->part_used());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartitionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.PartitionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PartitionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartitionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.PartitionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.PartitionInfo)
    MergeFrom(*source);
  }
}

void PartitionInfo::MergeFrom(const PartitionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.PartitionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_part_name();
      part_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      part_index_ = from.part_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      part_size_ = from.part_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      part_used_ = from.part_used_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PartitionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.PartitionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionInfo::CopyFrom(const PartitionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.PartitionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionInfo::IsInitialized() const {
  return true;
}

void PartitionInfo::Swap(PartitionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionInfo::InternalSwap(PartitionInfo* other) {
  using std::swap;
  part_name_.Swap(&other->part_name_);
  swap(part_index_, other->part_index_);
  swap(part_size_, other->part_size_);
  swap(part_used_, other->part_used_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartitionInfo::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProcessorInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessorInfo::kProcessorIndexFieldNumber;
const int ProcessorInfo::kProcessorDescFieldNumber;
const int ProcessorInfo::kProcessorLoadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessorInfo::ProcessorInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsProcessorInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.ProcessorInfo)
}
ProcessorInfo::ProcessorInfo(const ProcessorInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  processor_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_processor_desc()) {
    processor_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processor_desc_);
  }
  ::memcpy(&processor_index_, &from.processor_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&processor_load_) -
    reinterpret_cast<char*>(&processor_index_)) + sizeof(processor_load_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.ProcessorInfo)
}

void ProcessorInfo::SharedCtor() {
  _cached_size_ = 0;
  processor_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&processor_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processor_load_) -
      reinterpret_cast<char*>(&processor_index_)) + sizeof(processor_load_));
}

ProcessorInfo::~ProcessorInfo() {
  // @@protoc_insertion_point(destructor:mpfmessage.ProcessorInfo)
  SharedDtor();
}

void ProcessorInfo::SharedDtor() {
  processor_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProcessorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessorInfo::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProcessorInfo& ProcessorInfo::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsProcessorInfo();
  return *internal_default_instance();
}

ProcessorInfo* ProcessorInfo::New(::google::protobuf::Arena* arena) const {
  ProcessorInfo* n = new ProcessorInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.ProcessorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!processor_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*processor_desc_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&processor_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&processor_load_) -
        reinterpret_cast<char*>(&processor_index_)) + sizeof(processor_load_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProcessorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.ProcessorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 processor_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_processor_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &processor_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string processor_desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processor_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processor_desc().data(), static_cast<int>(this->processor_desc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.ProcessorInfo.processor_desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 processor_load = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_processor_load();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &processor_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.ProcessorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.ProcessorInfo)
  return false;
#undef DO_
}

void ProcessorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.ProcessorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 processor_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->processor_index(), output);
  }

  // optional string processor_desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processor_desc().data(), static_cast<int>(this->processor_desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.ProcessorInfo.processor_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->processor_desc(), output);
  }

  // optional uint32 processor_load = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->processor_load(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.ProcessorInfo)
}

::google::protobuf::uint8* ProcessorInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.ProcessorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 processor_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->processor_index(), target);
  }

  // optional string processor_desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processor_desc().data(), static_cast<int>(this->processor_desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.ProcessorInfo.processor_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->processor_desc(), target);
  }

  // optional uint32 processor_load = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->processor_load(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.ProcessorInfo)
  return target;
}

size_t ProcessorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.ProcessorInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string processor_desc = 2;
    if (has_processor_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processor_desc());
    }

    // optional uint32 processor_index = 1;
    if (has_processor_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->processor_index());
    }

    // optional uint32 processor_load = 3;
    if (has_processor_load()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->processor_load());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessorInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.ProcessorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessorInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessorInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.ProcessorInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.ProcessorInfo)
    MergeFrom(*source);
  }
}

void ProcessorInfo::MergeFrom(const ProcessorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.ProcessorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_processor_desc();
      processor_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processor_desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      processor_index_ = from.processor_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      processor_load_ = from.processor_load_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProcessorInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.ProcessorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorInfo::CopyFrom(const ProcessorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.ProcessorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorInfo::IsInitialized() const {
  return true;
}

void ProcessorInfo::Swap(ProcessorInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessorInfo::InternalSwap(ProcessorInfo* other) {
  using std::swap;
  processor_desc_.Swap(&other->processor_desc_);
  swap(processor_index_, other->processor_index_);
  swap(processor_load_, other->processor_load_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessorInfo::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HostBaseInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostBaseInfo::kSysTimeFieldNumber;
const int HostBaseInfo::kRunTimeFieldNumber;
const int HostBaseInfo::kOnlineUserNumFieldNumber;
const int HostBaseInfo::kProcessNumFieldNumber;
const int HostBaseInfo::kCpulistFieldNumber;
const int HostBaseInfo::kTotalPhyMemoryFieldNumber;
const int HostBaseInfo::kTotalVirtualMemoryFieldNumber;
const int HostBaseInfo::kTotalDiskSpaceFieldNumber;
const int HostBaseInfo::kDiskListFieldNumber;
const int HostBaseInfo::kPartiListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostBaseInfo::HostBaseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsHostBaseInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.HostBaseInfo)
}
HostBaseInfo::HostBaseInfo(const HostBaseInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cpulist_(from.cpulist_),
      disklist_(from.disklist_),
      partilist_(from.partilist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sys_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sys_time()) {
    sys_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sys_time_);
  }
  ::memcpy(&run_time_, &from.run_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_disk_space_) -
    reinterpret_cast<char*>(&run_time_)) + sizeof(total_disk_space_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.HostBaseInfo)
}

void HostBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  sys_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&run_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_disk_space_) -
      reinterpret_cast<char*>(&run_time_)) + sizeof(total_disk_space_));
}

HostBaseInfo::~HostBaseInfo() {
  // @@protoc_insertion_point(destructor:mpfmessage.HostBaseInfo)
  SharedDtor();
}

void HostBaseInfo::SharedDtor() {
  sys_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HostBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostBaseInfo::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HostBaseInfo& HostBaseInfo::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsHostBaseInfo();
  return *internal_default_instance();
}

HostBaseInfo* HostBaseInfo::New(::google::protobuf::Arena* arena) const {
  HostBaseInfo* n = new HostBaseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.HostBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpulist_.Clear();
  disklist_.Clear();
  partilist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!sys_time_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*sys_time_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&run_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_disk_space_) -
        reinterpret_cast<char*>(&run_time_)) + sizeof(total_disk_space_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HostBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.HostBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sys_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sys_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sys_time().data(), static_cast<int>(this->sys_time().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.HostBaseInfo.sys_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 run_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_run_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &run_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 online_user_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_online_user_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_user_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 process_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_process_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mpfmessage.ProcessorInfo cpulist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_cpulist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_phy_memory = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_total_phy_memory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_phy_memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_virtual_memory = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_total_virtual_memory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_virtual_memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_disk_space = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_total_disk_space();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_disk_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mpfmessage.DiskInfo diskList = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_disklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mpfmessage.PartitionInfo partiList = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_partilist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.HostBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.HostBaseInfo)
  return false;
#undef DO_
}

void HostBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.HostBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sys_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sys_time().data(), static_cast<int>(this->sys_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.HostBaseInfo.sys_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sys_time(), output);
  }

  // optional uint32 run_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->run_time(), output);
  }

  // optional uint32 online_user_num = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->online_user_num(), output);
  }

  // optional uint32 process_num = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->process_num(), output);
  }

  // repeated .mpfmessage.ProcessorInfo cpulist = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cpulist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cpulist(static_cast<int>(i)), output);
  }

  // optional uint32 total_phy_memory = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_phy_memory(), output);
  }

  // optional uint32 total_virtual_memory = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->total_virtual_memory(), output);
  }

  // optional uint32 total_disk_space = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->total_disk_space(), output);
  }

  // repeated .mpfmessage.DiskInfo diskList = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disklist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->disklist(static_cast<int>(i)), output);
  }

  // repeated .mpfmessage.PartitionInfo partiList = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partilist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->partilist(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.HostBaseInfo)
}

::google::protobuf::uint8* HostBaseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.HostBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sys_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sys_time().data(), static_cast<int>(this->sys_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.HostBaseInfo.sys_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sys_time(), target);
  }

  // optional uint32 run_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->run_time(), target);
  }

  // optional uint32 online_user_num = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->online_user_num(), target);
  }

  // optional uint32 process_num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->process_num(), target);
  }

  // repeated .mpfmessage.ProcessorInfo cpulist = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cpulist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->cpulist(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 total_phy_memory = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_phy_memory(), target);
  }

  // optional uint32 total_virtual_memory = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->total_virtual_memory(), target);
  }

  // optional uint32 total_disk_space = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->total_disk_space(), target);
  }

  // repeated .mpfmessage.DiskInfo diskList = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disklist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->disklist(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mpfmessage.PartitionInfo partiList = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partilist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->partilist(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.HostBaseInfo)
  return target;
}

size_t HostBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.HostBaseInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.ProcessorInfo cpulist = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->cpulist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cpulist(static_cast<int>(i)));
    }
  }

  // repeated .mpfmessage.DiskInfo diskList = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->disklist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->disklist(static_cast<int>(i)));
    }
  }

  // repeated .mpfmessage.PartitionInfo partiList = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->partilist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->partilist(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string sys_time = 1;
    if (has_sys_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sys_time());
    }

    // optional uint32 run_time = 2;
    if (has_run_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->run_time());
    }

    // optional uint32 online_user_num = 3;
    if (has_online_user_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_user_num());
    }

    // optional uint32 process_num = 4;
    if (has_process_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process_num());
    }

    // optional uint32 total_phy_memory = 6;
    if (has_total_phy_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_phy_memory());
    }

    // optional uint32 total_virtual_memory = 7;
    if (has_total_virtual_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_virtual_memory());
    }

    // optional uint32 total_disk_space = 8;
    if (has_total_disk_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_disk_space());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.HostBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HostBaseInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HostBaseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.HostBaseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.HostBaseInfo)
    MergeFrom(*source);
  }
}

void HostBaseInfo::MergeFrom(const HostBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.HostBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cpulist_.MergeFrom(from.cpulist_);
  disklist_.MergeFrom(from.disklist_);
  partilist_.MergeFrom(from.partilist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sys_time();
      sys_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sys_time_);
    }
    if (cached_has_bits & 0x00000002u) {
      run_time_ = from.run_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      online_user_num_ = from.online_user_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      process_num_ = from.process_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_phy_memory_ = from.total_phy_memory_;
    }
    if (cached_has_bits & 0x00000020u) {
      total_virtual_memory_ = from.total_virtual_memory_;
    }
    if (cached_has_bits & 0x00000040u) {
      total_disk_space_ = from.total_disk_space_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HostBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.HostBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostBaseInfo::CopyFrom(const HostBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.HostBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostBaseInfo::IsInitialized() const {
  return true;
}

void HostBaseInfo::Swap(HostBaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostBaseInfo::InternalSwap(HostBaseInfo* other) {
  using std::swap;
  cpulist_.InternalSwap(&other->cpulist_);
  disklist_.InternalSwap(&other->disklist_);
  partilist_.InternalSwap(&other->partilist_);
  sys_time_.Swap(&other->sys_time_);
  swap(run_time_, other->run_time_);
  swap(online_user_num_, other->online_user_num_);
  swap(process_num_, other->process_num_);
  swap(total_phy_memory_, other->total_phy_memory_);
  swap(total_virtual_memory_, other->total_virtual_memory_);
  swap(total_disk_space_, other->total_disk_space_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HostBaseInfo::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IfBaseInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IfBaseInfo::kIndexFieldNumber;
const int IfBaseInfo::kDescFieldNumber;
const int IfBaseInfo::kIftypeFieldNumber;
const int IfBaseInfo::kIfPhysAddrFieldNumber;
const int IfBaseInfo::kRateFieldNumber;
const int IfBaseInfo::kMtuFieldNumber;
const int IfBaseInfo::kIpFieldNumber;
const int IfBaseInfo::kMaskFieldNumber;
const int IfBaseInfo::kOperStatusFieldNumber;
const int IfBaseInfo::kAdminStatusFieldNumber;
const int IfBaseInfo::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IfBaseInfo::IfBaseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsIfBaseInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.IfBaseInfo)
}
IfBaseInfo::IfBaseInfo(const IfBaseInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if_phys_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_if_phys_addr()) {
    if_phys_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.if_phys_addr_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mask()) {
    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alias()) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_status_) -
    reinterpret_cast<char*>(&index_)) + sizeof(oper_status_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.IfBaseInfo)
}

void IfBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if_phys_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mtu_) -
      reinterpret_cast<char*>(&index_)) + sizeof(mtu_));
  admin_status_ = 1;
  iftype_ = 1;
  oper_status_ = 1;
}

IfBaseInfo::~IfBaseInfo() {
  // @@protoc_insertion_point(destructor:mpfmessage.IfBaseInfo)
  SharedDtor();
}

void IfBaseInfo::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if_phys_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IfBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IfBaseInfo::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IfBaseInfo& IfBaseInfo::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsIfBaseInfo();
  return *internal_default_instance();
}

IfBaseInfo* IfBaseInfo::New(::google::protobuf::Arena* arena) const {
  IfBaseInfo* n = new IfBaseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IfBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.IfBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desc_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!if_phys_addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*if_phys_addr_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!mask_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mask_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!alias_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alias_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mtu_) -
        reinterpret_cast<char*>(&index_)) + sizeof(mtu_));
  }
  if (cached_has_bits & 1792u) {
    admin_status_ = 1;
    iftype_ = 1;
    oper_status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IfBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.IfBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.IfBaseInfo.desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.IfType iftype = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::IfType_IsValid(value)) {
            set_iftype(static_cast< ::mpfmessage::IfType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes if_phys_addr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_if_phys_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mtu = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_mtu();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mtu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.IfBaseInfo.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mask = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mask()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mask().data(), static_cast<int>(this->mask().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.IfBaseInfo.mask");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.Status oper_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::Status_IsValid(value)) {
            set_oper_status(static_cast< ::mpfmessage::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.Status admin_status = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::Status_IsValid(value)) {
            set_admin_status(static_cast< ::mpfmessage::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string alias = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), static_cast<int>(this->alias().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.IfBaseInfo.alias");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.IfBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.IfBaseInfo)
  return false;
#undef DO_
}

void IfBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.IfBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IfBaseInfo.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // optional .mpfmessage.IfType iftype = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->iftype(), output);
  }

  // optional bytes if_phys_addr = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->if_phys_addr(), output);
  }

  // optional uint32 rate = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rate(), output);
  }

  // optional uint32 mtu = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mtu(), output);
  }

  // optional string ip = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IfBaseInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ip(), output);
  }

  // optional string mask = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mask().data(), static_cast<int>(this->mask().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IfBaseInfo.mask");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->mask(), output);
  }

  // optional .mpfmessage.Status oper_status = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->oper_status(), output);
  }

  // optional .mpfmessage.Status admin_status = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->admin_status(), output);
  }

  // optional string alias = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), static_cast<int>(this->alias().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IfBaseInfo.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->alias(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.IfBaseInfo)
}

::google::protobuf::uint8* IfBaseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.IfBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IfBaseInfo.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // optional .mpfmessage.IfType iftype = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->iftype(), target);
  }

  // optional bytes if_phys_addr = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->if_phys_addr(), target);
  }

  // optional uint32 rate = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rate(), target);
  }

  // optional uint32 mtu = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mtu(), target);
  }

  // optional string ip = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IfBaseInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ip(), target);
  }

  // optional string mask = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mask().data(), static_cast<int>(this->mask().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IfBaseInfo.mask");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->mask(), target);
  }

  // optional .mpfmessage.Status oper_status = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->oper_status(), target);
  }

  // optional .mpfmessage.Status admin_status = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->admin_status(), target);
  }

  // optional string alias = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), static_cast<int>(this->alias().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IfBaseInfo.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->alias(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.IfBaseInfo)
  return target;
}

size_t IfBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.IfBaseInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional bytes if_phys_addr = 4;
    if (has_if_phys_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->if_phys_addr());
    }

    // optional string ip = 7;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string mask = 8;
    if (has_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mask());
    }

    // optional string alias = 11;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 rate = 5;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

    // optional uint32 mtu = 6;
    if (has_mtu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mtu());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional .mpfmessage.Status admin_status = 10;
    if (has_admin_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->admin_status());
    }

    // optional .mpfmessage.IfType iftype = 3;
    if (has_iftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->iftype());
    }

    // optional .mpfmessage.Status oper_status = 9;
    if (has_oper_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IfBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.IfBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IfBaseInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IfBaseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.IfBaseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.IfBaseInfo)
    MergeFrom(*source);
  }
}

void IfBaseInfo::MergeFrom(const IfBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.IfBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_if_phys_addr();
      if_phys_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.if_phys_addr_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_mask();
      mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_alias();
      alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
    }
    if (cached_has_bits & 0x00000020u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000040u) {
      rate_ = from.rate_;
    }
    if (cached_has_bits & 0x00000080u) {
      mtu_ = from.mtu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      admin_status_ = from.admin_status_;
    }
    if (cached_has_bits & 0x00000200u) {
      iftype_ = from.iftype_;
    }
    if (cached_has_bits & 0x00000400u) {
      oper_status_ = from.oper_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IfBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.IfBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IfBaseInfo::CopyFrom(const IfBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.IfBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IfBaseInfo::IsInitialized() const {
  return true;
}

void IfBaseInfo::Swap(IfBaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IfBaseInfo::InternalSwap(IfBaseInfo* other) {
  using std::swap;
  desc_.Swap(&other->desc_);
  if_phys_addr_.Swap(&other->if_phys_addr_);
  ip_.Swap(&other->ip_);
  mask_.Swap(&other->mask_);
  alias_.Swap(&other->alias_);
  swap(index_, other->index_);
  swap(rate_, other->rate_);
  swap(mtu_, other->mtu_);
  swap(admin_status_, other->admin_status_);
  swap(iftype_, other->iftype_);
  swap(oper_status_, other->oper_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IfBaseInfo::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IfResInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IfResInfo::kDevResidFieldNumber;
const int IfResInfo::kIfResidFieldNumber;
const int IfResInfo::kIfindexFieldNumber;
const int IfResInfo::kIfdescFieldNumber;
const int IfResInfo::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IfResInfo::IfResInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsIfResInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.IfResInfo)
}
IfResInfo::IfResInfo(const IfResInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ifdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ifdesc()) {
    ifdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ifdesc_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&dev_resid_, &from.dev_resid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ifindex_) -
    reinterpret_cast<char*>(&dev_resid_)) + sizeof(ifindex_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.IfResInfo)
}

void IfResInfo::SharedCtor() {
  _cached_size_ = 0;
  ifdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dev_resid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ifindex_) -
      reinterpret_cast<char*>(&dev_resid_)) + sizeof(ifindex_));
}

IfResInfo::~IfResInfo() {
  // @@protoc_insertion_point(destructor:mpfmessage.IfResInfo)
  SharedDtor();
}

void IfResInfo::SharedDtor() {
  ifdesc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IfResInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IfResInfo::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IfResInfo& IfResInfo::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsIfResInfo();
  return *internal_default_instance();
}

IfResInfo* IfResInfo::New(::google::protobuf::Arena* arena) const {
  IfResInfo* n = new IfResInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IfResInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.IfResInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!ifdesc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ifdesc_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&dev_resid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ifindex_) -
        reinterpret_cast<char*>(&dev_resid_)) + sizeof(ifindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IfResInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.IfResInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dev_resid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_dev_resid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dev_resid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 if_resid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_if_resid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &if_resid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ifindex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ifindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ifindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ifdesc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ifdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ifdesc().data(), static_cast<int>(this->ifdesc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.IfResInfo.ifdesc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.IfResInfo.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.IfResInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.IfResInfo)
  return false;
#undef DO_
}

void IfResInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.IfResInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dev_resid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dev_resid(), output);
  }

  // optional uint32 if_resid = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->if_resid(), output);
  }

  // optional uint32 ifindex = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ifindex(), output);
  }

  // optional string ifdesc = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ifdesc().data(), static_cast<int>(this->ifdesc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IfResInfo.ifdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ifdesc(), output);
  }

  // optional string ip = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IfResInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.IfResInfo)
}

::google::protobuf::uint8* IfResInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.IfResInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dev_resid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dev_resid(), target);
  }

  // optional uint32 if_resid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->if_resid(), target);
  }

  // optional uint32 ifindex = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ifindex(), target);
  }

  // optional string ifdesc = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ifdesc().data(), static_cast<int>(this->ifdesc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IfResInfo.ifdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ifdesc(), target);
  }

  // optional string ip = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IfResInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.IfResInfo)
  return target;
}

size_t IfResInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.IfResInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string ifdesc = 4;
    if (has_ifdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ifdesc());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 dev_resid = 1;
    if (has_dev_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dev_resid());
    }

    // optional uint32 if_resid = 2;
    if (has_if_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->if_resid());
    }

    // optional uint32 ifindex = 3;
    if (has_ifindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ifindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IfResInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.IfResInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IfResInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IfResInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.IfResInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.IfResInfo)
    MergeFrom(*source);
  }
}

void IfResInfo::MergeFrom(const IfResInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.IfResInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ifdesc();
      ifdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ifdesc_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      dev_resid_ = from.dev_resid_;
    }
    if (cached_has_bits & 0x00000008u) {
      if_resid_ = from.if_resid_;
    }
    if (cached_has_bits & 0x00000010u) {
      ifindex_ = from.ifindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IfResInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.IfResInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IfResInfo::CopyFrom(const IfResInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.IfResInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IfResInfo::IsInitialized() const {
  return true;
}

void IfResInfo::Swap(IfResInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IfResInfo::InternalSwap(IfResInfo* other) {
  using std::swap;
  ifdesc_.Swap(&other->ifdesc_);
  ip_.Swap(&other->ip_);
  swap(dev_resid_, other->dev_resid_);
  swap(if_resid_, other->if_resid_);
  swap(ifindex_, other->ifindex_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IfResInfo::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProcessInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessInfo::kPidFieldNumber;
const int ProcessInfo::kNameFieldNumber;
const int ProcessInfo::kTypeFieldNumber;
const int ProcessInfo::kCpuRateFieldNumber;
const int ProcessInfo::kMemUseFieldNumber;
const int ProcessInfo::kRunPathFieldNumber;
const int ProcessInfo::kParameterFieldNumber;
const int ProcessInfo::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessInfo::ProcessInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsProcessInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.ProcessInfo)
}
ProcessInfo::ProcessInfo(const ProcessInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  run_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_run_path()) {
    run_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.run_path_);
  }
  parameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parameter()) {
    parameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameter_);
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.ProcessInfo)
}

void ProcessInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  run_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(status_));
  type_ = 1;
}

ProcessInfo::~ProcessInfo() {
  // @@protoc_insertion_point(destructor:mpfmessage.ProcessInfo)
  SharedDtor();
}

void ProcessInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  run_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProcessInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessInfo::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProcessInfo& ProcessInfo::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsProcessInfo();
  return *internal_default_instance();
}

ProcessInfo* ProcessInfo::New(::google::protobuf::Arena* arena) const {
  ProcessInfo* n = new ProcessInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.ProcessInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!run_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*run_path_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!parameter_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*parameter_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(status_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProcessInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.ProcessInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.ProcessInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SoftwareType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::SoftwareType_IsValid(value)) {
            set_type(static_cast< ::mpfmessage::SoftwareType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cpu_rate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cpu_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mem_use = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_mem_use();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string run_path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_run_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->run_path().data(), static_cast<int>(this->run_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.ProcessInfo.run_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parameter = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parameter().data(), static_cast<int>(this->parameter().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.ProcessInfo.parameter");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.ProcessInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.ProcessInfo)
  return false;
#undef DO_
}

void ProcessInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.ProcessInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.ProcessInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .mpfmessage.SoftwareType type = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 cpu_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cpu_rate(), output);
  }

  // optional uint32 mem_use = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mem_use(), output);
  }

  // optional string run_path = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->run_path().data(), static_cast<int>(this->run_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.ProcessInfo.run_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->run_path(), output);
  }

  // optional string parameter = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameter().data(), static_cast<int>(this->parameter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.ProcessInfo.parameter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->parameter(), output);
  }

  // optional uint32 status = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.ProcessInfo)
}

::google::protobuf::uint8* ProcessInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.ProcessInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.ProcessInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .mpfmessage.SoftwareType type = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 cpu_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cpu_rate(), target);
  }

  // optional uint32 mem_use = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mem_use(), target);
  }

  // optional string run_path = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->run_path().data(), static_cast<int>(this->run_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.ProcessInfo.run_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->run_path(), target);
  }

  // optional string parameter = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameter().data(), static_cast<int>(this->parameter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.ProcessInfo.parameter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->parameter(), target);
  }

  // optional uint32 status = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.ProcessInfo)
  return target;
}

size_t ProcessInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.ProcessInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string run_path = 6;
    if (has_run_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->run_path());
    }

    // optional string parameter = 7;
    if (has_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parameter());
    }

    // optional uint32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // optional uint32 cpu_rate = 4;
    if (has_cpu_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_rate());
    }

    // optional uint32 mem_use = 5;
    if (has_mem_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mem_use());
    }

    // optional uint32 status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional .mpfmessage.SoftwareType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.ProcessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.ProcessInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.ProcessInfo)
    MergeFrom(*source);
  }
}

void ProcessInfo::MergeFrom(const ProcessInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.ProcessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_run_path();
      run_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.run_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_parameter();
      parameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameter_);
    }
    if (cached_has_bits & 0x00000008u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000010u) {
      cpu_rate_ = from.cpu_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      mem_use_ = from.mem_use_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProcessInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.ProcessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessInfo::CopyFrom(const ProcessInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.ProcessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessInfo::IsInitialized() const {
  return true;
}

void ProcessInfo::Swap(ProcessInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessInfo::InternalSwap(ProcessInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  run_path_.Swap(&other->run_path_);
  parameter_.Swap(&other->parameter_);
  swap(pid_, other->pid_);
  swap(cpu_rate_, other->cpu_rate_);
  swap(mem_use_, other->mem_use_);
  swap(status_, other->status_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessInfo::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SoftwareInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftwareInfo::kNameFieldNumber;
const int SoftwareInfo::kTypeFieldNumber;
const int SoftwareInfo::kInstallTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftwareInfo::SoftwareInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSoftwareInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.SoftwareInfo)
}
SoftwareInfo::SoftwareInfo(const SoftwareInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  install_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_install_time()) {
    install_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.install_time_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:mpfmessage.SoftwareInfo)
}

void SoftwareInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  install_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
}

SoftwareInfo::~SoftwareInfo() {
  // @@protoc_insertion_point(destructor:mpfmessage.SoftwareInfo)
  SharedDtor();
}

void SoftwareInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  install_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SoftwareInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftwareInfo::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SoftwareInfo& SoftwareInfo::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSoftwareInfo();
  return *internal_default_instance();
}

SoftwareInfo* SoftwareInfo::New(::google::protobuf::Arena* arena) const {
  SoftwareInfo* n = new SoftwareInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.SoftwareInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!install_time_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*install_time_.UnsafeRawStringPointer())->clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SoftwareInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.SoftwareInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.SoftwareInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SoftwareType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::SoftwareType_IsValid(value)) {
            set_type(static_cast< ::mpfmessage::SoftwareType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string install_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_install_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->install_time().data(), static_cast<int>(this->install_time().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.SoftwareInfo.install_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.SoftwareInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.SoftwareInfo)
  return false;
#undef DO_
}

void SoftwareInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.SoftwareInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SoftwareInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .mpfmessage.SoftwareType type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string install_time = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->install_time().data(), static_cast<int>(this->install_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SoftwareInfo.install_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->install_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.SoftwareInfo)
}

::google::protobuf::uint8* SoftwareInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.SoftwareInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SoftwareInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .mpfmessage.SoftwareType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string install_time = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->install_time().data(), static_cast<int>(this->install_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SoftwareInfo.install_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->install_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.SoftwareInfo)
  return target;
}

size_t SoftwareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.SoftwareInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string install_time = 3;
    if (has_install_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->install_time());
    }

    // optional .mpfmessage.SoftwareType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftwareInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.SoftwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftwareInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftwareInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.SoftwareInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.SoftwareInfo)
    MergeFrom(*source);
  }
}

void SoftwareInfo::MergeFrom(const SoftwareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.SoftwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_install_time();
      install_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.install_time_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SoftwareInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.SoftwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareInfo::CopyFrom(const SoftwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.SoftwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareInfo::IsInitialized() const {
  return true;
}

void SoftwareInfo::Swap(SoftwareInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftwareInfo::InternalSwap(SoftwareInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  install_time_.Swap(&other->install_time_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftwareInfo::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PerfParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfParameter::kTypeidFieldNumber;
const int PerfParameter::kNameFieldNumber;
const int PerfParameter::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfParameter::PerfParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsPerfParameter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.PerfParameter)
}
PerfParameter::PerfParameter(const PerfParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&typeid__, &from.typeid__,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&typeid__)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.PerfParameter)
}

void PerfParameter::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&typeid__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&typeid__)) + sizeof(value_));
}

PerfParameter::~PerfParameter() {
  // @@protoc_insertion_point(destructor:mpfmessage.PerfParameter)
  SharedDtor();
}

void PerfParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PerfParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerfParameter::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerfParameter& PerfParameter::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsPerfParameter();
  return *internal_default_instance();
}

PerfParameter* PerfParameter::New(::google::protobuf::Arena* arena) const {
  PerfParameter* n = new PerfParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerfParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.PerfParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&typeid__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&typeid__)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.PerfParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 typeid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.PerfParameter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.PerfParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.PerfParameter)
  return false;
#undef DO_
}

void PerfParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.PerfParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 typeid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->typeid_(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.PerfParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.PerfParameter)
}

::google::protobuf::uint8* PerfParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.PerfParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 typeid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->typeid_(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.PerfParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.PerfParameter)
  return target;
}

size_t PerfParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.PerfParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 typeid = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->typeid_());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerfParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.PerfParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PerfParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerfParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.PerfParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.PerfParameter)
    MergeFrom(*source);
  }
}

void PerfParameter::MergeFrom(const PerfParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.PerfParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.PerfParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerfParameter::CopyFrom(const PerfParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.PerfParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfParameter::IsInitialized() const {
  return true;
}

void PerfParameter::Swap(PerfParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfParameter::InternalSwap(PerfParameter* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(typeid__, other->typeid__);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerfParameter::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MidwarePerf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MidwarePerf::kResidFieldNumber;
const int MidwarePerf::kNameFieldNumber;
const int MidwarePerf::kAvailableFieldNumber;
const int MidwarePerf::kCpuRateAppFieldNumber;
const int MidwarePerf::kMemUseAppFieldNumber;
const int MidwarePerf::kParalistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MidwarePerf::MidwarePerf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMidwarePerf();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MidwarePerf)
}
MidwarePerf::MidwarePerf(const MidwarePerf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      paralist_(from.paralist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&resid_, &from.resid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mem_use_app_) -
    reinterpret_cast<char*>(&resid_)) + sizeof(mem_use_app_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MidwarePerf)
}

void MidwarePerf::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&resid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_use_app_) -
      reinterpret_cast<char*>(&resid_)) + sizeof(mem_use_app_));
}

MidwarePerf::~MidwarePerf() {
  // @@protoc_insertion_point(destructor:mpfmessage.MidwarePerf)
  SharedDtor();
}

void MidwarePerf::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MidwarePerf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MidwarePerf::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MidwarePerf& MidwarePerf::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMidwarePerf();
  return *internal_default_instance();
}

MidwarePerf* MidwarePerf::New(::google::protobuf::Arena* arena) const {
  MidwarePerf* n = new MidwarePerf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MidwarePerf::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MidwarePerf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paralist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&resid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mem_use_app_) -
        reinterpret_cast<char*>(&resid_)) + sizeof(mem_use_app_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MidwarePerf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MidwarePerf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 resid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_resid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.MidwarePerf.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 available = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cpu_rate_app = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cpu_rate_app();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_rate_app_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mem_use_app = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_mem_use_app();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_use_app_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mpfmessage.PerfParameter paralist = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_paralist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MidwarePerf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MidwarePerf)
  return false;
#undef DO_
}

void MidwarePerf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MidwarePerf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 resid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.MidwarePerf.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 available = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->available(), output);
  }

  // optional uint32 cpu_rate_app = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cpu_rate_app(), output);
  }

  // optional uint32 mem_use_app = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mem_use_app(), output);
  }

  // repeated .mpfmessage.PerfParameter paralist = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paralist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->paralist(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MidwarePerf)
}

::google::protobuf::uint8* MidwarePerf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MidwarePerf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 resid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.MidwarePerf.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 available = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->available(), target);
  }

  // optional uint32 cpu_rate_app = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cpu_rate_app(), target);
  }

  // optional uint32 mem_use_app = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mem_use_app(), target);
  }

  // repeated .mpfmessage.PerfParameter paralist = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paralist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->paralist(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MidwarePerf)
  return target;
}

size_t MidwarePerf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MidwarePerf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.PerfParameter paralist = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->paralist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->paralist(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 resid = 1;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid());
    }

    // optional uint32 available = 3;
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->available());
    }

    // optional uint32 cpu_rate_app = 4;
    if (has_cpu_rate_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_rate_app());
    }

    // optional uint32 mem_use_app = 5;
    if (has_mem_use_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mem_use_app());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MidwarePerf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MidwarePerf)
  GOOGLE_DCHECK_NE(&from, this);
  const MidwarePerf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MidwarePerf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MidwarePerf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MidwarePerf)
    MergeFrom(*source);
  }
}

void MidwarePerf::MergeFrom(const MidwarePerf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MidwarePerf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paralist_.MergeFrom(from.paralist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      resid_ = from.resid_;
    }
    if (cached_has_bits & 0x00000004u) {
      available_ = from.available_;
    }
    if (cached_has_bits & 0x00000008u) {
      cpu_rate_app_ = from.cpu_rate_app_;
    }
    if (cached_has_bits & 0x00000010u) {
      mem_use_app_ = from.mem_use_app_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MidwarePerf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MidwarePerf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MidwarePerf::CopyFrom(const MidwarePerf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MidwarePerf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MidwarePerf::IsInitialized() const {
  return true;
}

void MidwarePerf::Swap(MidwarePerf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MidwarePerf::InternalSwap(MidwarePerf* other) {
  using std::swap;
  paralist_.InternalSwap(&other->paralist_);
  name_.Swap(&other->name_);
  swap(resid_, other->resid_);
  swap(available_, other->available_);
  swap(cpu_rate_app_, other->cpu_rate_app_);
  swap(mem_use_app_, other->mem_use_app_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MidwarePerf::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DatabasePerf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatabasePerf::kResidFieldNumber;
const int DatabasePerf::kNameFieldNumber;
const int DatabasePerf::kAvailableFieldNumber;
const int DatabasePerf::kCpuRateAppFieldNumber;
const int DatabasePerf::kMemUseAppFieldNumber;
const int DatabasePerf::kParalistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatabasePerf::DatabasePerf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsDatabasePerf();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.DatabasePerf)
}
DatabasePerf::DatabasePerf(const DatabasePerf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      paralist_(from.paralist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&resid_, &from.resid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mem_use_app_) -
    reinterpret_cast<char*>(&resid_)) + sizeof(mem_use_app_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.DatabasePerf)
}

void DatabasePerf::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&resid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_use_app_) -
      reinterpret_cast<char*>(&resid_)) + sizeof(mem_use_app_));
}

DatabasePerf::~DatabasePerf() {
  // @@protoc_insertion_point(destructor:mpfmessage.DatabasePerf)
  SharedDtor();
}

void DatabasePerf::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DatabasePerf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabasePerf::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatabasePerf& DatabasePerf::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsDatabasePerf();
  return *internal_default_instance();
}

DatabasePerf* DatabasePerf::New(::google::protobuf::Arena* arena) const {
  DatabasePerf* n = new DatabasePerf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatabasePerf::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.DatabasePerf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paralist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&resid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mem_use_app_) -
        reinterpret_cast<char*>(&resid_)) + sizeof(mem_use_app_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DatabasePerf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.DatabasePerf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 resid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_resid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.DatabasePerf.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 available = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cpu_rate_app = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cpu_rate_app();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_rate_app_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mem_use_app = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_mem_use_app();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_use_app_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mpfmessage.PerfParameter paralist = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_paralist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.DatabasePerf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.DatabasePerf)
  return false;
#undef DO_
}

void DatabasePerf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.DatabasePerf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 resid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DatabasePerf.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 available = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->available(), output);
  }

  // optional uint32 cpu_rate_app = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cpu_rate_app(), output);
  }

  // optional uint32 mem_use_app = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mem_use_app(), output);
  }

  // repeated .mpfmessage.PerfParameter paralist = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paralist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->paralist(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.DatabasePerf)
}

::google::protobuf::uint8* DatabasePerf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.DatabasePerf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 resid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DatabasePerf.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 available = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->available(), target);
  }

  // optional uint32 cpu_rate_app = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cpu_rate_app(), target);
  }

  // optional uint32 mem_use_app = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mem_use_app(), target);
  }

  // repeated .mpfmessage.PerfParameter paralist = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paralist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->paralist(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.DatabasePerf)
  return target;
}

size_t DatabasePerf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.DatabasePerf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.PerfParameter paralist = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->paralist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->paralist(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 resid = 1;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid());
    }

    // optional uint32 available = 3;
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->available());
    }

    // optional uint32 cpu_rate_app = 4;
    if (has_cpu_rate_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_rate_app());
    }

    // optional uint32 mem_use_app = 5;
    if (has_mem_use_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mem_use_app());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabasePerf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.DatabasePerf)
  GOOGLE_DCHECK_NE(&from, this);
  const DatabasePerf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatabasePerf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.DatabasePerf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.DatabasePerf)
    MergeFrom(*source);
  }
}

void DatabasePerf::MergeFrom(const DatabasePerf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.DatabasePerf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paralist_.MergeFrom(from.paralist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      resid_ = from.resid_;
    }
    if (cached_has_bits & 0x00000004u) {
      available_ = from.available_;
    }
    if (cached_has_bits & 0x00000008u) {
      cpu_rate_app_ = from.cpu_rate_app_;
    }
    if (cached_has_bits & 0x00000010u) {
      mem_use_app_ = from.mem_use_app_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DatabasePerf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.DatabasePerf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabasePerf::CopyFrom(const DatabasePerf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.DatabasePerf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabasePerf::IsInitialized() const {
  return true;
}

void DatabasePerf::Swap(DatabasePerf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatabasePerf::InternalSwap(DatabasePerf* other) {
  using std::swap;
  paralist_.InternalSwap(&other->paralist_);
  name_.Swap(&other->name_);
  swap(resid_, other->resid_);
  swap(available_, other->available_);
  swap(cpu_rate_app_, other->cpu_rate_app_);
  swap(mem_use_app_, other->mem_use_app_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatabasePerf::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IfPerf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IfPerf::kIndexFieldNumber;
const int IfPerf::kDescFieldNumber;
const int IfPerf::kOperStatusFieldNumber;
const int IfPerf::kAdminStatusFieldNumber;
const int IfPerf::kRateFieldNumber;
const int IfPerf::kByteInFieldNumber;
const int IfPerf::kByteOutFieldNumber;
const int IfPerf::kErrorInFieldNumber;
const int IfPerf::kErrorOutFieldNumber;
const int IfPerf::kDiscardInFieldNumber;
const int IfPerf::kDiscardOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IfPerf::IfPerf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsIfPerf();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.IfPerf)
}
IfPerf::IfPerf(const IfPerf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_status_) -
    reinterpret_cast<char*>(&index_)) + sizeof(admin_status_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.IfPerf)
}

void IfPerf::SharedCtor() {
  _cached_size_ = 0;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&discard_out_) -
      reinterpret_cast<char*>(&index_)) + sizeof(discard_out_));
  oper_status_ = 1;
  admin_status_ = 1;
}

IfPerf::~IfPerf() {
  // @@protoc_insertion_point(destructor:mpfmessage.IfPerf)
  SharedDtor();
}

void IfPerf::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IfPerf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IfPerf::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IfPerf& IfPerf::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsIfPerf();
  return *internal_default_instance();
}

IfPerf* IfPerf::New(::google::protobuf::Arena* arena) const {
  IfPerf* n = new IfPerf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IfPerf::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.IfPerf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*desc_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&discard_in_) -
        reinterpret_cast<char*>(&index_)) + sizeof(discard_in_));
  }
  if (cached_has_bits & 1792u) {
    discard_out_ = 0u;
    oper_status_ = 1;
    admin_status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IfPerf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.IfPerf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.IfPerf.desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.Status oper_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::Status_IsValid(value)) {
            set_oper_status(static_cast< ::mpfmessage::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.Status admin_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::Status_IsValid(value)) {
            set_admin_status(static_cast< ::mpfmessage::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 byte_in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_byte_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &byte_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 byte_out = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_byte_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &byte_out_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_in = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_error_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_out = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_error_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_out_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 discard_in = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_discard_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discard_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 discard_out = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_discard_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discard_out_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.IfPerf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.IfPerf)
  return false;
#undef DO_
}

void IfPerf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.IfPerf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IfPerf.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // optional .mpfmessage.Status oper_status = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->oper_status(), output);
  }

  // optional .mpfmessage.Status admin_status = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->admin_status(), output);
  }

  // optional uint32 rate = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rate(), output);
  }

  // optional uint32 byte_in = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->byte_in(), output);
  }

  // optional uint32 byte_out = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->byte_out(), output);
  }

  // optional uint32 error_in = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->error_in(), output);
  }

  // optional uint32 error_out = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->error_out(), output);
  }

  // optional uint32 discard_in = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->discard_in(), output);
  }

  // optional uint32 discard_out = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->discard_out(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.IfPerf)
}

::google::protobuf::uint8* IfPerf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.IfPerf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IfPerf.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // optional .mpfmessage.Status oper_status = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->oper_status(), target);
  }

  // optional .mpfmessage.Status admin_status = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->admin_status(), target);
  }

  // optional uint32 rate = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rate(), target);
  }

  // optional uint32 byte_in = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->byte_in(), target);
  }

  // optional uint32 byte_out = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->byte_out(), target);
  }

  // optional uint32 error_in = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->error_in(), target);
  }

  // optional uint32 error_out = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->error_out(), target);
  }

  // optional uint32 discard_in = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->discard_in(), target);
  }

  // optional uint32 discard_out = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->discard_out(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.IfPerf)
  return target;
}

size_t IfPerf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.IfPerf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 rate = 5;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

    // optional uint32 byte_in = 6;
    if (has_byte_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->byte_in());
    }

    // optional uint32 byte_out = 7;
    if (has_byte_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->byte_out());
    }

    // optional uint32 error_in = 8;
    if (has_error_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_in());
    }

    // optional uint32 error_out = 9;
    if (has_error_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_out());
    }

    // optional uint32 discard_in = 10;
    if (has_discard_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discard_in());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 discard_out = 11;
    if (has_discard_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discard_out());
    }

    // optional .mpfmessage.Status oper_status = 3;
    if (has_oper_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper_status());
    }

    // optional .mpfmessage.Status admin_status = 4;
    if (has_admin_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->admin_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IfPerf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.IfPerf)
  GOOGLE_DCHECK_NE(&from, this);
  const IfPerf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IfPerf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.IfPerf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.IfPerf)
    MergeFrom(*source);
  }
}

void IfPerf::MergeFrom(const IfPerf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.IfPerf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      rate_ = from.rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      byte_in_ = from.byte_in_;
    }
    if (cached_has_bits & 0x00000010u) {
      byte_out_ = from.byte_out_;
    }
    if (cached_has_bits & 0x00000020u) {
      error_in_ = from.error_in_;
    }
    if (cached_has_bits & 0x00000040u) {
      error_out_ = from.error_out_;
    }
    if (cached_has_bits & 0x00000080u) {
      discard_in_ = from.discard_in_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      discard_out_ = from.discard_out_;
    }
    if (cached_has_bits & 0x00000200u) {
      oper_status_ = from.oper_status_;
    }
    if (cached_has_bits & 0x00000400u) {
      admin_status_ = from.admin_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IfPerf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.IfPerf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IfPerf::CopyFrom(const IfPerf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.IfPerf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IfPerf::IsInitialized() const {
  return true;
}

void IfPerf::Swap(IfPerf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IfPerf::InternalSwap(IfPerf* other) {
  using std::swap;
  desc_.Swap(&other->desc_);
  swap(index_, other->index_);
  swap(rate_, other->rate_);
  swap(byte_in_, other->byte_in_);
  swap(byte_out_, other->byte_out_);
  swap(error_in_, other->error_in_);
  swap(error_out_, other->error_out_);
  swap(discard_in_, other->discard_in_);
  swap(discard_out_, other->discard_out_);
  swap(oper_status_, other->oper_status_);
  swap(admin_status_, other->admin_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IfPerf::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgTopoDiscoveryResp::InitAsDefaultInstance() {
  ::mpfmessage::_MsgTopoDiscoveryResp_default_instance_._instance.get_mutable()->result_ = const_cast< ::mpfmessage::MsgCommonData*>(
      ::mpfmessage::MsgCommonData::internal_default_instance());
}
void MsgTopoDiscoveryResp::clear_result() {
  if (result_ != NULL) result_->Clear();
  clear_has_result();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgTopoDiscoveryResp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgTopoDiscoveryResp::MsgTopoDiscoveryResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgTopoDiscoveryResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgTopoDiscoveryResp)
}
MsgTopoDiscoveryResp::MsgTopoDiscoveryResp(const MsgTopoDiscoveryResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::mpfmessage::MsgCommonData(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgTopoDiscoveryResp)
}

void MsgTopoDiscoveryResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
}

MsgTopoDiscoveryResp::~MsgTopoDiscoveryResp() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgTopoDiscoveryResp)
  SharedDtor();
}

void MsgTopoDiscoveryResp::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void MsgTopoDiscoveryResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTopoDiscoveryResp::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgTopoDiscoveryResp& MsgTopoDiscoveryResp::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgTopoDiscoveryResp();
  return *internal_default_instance();
}

MsgTopoDiscoveryResp* MsgTopoDiscoveryResp::New(::google::protobuf::Arena* arena) const {
  MsgTopoDiscoveryResp* n = new MsgTopoDiscoveryResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgTopoDiscoveryResp::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgTopoDiscoveryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(result_ != NULL);
    result_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgTopoDiscoveryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgTopoDiscoveryResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpfmessage.MsgCommonData result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgTopoDiscoveryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgTopoDiscoveryResp)
  return false;
#undef DO_
}

void MsgTopoDiscoveryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgTopoDiscoveryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgTopoDiscoveryResp)
}

::google::protobuf::uint8* MsgTopoDiscoveryResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgTopoDiscoveryResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->result_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgTopoDiscoveryResp)
  return target;
}

size_t MsgTopoDiscoveryResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgTopoDiscoveryResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .mpfmessage.MsgCommonData result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTopoDiscoveryResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgTopoDiscoveryResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTopoDiscoveryResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgTopoDiscoveryResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgTopoDiscoveryResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgTopoDiscoveryResp)
    MergeFrom(*source);
  }
}

void MsgTopoDiscoveryResp::MergeFrom(const MsgTopoDiscoveryResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgTopoDiscoveryResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::mpfmessage::MsgCommonData::MergeFrom(from.result());
  }
}

void MsgTopoDiscoveryResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgTopoDiscoveryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTopoDiscoveryResp::CopyFrom(const MsgTopoDiscoveryResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgTopoDiscoveryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTopoDiscoveryResp::IsInitialized() const {
  return true;
}

void MsgTopoDiscoveryResp::Swap(MsgTopoDiscoveryResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgTopoDiscoveryResp::InternalSwap(MsgTopoDiscoveryResp* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgTopoDiscoveryResp::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DiscoveredDev::InitAsDefaultInstance() {
  ::mpfmessage::_DiscoveredDev_default_instance_._instance.get_mutable()->dev_base_info_ = const_cast< ::mpfmessage::NetDevBaseInfo*>(
      ::mpfmessage::NetDevBaseInfo::internal_default_instance());
  ::mpfmessage::_DiscoveredDev_default_instance_._instance.get_mutable()->host_base_info_ = const_cast< ::mpfmessage::HostBaseInfo*>(
      ::mpfmessage::HostBaseInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiscoveredDev::kIpFieldNumber;
const int DiscoveredDev::kResultcodeFieldNumber;
const int DiscoveredDev::kDetailFieldNumber;
const int DiscoveredDev::kDevBaseInfoFieldNumber;
const int DiscoveredDev::kHostBaseInfoFieldNumber;
const int DiscoveredDev::kIfBaseInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiscoveredDev::DiscoveredDev()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsDiscoveredDev();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.DiscoveredDev)
}
DiscoveredDev::DiscoveredDev(const DiscoveredDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      if_base_info_(from.if_base_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_detail()) {
    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  if (from.has_dev_base_info()) {
    dev_base_info_ = new ::mpfmessage::NetDevBaseInfo(*from.dev_base_info_);
  } else {
    dev_base_info_ = NULL;
  }
  if (from.has_host_base_info()) {
    host_base_info_ = new ::mpfmessage::HostBaseInfo(*from.host_base_info_);
  } else {
    host_base_info_ = NULL;
  }
  resultcode_ = from.resultcode_;
  // @@protoc_insertion_point(copy_constructor:mpfmessage.DiscoveredDev)
}

void DiscoveredDev::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dev_base_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resultcode_) -
      reinterpret_cast<char*>(&dev_base_info_)) + sizeof(resultcode_));
}

DiscoveredDev::~DiscoveredDev() {
  // @@protoc_insertion_point(destructor:mpfmessage.DiscoveredDev)
  SharedDtor();
}

void DiscoveredDev::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dev_base_info_;
  if (this != internal_default_instance()) delete host_base_info_;
}

void DiscoveredDev::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscoveredDev::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DiscoveredDev& DiscoveredDev::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsDiscoveredDev();
  return *internal_default_instance();
}

DiscoveredDev* DiscoveredDev::New(::google::protobuf::Arena* arena) const {
  DiscoveredDev* n = new DiscoveredDev;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiscoveredDev::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.DiscoveredDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if_base_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!detail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*detail_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dev_base_info_ != NULL);
      dev_base_info_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(host_base_info_ != NULL);
      host_base_info_->Clear();
    }
  }
  resultcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DiscoveredDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.DiscoveredDev)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.DiscoveredDev.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 resultcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_resultcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string detail = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detail().data(), static_cast<int>(this->detail().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.DiscoveredDev.detail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.NetDevBaseInfo dev_base_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dev_base_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.HostBaseInfo host_base_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_host_base_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mpfmessage.IfBaseInfo if_base_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_if_base_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.DiscoveredDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.DiscoveredDev)
  return false;
#undef DO_
}

void DiscoveredDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.DiscoveredDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DiscoveredDev.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 resultcode = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resultcode(), output);
  }

  // optional string detail = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DiscoveredDev.detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->detail(), output);
  }

  // optional .mpfmessage.NetDevBaseInfo dev_base_info = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->dev_base_info_, output);
  }

  // optional .mpfmessage.HostBaseInfo host_base_info = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->host_base_info_, output);
  }

  // repeated .mpfmessage.IfBaseInfo if_base_info = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->if_base_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->if_base_info(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.DiscoveredDev)
}

::google::protobuf::uint8* DiscoveredDev::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.DiscoveredDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DiscoveredDev.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint32 resultcode = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resultcode(), target);
  }

  // optional string detail = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DiscoveredDev.detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->detail(), target);
  }

  // optional .mpfmessage.NetDevBaseInfo dev_base_info = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->dev_base_info_, deterministic, target);
  }

  // optional .mpfmessage.HostBaseInfo host_base_info = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->host_base_info_, deterministic, target);
  }

  // repeated .mpfmessage.IfBaseInfo if_base_info = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->if_base_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->if_base_info(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.DiscoveredDev)
  return target;
}

size_t DiscoveredDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.DiscoveredDev)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.IfBaseInfo if_base_info = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->if_base_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->if_base_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string detail = 3;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detail());
    }

    // optional .mpfmessage.NetDevBaseInfo dev_base_info = 4;
    if (has_dev_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->dev_base_info_);
    }

    // optional .mpfmessage.HostBaseInfo host_base_info = 5;
    if (has_host_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->host_base_info_);
    }

    // optional uint32 resultcode = 2;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultcode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscoveredDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.DiscoveredDev)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscoveredDev* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DiscoveredDev>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.DiscoveredDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.DiscoveredDev)
    MergeFrom(*source);
  }
}

void DiscoveredDev::MergeFrom(const DiscoveredDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.DiscoveredDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if_base_info_.MergeFrom(from.if_base_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_detail();
      detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_dev_base_info()->::mpfmessage::NetDevBaseInfo::MergeFrom(from.dev_base_info());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_host_base_info()->::mpfmessage::HostBaseInfo::MergeFrom(from.host_base_info());
    }
    if (cached_has_bits & 0x00000010u) {
      resultcode_ = from.resultcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DiscoveredDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.DiscoveredDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoveredDev::CopyFrom(const DiscoveredDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.DiscoveredDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveredDev::IsInitialized() const {
  return true;
}

void DiscoveredDev::Swap(DiscoveredDev* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiscoveredDev::InternalSwap(DiscoveredDev* other) {
  using std::swap;
  if_base_info_.InternalSwap(&other->if_base_info_);
  ip_.Swap(&other->ip_);
  detail_.Swap(&other->detail_);
  swap(dev_base_info_, other->dev_base_info_);
  swap(host_base_info_, other->host_base_info_);
  swap(resultcode_, other->resultcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiscoveredDev::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgTopoDiscoveryNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgTopoDiscoveryNotify::kTopoNodeInfoFieldNumber;
const int MsgTopoDiscoveryNotify::kTopoLinkInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgTopoDiscoveryNotify::MsgTopoDiscoveryNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgTopoDiscoveryNotify();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgTopoDiscoveryNotify)
}
MsgTopoDiscoveryNotify::MsgTopoDiscoveryNotify(const MsgTopoDiscoveryNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      topo_node_info_(from.topo_node_info_),
      topo_link_info_(from.topo_link_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgTopoDiscoveryNotify)
}

void MsgTopoDiscoveryNotify::SharedCtor() {
  _cached_size_ = 0;
}

MsgTopoDiscoveryNotify::~MsgTopoDiscoveryNotify() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgTopoDiscoveryNotify)
  SharedDtor();
}

void MsgTopoDiscoveryNotify::SharedDtor() {
}

void MsgTopoDiscoveryNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTopoDiscoveryNotify::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgTopoDiscoveryNotify& MsgTopoDiscoveryNotify::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgTopoDiscoveryNotify();
  return *internal_default_instance();
}

MsgTopoDiscoveryNotify* MsgTopoDiscoveryNotify::New(::google::protobuf::Arena* arena) const {
  MsgTopoDiscoveryNotify* n = new MsgTopoDiscoveryNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgTopoDiscoveryNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgTopoDiscoveryNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topo_node_info_.Clear();
  topo_link_info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgTopoDiscoveryNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgTopoDiscoveryNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpfmessage.TopoNodeInfo topo_node_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_topo_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mpfmessage.TopoLinkInfo topo_link_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_topo_link_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgTopoDiscoveryNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgTopoDiscoveryNotify)
  return false;
#undef DO_
}

void MsgTopoDiscoveryNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgTopoDiscoveryNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.TopoNodeInfo topo_node_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topo_node_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->topo_node_info(static_cast<int>(i)), output);
  }

  // repeated .mpfmessage.TopoLinkInfo topo_link_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topo_link_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->topo_link_info(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgTopoDiscoveryNotify)
}

::google::protobuf::uint8* MsgTopoDiscoveryNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgTopoDiscoveryNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.TopoNodeInfo topo_node_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topo_node_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->topo_node_info(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mpfmessage.TopoLinkInfo topo_link_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topo_link_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->topo_link_info(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgTopoDiscoveryNotify)
  return target;
}

size_t MsgTopoDiscoveryNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgTopoDiscoveryNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.TopoNodeInfo topo_node_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->topo_node_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->topo_node_info(static_cast<int>(i)));
    }
  }

  // repeated .mpfmessage.TopoLinkInfo topo_link_info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->topo_link_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->topo_link_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTopoDiscoveryNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgTopoDiscoveryNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTopoDiscoveryNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgTopoDiscoveryNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgTopoDiscoveryNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgTopoDiscoveryNotify)
    MergeFrom(*source);
  }
}

void MsgTopoDiscoveryNotify::MergeFrom(const MsgTopoDiscoveryNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgTopoDiscoveryNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topo_node_info_.MergeFrom(from.topo_node_info_);
  topo_link_info_.MergeFrom(from.topo_link_info_);
}

void MsgTopoDiscoveryNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgTopoDiscoveryNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTopoDiscoveryNotify::CopyFrom(const MsgTopoDiscoveryNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgTopoDiscoveryNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTopoDiscoveryNotify::IsInitialized() const {
  return true;
}

void MsgTopoDiscoveryNotify::Swap(MsgTopoDiscoveryNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgTopoDiscoveryNotify::InternalSwap(MsgTopoDiscoveryNotify* other) {
  using std::swap;
  topo_node_info_.InternalSwap(&other->topo_node_info_);
  topo_link_info_.InternalSwap(&other->topo_link_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgTopoDiscoveryNotify::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResSynInfo::InitAsDefaultInstance() {
  ::mpfmessage::_ResSynInfo_default_instance_._instance.get_mutable()->snmp_info_ = const_cast< ::mpfmessage::SnmpInfo*>(
      ::mpfmessage::SnmpInfo::internal_default_instance());
  ::mpfmessage::_ResSynInfo_default_instance_._instance.get_mutable()->telentpara_ = const_cast< ::mpfmessage::TelnetPara*>(
      ::mpfmessage::TelnetPara::internal_default_instance());
  ::mpfmessage::_ResSynInfo_default_instance_._instance.get_mutable()->sshpara_ = const_cast< ::mpfmessage::SshPara*>(
      ::mpfmessage::SshPara::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResSynInfo::kResIdFieldNumber;
const int ResSynInfo::kResTypeFieldNumber;
const int ResSynInfo::kSnmpInfoFieldNumber;
const int ResSynInfo::kTelentParaFieldNumber;
const int ResSynInfo::kSshParaFieldNumber;
const int ResSynInfo::kIfListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResSynInfo::ResSynInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsResSynInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.ResSynInfo)
}
ResSynInfo::ResSynInfo(const ResSynInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      if_list_(from.if_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snmp_info()) {
    snmp_info_ = new ::mpfmessage::SnmpInfo(*from.snmp_info_);
  } else {
    snmp_info_ = NULL;
  }
  if (from.has_telentpara()) {
    telentpara_ = new ::mpfmessage::TelnetPara(*from.telentpara_);
  } else {
    telentpara_ = NULL;
  }
  if (from.has_sshpara()) {
    sshpara_ = new ::mpfmessage::SshPara(*from.sshpara_);
  } else {
    sshpara_ = NULL;
  }
  ::memcpy(&res_id_, &from.res_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_type_) -
    reinterpret_cast<char*>(&res_id_)) + sizeof(res_type_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.ResSynInfo)
}

void ResSynInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&snmp_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_id_) -
      reinterpret_cast<char*>(&snmp_info_)) + sizeof(res_id_));
  res_type_ = 1;
}

ResSynInfo::~ResSynInfo() {
  // @@protoc_insertion_point(destructor:mpfmessage.ResSynInfo)
  SharedDtor();
}

void ResSynInfo::SharedDtor() {
  if (this != internal_default_instance()) delete snmp_info_;
  if (this != internal_default_instance()) delete telentpara_;
  if (this != internal_default_instance()) delete sshpara_;
}

void ResSynInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResSynInfo::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResSynInfo& ResSynInfo::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsResSynInfo();
  return *internal_default_instance();
}

ResSynInfo* ResSynInfo::New(::google::protobuf::Arena* arena) const {
  ResSynInfo* n = new ResSynInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResSynInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.ResSynInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(snmp_info_ != NULL);
      snmp_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(telentpara_ != NULL);
      telentpara_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sshpara_ != NULL);
      sshpara_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    res_id_ = 0u;
    res_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResSynInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.ResSynInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 res_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.ResType res_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::ResType_IsValid(value)) {
            set_res_type(static_cast< ::mpfmessage::ResType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SnmpInfo snmp_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snmp_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.TelnetPara telentPara = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_telentpara()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SshPara sshPara = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sshpara()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mpfmessage.IfResInfo if_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_if_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.ResSynInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.ResSynInfo)
  return false;
#undef DO_
}

void ResSynInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.ResSynInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->res_id(), output);
  }

  // optional .mpfmessage.ResType res_type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res_type(), output);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->snmp_info_, output);
  }

  // optional .mpfmessage.TelnetPara telentPara = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->telentpara_, output);
  }

  // optional .mpfmessage.SshPara sshPara = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->sshpara_, output);
  }

  // repeated .mpfmessage.IfResInfo if_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->if_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->if_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.ResSynInfo)
}

::google::protobuf::uint8* ResSynInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.ResSynInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->res_id(), target);
  }

  // optional .mpfmessage.ResType res_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res_type(), target);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->snmp_info_, deterministic, target);
  }

  // optional .mpfmessage.TelnetPara telentPara = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->telentpara_, deterministic, target);
  }

  // optional .mpfmessage.SshPara sshPara = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->sshpara_, deterministic, target);
  }

  // repeated .mpfmessage.IfResInfo if_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->if_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->if_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.ResSynInfo)
  return target;
}

size_t ResSynInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.ResSynInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.IfResInfo if_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->if_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->if_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .mpfmessage.SnmpInfo snmp_info = 3;
    if (has_snmp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->snmp_info_);
    }

    // optional .mpfmessage.TelnetPara telentPara = 4;
    if (has_telentpara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->telentpara_);
    }

    // optional .mpfmessage.SshPara sshPara = 5;
    if (has_sshpara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->sshpara_);
    }

    // optional uint32 res_id = 1;
    if (has_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_id());
    }

    // optional .mpfmessage.ResType res_type = 2;
    if (has_res_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResSynInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.ResSynInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResSynInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResSynInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.ResSynInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.ResSynInfo)
    MergeFrom(*source);
  }
}

void ResSynInfo::MergeFrom(const ResSynInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.ResSynInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if_list_.MergeFrom(from.if_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_snmp_info()->::mpfmessage::SnmpInfo::MergeFrom(from.snmp_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_telentpara()->::mpfmessage::TelnetPara::MergeFrom(from.telentpara());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sshpara()->::mpfmessage::SshPara::MergeFrom(from.sshpara());
    }
    if (cached_has_bits & 0x00000008u) {
      res_id_ = from.res_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      res_type_ = from.res_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResSynInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.ResSynInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResSynInfo::CopyFrom(const ResSynInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.ResSynInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResSynInfo::IsInitialized() const {
  return true;
}

void ResSynInfo::Swap(ResSynInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResSynInfo::InternalSwap(ResSynInfo* other) {
  using std::swap;
  if_list_.InternalSwap(&other->if_list_);
  swap(snmp_info_, other->snmp_info_);
  swap(telentpara_, other->telentpara_);
  swap(sshpara_, other->sshpara_);
  swap(res_id_, other->res_id_);
  swap(res_type_, other->res_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResSynInfo::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RespAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespAddr::kAddrFieldNumber;
const int RespAddr::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespAddr::RespAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsRespAddr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.RespAddr)
}
RespAddr::RespAddr(const RespAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_addr()) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:mpfmessage.RespAddr)
}

void RespAddr::SharedCtor() {
  _cached_size_ = 0;
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

RespAddr::~RespAddr() {
  // @@protoc_insertion_point(destructor:mpfmessage.RespAddr)
  SharedDtor();
}

void RespAddr::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RespAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespAddr::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RespAddr& RespAddr::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsRespAddr();
  return *internal_default_instance();
}

RespAddr* RespAddr::New(::google::protobuf::Arena* arena) const {
  RespAddr* n = new RespAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RespAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.RespAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*addr_.UnsafeRawStringPointer())->clear();
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RespAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.RespAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.RespAddr.addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.RespAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.RespAddr)
  return false;
#undef DO_
}

void RespAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.RespAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.RespAddr.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.RespAddr)
}

::google::protobuf::uint8* RespAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.RespAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.RespAddr.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.RespAddr)
  return target;
}

size_t RespAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.RespAddr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.RespAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const RespAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RespAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.RespAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.RespAddr)
    MergeFrom(*source);
  }
}

void RespAddr::MergeFrom(const RespAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.RespAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_addr();
      addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RespAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.RespAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespAddr::CopyFrom(const RespAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.RespAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespAddr::IsInitialized() const {
  return true;
}

void RespAddr::Swap(RespAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespAddr::InternalSwap(RespAddr* other) {
  using std::swap;
  addr_.Swap(&other->addr_);
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RespAddr::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgResSynReq::InitAsDefaultInstance() {
  ::mpfmessage::_MsgResSynReq_default_instance_._instance.get_mutable()->resp_addr_ = const_cast< ::mpfmessage::RespAddr*>(
      ::mpfmessage::RespAddr::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgResSynReq::kResListFieldNumber;
const int MsgResSynReq::kRespAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgResSynReq::MsgResSynReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgResSynReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgResSynReq)
}
MsgResSynReq::MsgResSynReq(const MsgResSynReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      res_list_(from.res_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resp_addr()) {
    resp_addr_ = new ::mpfmessage::RespAddr(*from.resp_addr_);
  } else {
    resp_addr_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgResSynReq)
}

void MsgResSynReq::SharedCtor() {
  _cached_size_ = 0;
  resp_addr_ = NULL;
}

MsgResSynReq::~MsgResSynReq() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgResSynReq)
  SharedDtor();
}

void MsgResSynReq::SharedDtor() {
  if (this != internal_default_instance()) delete resp_addr_;
}

void MsgResSynReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgResSynReq::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgResSynReq& MsgResSynReq::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgResSynReq();
  return *internal_default_instance();
}

MsgResSynReq* MsgResSynReq::New(::google::protobuf::Arena* arena) const {
  MsgResSynReq* n = new MsgResSynReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgResSynReq::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgResSynReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(resp_addr_ != NULL);
    resp_addr_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgResSynReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgResSynReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpfmessage.ResSynInfo res_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_res_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.RespAddr resp_addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgResSynReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgResSynReq)
  return false;
#undef DO_
}

void MsgResSynReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgResSynReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.ResSynInfo res_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->res_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->res_list(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.RespAddr resp_addr = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_addr_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgResSynReq)
}

::google::protobuf::uint8* MsgResSynReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgResSynReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.ResSynInfo res_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->res_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->res_list(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.RespAddr resp_addr = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->resp_addr_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgResSynReq)
  return target;
}

size_t MsgResSynReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgResSynReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.ResSynInfo res_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->res_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->res_list(static_cast<int>(i)));
    }
  }

  // optional .mpfmessage.RespAddr resp_addr = 2;
  if (has_resp_addr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->resp_addr_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgResSynReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgResSynReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgResSynReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgResSynReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgResSynReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgResSynReq)
    MergeFrom(*source);
  }
}

void MsgResSynReq::MergeFrom(const MsgResSynReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgResSynReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  res_list_.MergeFrom(from.res_list_);
  if (from.has_resp_addr()) {
    mutable_resp_addr()->::mpfmessage::RespAddr::MergeFrom(from.resp_addr());
  }
}

void MsgResSynReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgResSynReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgResSynReq::CopyFrom(const MsgResSynReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgResSynReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgResSynReq::IsInitialized() const {
  return true;
}

void MsgResSynReq::Swap(MsgResSynReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgResSynReq::InternalSwap(MsgResSynReq* other) {
  using std::swap;
  res_list_.InternalSwap(&other->res_list_);
  swap(resp_addr_, other->resp_addr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgResSynReq::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgResSynResp::InitAsDefaultInstance() {
  ::mpfmessage::_MsgResSynResp_default_instance_._instance.get_mutable()->result_ = const_cast< ::mpfmessage::MsgCommonData*>(
      ::mpfmessage::MsgCommonData::internal_default_instance());
}
void MsgResSynResp::clear_result() {
  if (result_ != NULL) result_->Clear();
  clear_has_result();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgResSynResp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgResSynResp::MsgResSynResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgResSynResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgResSynResp)
}
MsgResSynResp::MsgResSynResp(const MsgResSynResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::mpfmessage::MsgCommonData(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgResSynResp)
}

void MsgResSynResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
}

MsgResSynResp::~MsgResSynResp() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgResSynResp)
  SharedDtor();
}

void MsgResSynResp::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void MsgResSynResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgResSynResp::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgResSynResp& MsgResSynResp::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgResSynResp();
  return *internal_default_instance();
}

MsgResSynResp* MsgResSynResp::New(::google::protobuf::Arena* arena) const {
  MsgResSynResp* n = new MsgResSynResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgResSynResp::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgResSynResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(result_ != NULL);
    result_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgResSynResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgResSynResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpfmessage.MsgCommonData result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgResSynResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgResSynResp)
  return false;
#undef DO_
}

void MsgResSynResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgResSynResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgResSynResp)
}

::google::protobuf::uint8* MsgResSynResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgResSynResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->result_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgResSynResp)
  return target;
}

size_t MsgResSynResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgResSynResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .mpfmessage.MsgCommonData result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgResSynResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgResSynResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgResSynResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgResSynResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgResSynResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgResSynResp)
    MergeFrom(*source);
  }
}

void MsgResSynResp::MergeFrom(const MsgResSynResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgResSynResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::mpfmessage::MsgCommonData::MergeFrom(from.result());
  }
}

void MsgResSynResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgResSynResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgResSynResp::CopyFrom(const MsgResSynResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgResSynResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgResSynResp::IsInitialized() const {
  return true;
}

void MsgResSynResp::Swap(MsgResSynResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgResSynResp::InternalSwap(MsgResSynResp* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgResSynResp::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResSynResult::InitAsDefaultInstance() {
  ::mpfmessage::_ResSynResult_default_instance_._instance.get_mutable()->dev_base_info_ = const_cast< ::mpfmessage::NetDevBaseInfo*>(
      ::mpfmessage::NetDevBaseInfo::internal_default_instance());
  ::mpfmessage::_ResSynResult_default_instance_._instance.get_mutable()->host_base_info_ = const_cast< ::mpfmessage::HostBaseInfo*>(
      ::mpfmessage::HostBaseInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResSynResult::kResIdFieldNumber;
const int ResSynResult::kResTypeFieldNumber;
const int ResSynResult::kResultcodeFieldNumber;
const int ResSynResult::kDetailFieldNumber;
const int ResSynResult::kDevBaseInfoFieldNumber;
const int ResSynResult::kHostBaseInfoFieldNumber;
const int ResSynResult::kIfBaseInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResSynResult::ResSynResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsResSynResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.ResSynResult)
}
ResSynResult::ResSynResult(const ResSynResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      if_base_info_(from.if_base_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_detail()) {
    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  if (from.has_dev_base_info()) {
    dev_base_info_ = new ::mpfmessage::NetDevBaseInfo(*from.dev_base_info_);
  } else {
    dev_base_info_ = NULL;
  }
  if (from.has_host_base_info()) {
    host_base_info_ = new ::mpfmessage::HostBaseInfo(*from.host_base_info_);
  } else {
    host_base_info_ = NULL;
  }
  ::memcpy(&res_id_, &from.res_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_type_) -
    reinterpret_cast<char*>(&res_id_)) + sizeof(res_type_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.ResSynResult)
}

void ResSynResult::SharedCtor() {
  _cached_size_ = 0;
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dev_base_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resultcode_) -
      reinterpret_cast<char*>(&dev_base_info_)) + sizeof(resultcode_));
  res_type_ = 1;
}

ResSynResult::~ResSynResult() {
  // @@protoc_insertion_point(destructor:mpfmessage.ResSynResult)
  SharedDtor();
}

void ResSynResult::SharedDtor() {
  detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dev_base_info_;
  if (this != internal_default_instance()) delete host_base_info_;
}

void ResSynResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResSynResult::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResSynResult& ResSynResult::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsResSynResult();
  return *internal_default_instance();
}

ResSynResult* ResSynResult::New(::google::protobuf::Arena* arena) const {
  ResSynResult* n = new ResSynResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResSynResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.ResSynResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if_base_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!detail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*detail_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dev_base_info_ != NULL);
      dev_base_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(host_base_info_ != NULL);
      host_base_info_->Clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&res_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&resultcode_) -
        reinterpret_cast<char*>(&res_id_)) + sizeof(resultcode_));
    res_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResSynResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.ResSynResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 res_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.ResType res_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::ResType_IsValid(value)) {
            set_res_type(static_cast< ::mpfmessage::ResType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 resultcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_resultcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string detail = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detail().data(), static_cast<int>(this->detail().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.ResSynResult.detail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.NetDevBaseInfo dev_base_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dev_base_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.HostBaseInfo host_base_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_host_base_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mpfmessage.IfBaseInfo if_base_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_if_base_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.ResSynResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.ResSynResult)
  return false;
#undef DO_
}

void ResSynResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.ResSynResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->res_id(), output);
  }

  // optional .mpfmessage.ResType res_type = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res_type(), output);
  }

  // optional uint32 resultcode = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->resultcode(), output);
  }

  // optional string detail = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.ResSynResult.detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->detail(), output);
  }

  // optional .mpfmessage.NetDevBaseInfo dev_base_info = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->dev_base_info_, output);
  }

  // optional .mpfmessage.HostBaseInfo host_base_info = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->host_base_info_, output);
  }

  // repeated .mpfmessage.IfBaseInfo if_base_info = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->if_base_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->if_base_info(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.ResSynResult)
}

::google::protobuf::uint8* ResSynResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.ResSynResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->res_id(), target);
  }

  // optional .mpfmessage.ResType res_type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res_type(), target);
  }

  // optional uint32 resultcode = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->resultcode(), target);
  }

  // optional string detail = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.ResSynResult.detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->detail(), target);
  }

  // optional .mpfmessage.NetDevBaseInfo dev_base_info = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->dev_base_info_, deterministic, target);
  }

  // optional .mpfmessage.HostBaseInfo host_base_info = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->host_base_info_, deterministic, target);
  }

  // repeated .mpfmessage.IfBaseInfo if_base_info = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->if_base_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->if_base_info(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.ResSynResult)
  return target;
}

size_t ResSynResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.ResSynResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.IfBaseInfo if_base_info = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->if_base_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->if_base_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string detail = 4;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detail());
    }

    // optional .mpfmessage.NetDevBaseInfo dev_base_info = 5;
    if (has_dev_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->dev_base_info_);
    }

    // optional .mpfmessage.HostBaseInfo host_base_info = 6;
    if (has_host_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->host_base_info_);
    }

    // optional uint32 res_id = 1;
    if (has_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_id());
    }

    // optional uint32 resultcode = 3;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultcode());
    }

    // optional .mpfmessage.ResType res_type = 2;
    if (has_res_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResSynResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.ResSynResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ResSynResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResSynResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.ResSynResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.ResSynResult)
    MergeFrom(*source);
  }
}

void ResSynResult::MergeFrom(const ResSynResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.ResSynResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if_base_info_.MergeFrom(from.if_base_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_detail();
      detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dev_base_info()->::mpfmessage::NetDevBaseInfo::MergeFrom(from.dev_base_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_host_base_info()->::mpfmessage::HostBaseInfo::MergeFrom(from.host_base_info());
    }
    if (cached_has_bits & 0x00000008u) {
      res_id_ = from.res_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      resultcode_ = from.resultcode_;
    }
    if (cached_has_bits & 0x00000020u) {
      res_type_ = from.res_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResSynResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.ResSynResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResSynResult::CopyFrom(const ResSynResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.ResSynResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResSynResult::IsInitialized() const {
  return true;
}

void ResSynResult::Swap(ResSynResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResSynResult::InternalSwap(ResSynResult* other) {
  using std::swap;
  if_base_info_.InternalSwap(&other->if_base_info_);
  detail_.Swap(&other->detail_);
  swap(dev_base_info_, other->dev_base_info_);
  swap(host_base_info_, other->host_base_info_);
  swap(res_id_, other->res_id_);
  swap(resultcode_, other->resultcode_);
  swap(res_type_, other->res_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResSynResult::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgResSynNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgResSynNotify::kResSynDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgResSynNotify::MsgResSynNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgResSynNotify();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgResSynNotify)
}
MsgResSynNotify::MsgResSynNotify(const MsgResSynNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      res_syn_data_(from.res_syn_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgResSynNotify)
}

void MsgResSynNotify::SharedCtor() {
  _cached_size_ = 0;
}

MsgResSynNotify::~MsgResSynNotify() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgResSynNotify)
  SharedDtor();
}

void MsgResSynNotify::SharedDtor() {
}

void MsgResSynNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgResSynNotify::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgResSynNotify& MsgResSynNotify::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgResSynNotify();
  return *internal_default_instance();
}

MsgResSynNotify* MsgResSynNotify::New(::google::protobuf::Arena* arena) const {
  MsgResSynNotify* n = new MsgResSynNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgResSynNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgResSynNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_syn_data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgResSynNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgResSynNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpfmessage.ResSynResult res_syn_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_res_syn_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgResSynNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgResSynNotify)
  return false;
#undef DO_
}

void MsgResSynNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgResSynNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.ResSynResult res_syn_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->res_syn_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->res_syn_data(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgResSynNotify)
}

::google::protobuf::uint8* MsgResSynNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgResSynNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.ResSynResult res_syn_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->res_syn_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->res_syn_data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgResSynNotify)
  return target;
}

size_t MsgResSynNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgResSynNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.ResSynResult res_syn_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->res_syn_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->res_syn_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgResSynNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgResSynNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgResSynNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgResSynNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgResSynNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgResSynNotify)
    MergeFrom(*source);
  }
}

void MsgResSynNotify::MergeFrom(const MsgResSynNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgResSynNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  res_syn_data_.MergeFrom(from.res_syn_data_);
}

void MsgResSynNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgResSynNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgResSynNotify::CopyFrom(const MsgResSynNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgResSynNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgResSynNotify::IsInitialized() const {
  return true;
}

void MsgResSynNotify::Swap(MsgResSynNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgResSynNotify::InternalSwap(MsgResSynNotify* other) {
  using std::swap;
  res_syn_data_.InternalSwap(&other->res_syn_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgResSynNotify::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgDevPerfCollectReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgDevPerfCollectReq::kResListFieldNumber;
const int MsgDevPerfCollectReq::kCollectTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgDevPerfCollectReq::MsgDevPerfCollectReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgDevPerfCollectReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgDevPerfCollectReq)
}
MsgDevPerfCollectReq::MsgDevPerfCollectReq(const MsgDevPerfCollectReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      res_list_(from.res_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collect_time_ = from.collect_time_;
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgDevPerfCollectReq)
}

void MsgDevPerfCollectReq::SharedCtor() {
  _cached_size_ = 0;
  collect_time_ = 0u;
}

MsgDevPerfCollectReq::~MsgDevPerfCollectReq() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgDevPerfCollectReq)
  SharedDtor();
}

void MsgDevPerfCollectReq::SharedDtor() {
}

void MsgDevPerfCollectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDevPerfCollectReq::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgDevPerfCollectReq& MsgDevPerfCollectReq::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgDevPerfCollectReq();
  return *internal_default_instance();
}

MsgDevPerfCollectReq* MsgDevPerfCollectReq::New(::google::protobuf::Arena* arena) const {
  MsgDevPerfCollectReq* n = new MsgDevPerfCollectReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgDevPerfCollectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgDevPerfCollectReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_list_.Clear();
  collect_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgDevPerfCollectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgDevPerfCollectReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpfmessage.ResSynInfo res_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_res_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 collect_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_collect_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collect_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgDevPerfCollectReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgDevPerfCollectReq)
  return false;
#undef DO_
}

void MsgDevPerfCollectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgDevPerfCollectReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.ResSynInfo res_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->res_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->res_list(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 collect_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->collect_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgDevPerfCollectReq)
}

::google::protobuf::uint8* MsgDevPerfCollectReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgDevPerfCollectReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.ResSynInfo res_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->res_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->res_list(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 collect_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->collect_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgDevPerfCollectReq)
  return target;
}

size_t MsgDevPerfCollectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgDevPerfCollectReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.ResSynInfo res_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->res_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->res_list(static_cast<int>(i)));
    }
  }

  // optional uint32 collect_time = 2;
  if (has_collect_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->collect_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDevPerfCollectReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgDevPerfCollectReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDevPerfCollectReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgDevPerfCollectReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgDevPerfCollectReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgDevPerfCollectReq)
    MergeFrom(*source);
  }
}

void MsgDevPerfCollectReq::MergeFrom(const MsgDevPerfCollectReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgDevPerfCollectReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  res_list_.MergeFrom(from.res_list_);
  if (from.has_collect_time()) {
    set_collect_time(from.collect_time());
  }
}

void MsgDevPerfCollectReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgDevPerfCollectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDevPerfCollectReq::CopyFrom(const MsgDevPerfCollectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgDevPerfCollectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDevPerfCollectReq::IsInitialized() const {
  return true;
}

void MsgDevPerfCollectReq::Swap(MsgDevPerfCollectReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgDevPerfCollectReq::InternalSwap(MsgDevPerfCollectReq* other) {
  using std::swap;
  res_list_.InternalSwap(&other->res_list_);
  swap(collect_time_, other->collect_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgDevPerfCollectReq::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgDevPerfCollectResp::InitAsDefaultInstance() {
  ::mpfmessage::_MsgDevPerfCollectResp_default_instance_._instance.get_mutable()->result_ = const_cast< ::mpfmessage::MsgCommonData*>(
      ::mpfmessage::MsgCommonData::internal_default_instance());
}
void MsgDevPerfCollectResp::clear_result() {
  if (result_ != NULL) result_->Clear();
  clear_has_result();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgDevPerfCollectResp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgDevPerfCollectResp::MsgDevPerfCollectResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgDevPerfCollectResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgDevPerfCollectResp)
}
MsgDevPerfCollectResp::MsgDevPerfCollectResp(const MsgDevPerfCollectResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::mpfmessage::MsgCommonData(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgDevPerfCollectResp)
}

void MsgDevPerfCollectResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
}

MsgDevPerfCollectResp::~MsgDevPerfCollectResp() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgDevPerfCollectResp)
  SharedDtor();
}

void MsgDevPerfCollectResp::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void MsgDevPerfCollectResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDevPerfCollectResp::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgDevPerfCollectResp& MsgDevPerfCollectResp::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgDevPerfCollectResp();
  return *internal_default_instance();
}

MsgDevPerfCollectResp* MsgDevPerfCollectResp::New(::google::protobuf::Arena* arena) const {
  MsgDevPerfCollectResp* n = new MsgDevPerfCollectResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgDevPerfCollectResp::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgDevPerfCollectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(result_ != NULL);
    result_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgDevPerfCollectResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgDevPerfCollectResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpfmessage.MsgCommonData result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgDevPerfCollectResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgDevPerfCollectResp)
  return false;
#undef DO_
}

void MsgDevPerfCollectResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgDevPerfCollectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgDevPerfCollectResp)
}

::google::protobuf::uint8* MsgDevPerfCollectResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgDevPerfCollectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->result_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgDevPerfCollectResp)
  return target;
}

size_t MsgDevPerfCollectResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgDevPerfCollectResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .mpfmessage.MsgCommonData result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDevPerfCollectResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgDevPerfCollectResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDevPerfCollectResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgDevPerfCollectResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgDevPerfCollectResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgDevPerfCollectResp)
    MergeFrom(*source);
  }
}

void MsgDevPerfCollectResp::MergeFrom(const MsgDevPerfCollectResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgDevPerfCollectResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::mpfmessage::MsgCommonData::MergeFrom(from.result());
  }
}

void MsgDevPerfCollectResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgDevPerfCollectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDevPerfCollectResp::CopyFrom(const MsgDevPerfCollectResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgDevPerfCollectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDevPerfCollectResp::IsInitialized() const {
  return true;
}

void MsgDevPerfCollectResp::Swap(MsgDevPerfCollectResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgDevPerfCollectResp::InternalSwap(MsgDevPerfCollectResp* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgDevPerfCollectResp::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgGetHostProcListReq::InitAsDefaultInstance() {
  ::mpfmessage::_MsgGetHostProcListReq_default_instance_._instance.get_mutable()->snmp_info_ = const_cast< ::mpfmessage::SnmpInfo*>(
      ::mpfmessage::SnmpInfo::internal_default_instance());
  ::mpfmessage::_MsgGetHostProcListReq_default_instance_._instance.get_mutable()->telentpara_ = const_cast< ::mpfmessage::TelnetPara*>(
      ::mpfmessage::TelnetPara::internal_default_instance());
  ::mpfmessage::_MsgGetHostProcListReq_default_instance_._instance.get_mutable()->sshpara_ = const_cast< ::mpfmessage::SshPara*>(
      ::mpfmessage::SshPara::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgGetHostProcListReq::kHostResIdFieldNumber;
const int MsgGetHostProcListReq::kSnmpInfoFieldNumber;
const int MsgGetHostProcListReq::kTelentParaFieldNumber;
const int MsgGetHostProcListReq::kSshParaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgGetHostProcListReq::MsgGetHostProcListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgGetHostProcListReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgGetHostProcListReq)
}
MsgGetHostProcListReq::MsgGetHostProcListReq(const MsgGetHostProcListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snmp_info()) {
    snmp_info_ = new ::mpfmessage::SnmpInfo(*from.snmp_info_);
  } else {
    snmp_info_ = NULL;
  }
  if (from.has_telentpara()) {
    telentpara_ = new ::mpfmessage::TelnetPara(*from.telentpara_);
  } else {
    telentpara_ = NULL;
  }
  if (from.has_sshpara()) {
    sshpara_ = new ::mpfmessage::SshPara(*from.sshpara_);
  } else {
    sshpara_ = NULL;
  }
  host_res_id_ = from.host_res_id_;
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgGetHostProcListReq)
}

void MsgGetHostProcListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&snmp_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_res_id_) -
      reinterpret_cast<char*>(&snmp_info_)) + sizeof(host_res_id_));
}

MsgGetHostProcListReq::~MsgGetHostProcListReq() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgGetHostProcListReq)
  SharedDtor();
}

void MsgGetHostProcListReq::SharedDtor() {
  if (this != internal_default_instance()) delete snmp_info_;
  if (this != internal_default_instance()) delete telentpara_;
  if (this != internal_default_instance()) delete sshpara_;
}

void MsgGetHostProcListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGetHostProcListReq::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgGetHostProcListReq& MsgGetHostProcListReq::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgGetHostProcListReq();
  return *internal_default_instance();
}

MsgGetHostProcListReq* MsgGetHostProcListReq::New(::google::protobuf::Arena* arena) const {
  MsgGetHostProcListReq* n = new MsgGetHostProcListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgGetHostProcListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgGetHostProcListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(snmp_info_ != NULL);
      snmp_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(telentpara_ != NULL);
      telentpara_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sshpara_ != NULL);
      sshpara_->Clear();
    }
  }
  host_res_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgGetHostProcListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgGetHostProcListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 host_res_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_host_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SnmpInfo snmp_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snmp_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.TelnetPara telentPara = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_telentpara()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SshPara sshPara = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sshpara()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgGetHostProcListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgGetHostProcListReq)
  return false;
#undef DO_
}

void MsgGetHostProcListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgGetHostProcListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 host_res_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->host_res_id(), output);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->snmp_info_, output);
  }

  // optional .mpfmessage.TelnetPara telentPara = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->telentpara_, output);
  }

  // optional .mpfmessage.SshPara sshPara = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->sshpara_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgGetHostProcListReq)
}

::google::protobuf::uint8* MsgGetHostProcListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgGetHostProcListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 host_res_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->host_res_id(), target);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->snmp_info_, deterministic, target);
  }

  // optional .mpfmessage.TelnetPara telentPara = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->telentpara_, deterministic, target);
  }

  // optional .mpfmessage.SshPara sshPara = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->sshpara_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgGetHostProcListReq)
  return target;
}

size_t MsgGetHostProcListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgGetHostProcListReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .mpfmessage.SnmpInfo snmp_info = 2;
    if (has_snmp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->snmp_info_);
    }

    // optional .mpfmessage.TelnetPara telentPara = 3;
    if (has_telentpara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->telentpara_);
    }

    // optional .mpfmessage.SshPara sshPara = 4;
    if (has_sshpara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->sshpara_);
    }

    // optional uint32 host_res_id = 1;
    if (has_host_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_res_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGetHostProcListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgGetHostProcListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgGetHostProcListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgGetHostProcListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgGetHostProcListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgGetHostProcListReq)
    MergeFrom(*source);
  }
}

void MsgGetHostProcListReq::MergeFrom(const MsgGetHostProcListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgGetHostProcListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_snmp_info()->::mpfmessage::SnmpInfo::MergeFrom(from.snmp_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_telentpara()->::mpfmessage::TelnetPara::MergeFrom(from.telentpara());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sshpara()->::mpfmessage::SshPara::MergeFrom(from.sshpara());
    }
    if (cached_has_bits & 0x00000008u) {
      host_res_id_ = from.host_res_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgGetHostProcListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgGetHostProcListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetHostProcListReq::CopyFrom(const MsgGetHostProcListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgGetHostProcListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetHostProcListReq::IsInitialized() const {
  return true;
}

void MsgGetHostProcListReq::Swap(MsgGetHostProcListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgGetHostProcListReq::InternalSwap(MsgGetHostProcListReq* other) {
  using std::swap;
  swap(snmp_info_, other->snmp_info_);
  swap(telentpara_, other->telentpara_);
  swap(sshpara_, other->sshpara_);
  swap(host_res_id_, other->host_res_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgGetHostProcListReq::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgGetHostProcListResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgGetHostProcListResp::kHostResIdFieldNumber;
const int MsgGetHostProcListResp::kResultcodeFieldNumber;
const int MsgGetHostProcListResp::kDetailFieldNumber;
const int MsgGetHostProcListResp::kSoftwarelistFieldNumber;
const int MsgGetHostProcListResp::kProclistFieldNumber;
const int MsgGetHostProcListResp::kCollectTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgGetHostProcListResp::MsgGetHostProcListResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgGetHostProcListResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgGetHostProcListResp)
}
MsgGetHostProcListResp::MsgGetHostProcListResp(const MsgGetHostProcListResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      softwarelist_(from.softwarelist_),
      proclist_(from.proclist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_detail()) {
    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  ::memcpy(&host_res_id_, &from.host_res_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&collect_time_) -
    reinterpret_cast<char*>(&host_res_id_)) + sizeof(collect_time_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgGetHostProcListResp)
}

void MsgGetHostProcListResp::SharedCtor() {
  _cached_size_ = 0;
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&host_res_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collect_time_) -
      reinterpret_cast<char*>(&host_res_id_)) + sizeof(collect_time_));
}

MsgGetHostProcListResp::~MsgGetHostProcListResp() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgGetHostProcListResp)
  SharedDtor();
}

void MsgGetHostProcListResp::SharedDtor() {
  detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MsgGetHostProcListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGetHostProcListResp::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgGetHostProcListResp& MsgGetHostProcListResp::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgGetHostProcListResp();
  return *internal_default_instance();
}

MsgGetHostProcListResp* MsgGetHostProcListResp::New(::google::protobuf::Arena* arena) const {
  MsgGetHostProcListResp* n = new MsgGetHostProcListResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgGetHostProcListResp::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgGetHostProcListResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  softwarelist_.Clear();
  proclist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!detail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*detail_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&host_res_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&collect_time_) -
        reinterpret_cast<char*>(&host_res_id_)) + sizeof(collect_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgGetHostProcListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgGetHostProcListResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 host_res_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_host_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 resultcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_resultcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string detail = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detail().data(), static_cast<int>(this->detail().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.MsgGetHostProcListResp.detail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mpfmessage.SoftwareInfo softwarelist = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_softwarelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mpfmessage.ProcessInfo proclist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_proclist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 collect_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_collect_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collect_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgGetHostProcListResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgGetHostProcListResp)
  return false;
#undef DO_
}

void MsgGetHostProcListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgGetHostProcListResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 host_res_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->host_res_id(), output);
  }

  // optional uint32 resultcode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resultcode(), output);
  }

  // optional string detail = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.MsgGetHostProcListResp.detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->detail(), output);
  }

  // repeated .mpfmessage.SoftwareInfo softwarelist = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->softwarelist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->softwarelist(static_cast<int>(i)), output);
  }

  // repeated .mpfmessage.ProcessInfo proclist = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->proclist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->proclist(static_cast<int>(i)), output);
  }

  // optional uint32 collect_time = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->collect_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgGetHostProcListResp)
}

::google::protobuf::uint8* MsgGetHostProcListResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgGetHostProcListResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 host_res_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->host_res_id(), target);
  }

  // optional uint32 resultcode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resultcode(), target);
  }

  // optional string detail = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.MsgGetHostProcListResp.detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->detail(), target);
  }

  // repeated .mpfmessage.SoftwareInfo softwarelist = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->softwarelist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->softwarelist(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mpfmessage.ProcessInfo proclist = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->proclist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->proclist(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 collect_time = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->collect_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgGetHostProcListResp)
  return target;
}

size_t MsgGetHostProcListResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgGetHostProcListResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.SoftwareInfo softwarelist = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->softwarelist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->softwarelist(static_cast<int>(i)));
    }
  }

  // repeated .mpfmessage.ProcessInfo proclist = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->proclist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->proclist(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string detail = 3;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detail());
    }

    // optional uint32 host_res_id = 1;
    if (has_host_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_res_id());
    }

    // optional uint32 resultcode = 2;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultcode());
    }

    // optional uint32 collect_time = 6;
    if (has_collect_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collect_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGetHostProcListResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgGetHostProcListResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgGetHostProcListResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgGetHostProcListResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgGetHostProcListResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgGetHostProcListResp)
    MergeFrom(*source);
  }
}

void MsgGetHostProcListResp::MergeFrom(const MsgGetHostProcListResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgGetHostProcListResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  softwarelist_.MergeFrom(from.softwarelist_);
  proclist_.MergeFrom(from.proclist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_detail();
      detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
    }
    if (cached_has_bits & 0x00000002u) {
      host_res_id_ = from.host_res_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      resultcode_ = from.resultcode_;
    }
    if (cached_has_bits & 0x00000008u) {
      collect_time_ = from.collect_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgGetHostProcListResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgGetHostProcListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetHostProcListResp::CopyFrom(const MsgGetHostProcListResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgGetHostProcListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetHostProcListResp::IsInitialized() const {
  return true;
}

void MsgGetHostProcListResp::Swap(MsgGetHostProcListResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgGetHostProcListResp::InternalSwap(MsgGetHostProcListResp* other) {
  using std::swap;
  softwarelist_.InternalSwap(&other->softwarelist_);
  proclist_.InternalSwap(&other->proclist_);
  detail_.Swap(&other->detail_);
  swap(host_res_id_, other->host_res_id_);
  swap(resultcode_, other->resultcode_);
  swap(collect_time_, other->collect_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgGetHostProcListResp::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgGetHostFileSystemListReq::InitAsDefaultInstance() {
  ::mpfmessage::_MsgGetHostFileSystemListReq_default_instance_._instance.get_mutable()->snmp_info_ = const_cast< ::mpfmessage::SnmpInfo*>(
      ::mpfmessage::SnmpInfo::internal_default_instance());
  ::mpfmessage::_MsgGetHostFileSystemListReq_default_instance_._instance.get_mutable()->telentpara_ = const_cast< ::mpfmessage::TelnetPara*>(
      ::mpfmessage::TelnetPara::internal_default_instance());
  ::mpfmessage::_MsgGetHostFileSystemListReq_default_instance_._instance.get_mutable()->sshpara_ = const_cast< ::mpfmessage::SshPara*>(
      ::mpfmessage::SshPara::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgGetHostFileSystemListReq::kHostResIdFieldNumber;
const int MsgGetHostFileSystemListReq::kSnmpInfoFieldNumber;
const int MsgGetHostFileSystemListReq::kTelentParaFieldNumber;
const int MsgGetHostFileSystemListReq::kSshParaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgGetHostFileSystemListReq::MsgGetHostFileSystemListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgGetHostFileSystemListReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgGetHostFileSystemListReq)
}
MsgGetHostFileSystemListReq::MsgGetHostFileSystemListReq(const MsgGetHostFileSystemListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snmp_info()) {
    snmp_info_ = new ::mpfmessage::SnmpInfo(*from.snmp_info_);
  } else {
    snmp_info_ = NULL;
  }
  if (from.has_telentpara()) {
    telentpara_ = new ::mpfmessage::TelnetPara(*from.telentpara_);
  } else {
    telentpara_ = NULL;
  }
  if (from.has_sshpara()) {
    sshpara_ = new ::mpfmessage::SshPara(*from.sshpara_);
  } else {
    sshpara_ = NULL;
  }
  host_res_id_ = from.host_res_id_;
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgGetHostFileSystemListReq)
}

void MsgGetHostFileSystemListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&snmp_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_res_id_) -
      reinterpret_cast<char*>(&snmp_info_)) + sizeof(host_res_id_));
}

MsgGetHostFileSystemListReq::~MsgGetHostFileSystemListReq() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgGetHostFileSystemListReq)
  SharedDtor();
}

void MsgGetHostFileSystemListReq::SharedDtor() {
  if (this != internal_default_instance()) delete snmp_info_;
  if (this != internal_default_instance()) delete telentpara_;
  if (this != internal_default_instance()) delete sshpara_;
}

void MsgGetHostFileSystemListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGetHostFileSystemListReq::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgGetHostFileSystemListReq& MsgGetHostFileSystemListReq::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgGetHostFileSystemListReq();
  return *internal_default_instance();
}

MsgGetHostFileSystemListReq* MsgGetHostFileSystemListReq::New(::google::protobuf::Arena* arena) const {
  MsgGetHostFileSystemListReq* n = new MsgGetHostFileSystemListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgGetHostFileSystemListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgGetHostFileSystemListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(snmp_info_ != NULL);
      snmp_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(telentpara_ != NULL);
      telentpara_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sshpara_ != NULL);
      sshpara_->Clear();
    }
  }
  host_res_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgGetHostFileSystemListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgGetHostFileSystemListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 host_res_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_host_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SnmpInfo snmp_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snmp_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.TelnetPara telentPara = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_telentpara()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SshPara sshPara = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sshpara()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgGetHostFileSystemListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgGetHostFileSystemListReq)
  return false;
#undef DO_
}

void MsgGetHostFileSystemListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgGetHostFileSystemListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 host_res_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->host_res_id(), output);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->snmp_info_, output);
  }

  // optional .mpfmessage.TelnetPara telentPara = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->telentpara_, output);
  }

  // optional .mpfmessage.SshPara sshPara = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->sshpara_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgGetHostFileSystemListReq)
}

::google::protobuf::uint8* MsgGetHostFileSystemListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgGetHostFileSystemListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 host_res_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->host_res_id(), target);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->snmp_info_, deterministic, target);
  }

  // optional .mpfmessage.TelnetPara telentPara = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->telentpara_, deterministic, target);
  }

  // optional .mpfmessage.SshPara sshPara = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->sshpara_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgGetHostFileSystemListReq)
  return target;
}

size_t MsgGetHostFileSystemListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgGetHostFileSystemListReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .mpfmessage.SnmpInfo snmp_info = 2;
    if (has_snmp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->snmp_info_);
    }

    // optional .mpfmessage.TelnetPara telentPara = 3;
    if (has_telentpara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->telentpara_);
    }

    // optional .mpfmessage.SshPara sshPara = 4;
    if (has_sshpara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->sshpara_);
    }

    // optional uint32 host_res_id = 1;
    if (has_host_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_res_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGetHostFileSystemListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgGetHostFileSystemListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgGetHostFileSystemListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgGetHostFileSystemListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgGetHostFileSystemListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgGetHostFileSystemListReq)
    MergeFrom(*source);
  }
}

void MsgGetHostFileSystemListReq::MergeFrom(const MsgGetHostFileSystemListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgGetHostFileSystemListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_snmp_info()->::mpfmessage::SnmpInfo::MergeFrom(from.snmp_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_telentpara()->::mpfmessage::TelnetPara::MergeFrom(from.telentpara());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sshpara()->::mpfmessage::SshPara::MergeFrom(from.sshpara());
    }
    if (cached_has_bits & 0x00000008u) {
      host_res_id_ = from.host_res_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgGetHostFileSystemListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgGetHostFileSystemListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetHostFileSystemListReq::CopyFrom(const MsgGetHostFileSystemListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgGetHostFileSystemListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetHostFileSystemListReq::IsInitialized() const {
  return true;
}

void MsgGetHostFileSystemListReq::Swap(MsgGetHostFileSystemListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgGetHostFileSystemListReq::InternalSwap(MsgGetHostFileSystemListReq* other) {
  using std::swap;
  swap(snmp_info_, other->snmp_info_);
  swap(telentpara_, other->telentpara_);
  swap(sshpara_, other->sshpara_);
  swap(host_res_id_, other->host_res_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgGetHostFileSystemListReq::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgGetHostFileSystemListResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgGetHostFileSystemListResp::kHostResIdFieldNumber;
const int MsgGetHostFileSystemListResp::kResultcodeFieldNumber;
const int MsgGetHostFileSystemListResp::kDetailFieldNumber;
const int MsgGetHostFileSystemListResp::kPartiListFieldNumber;
const int MsgGetHostFileSystemListResp::kCollectTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgGetHostFileSystemListResp::MsgGetHostFileSystemListResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgGetHostFileSystemListResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgGetHostFileSystemListResp)
}
MsgGetHostFileSystemListResp::MsgGetHostFileSystemListResp(const MsgGetHostFileSystemListResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      partilist_(from.partilist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_detail()) {
    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  ::memcpy(&host_res_id_, &from.host_res_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&collect_time_) -
    reinterpret_cast<char*>(&host_res_id_)) + sizeof(collect_time_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgGetHostFileSystemListResp)
}

void MsgGetHostFileSystemListResp::SharedCtor() {
  _cached_size_ = 0;
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&host_res_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collect_time_) -
      reinterpret_cast<char*>(&host_res_id_)) + sizeof(collect_time_));
}

MsgGetHostFileSystemListResp::~MsgGetHostFileSystemListResp() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgGetHostFileSystemListResp)
  SharedDtor();
}

void MsgGetHostFileSystemListResp::SharedDtor() {
  detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MsgGetHostFileSystemListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGetHostFileSystemListResp::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgGetHostFileSystemListResp& MsgGetHostFileSystemListResp::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgGetHostFileSystemListResp();
  return *internal_default_instance();
}

MsgGetHostFileSystemListResp* MsgGetHostFileSystemListResp::New(::google::protobuf::Arena* arena) const {
  MsgGetHostFileSystemListResp* n = new MsgGetHostFileSystemListResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgGetHostFileSystemListResp::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgGetHostFileSystemListResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partilist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!detail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*detail_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&host_res_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&collect_time_) -
        reinterpret_cast<char*>(&host_res_id_)) + sizeof(collect_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgGetHostFileSystemListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgGetHostFileSystemListResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 host_res_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_host_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 resultcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_resultcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string detail = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detail().data(), static_cast<int>(this->detail().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.MsgGetHostFileSystemListResp.detail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mpfmessage.PartitionInfo partiList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_partilist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 collect_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_collect_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collect_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgGetHostFileSystemListResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgGetHostFileSystemListResp)
  return false;
#undef DO_
}

void MsgGetHostFileSystemListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgGetHostFileSystemListResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 host_res_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->host_res_id(), output);
  }

  // optional uint32 resultcode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resultcode(), output);
  }

  // optional string detail = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.MsgGetHostFileSystemListResp.detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->detail(), output);
  }

  // repeated .mpfmessage.PartitionInfo partiList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partilist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->partilist(static_cast<int>(i)), output);
  }

  // optional uint32 collect_time = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->collect_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgGetHostFileSystemListResp)
}

::google::protobuf::uint8* MsgGetHostFileSystemListResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgGetHostFileSystemListResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 host_res_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->host_res_id(), target);
  }

  // optional uint32 resultcode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resultcode(), target);
  }

  // optional string detail = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.MsgGetHostFileSystemListResp.detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->detail(), target);
  }

  // repeated .mpfmessage.PartitionInfo partiList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partilist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->partilist(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 collect_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->collect_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgGetHostFileSystemListResp)
  return target;
}

size_t MsgGetHostFileSystemListResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgGetHostFileSystemListResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.PartitionInfo partiList = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->partilist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->partilist(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string detail = 3;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detail());
    }

    // optional uint32 host_res_id = 1;
    if (has_host_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_res_id());
    }

    // optional uint32 resultcode = 2;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultcode());
    }

    // optional uint32 collect_time = 5;
    if (has_collect_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collect_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGetHostFileSystemListResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgGetHostFileSystemListResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgGetHostFileSystemListResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgGetHostFileSystemListResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgGetHostFileSystemListResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgGetHostFileSystemListResp)
    MergeFrom(*source);
  }
}

void MsgGetHostFileSystemListResp::MergeFrom(const MsgGetHostFileSystemListResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgGetHostFileSystemListResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partilist_.MergeFrom(from.partilist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_detail();
      detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
    }
    if (cached_has_bits & 0x00000002u) {
      host_res_id_ = from.host_res_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      resultcode_ = from.resultcode_;
    }
    if (cached_has_bits & 0x00000008u) {
      collect_time_ = from.collect_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgGetHostFileSystemListResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgGetHostFileSystemListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetHostFileSystemListResp::CopyFrom(const MsgGetHostFileSystemListResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgGetHostFileSystemListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetHostFileSystemListResp::IsInitialized() const {
  return true;
}

void MsgGetHostFileSystemListResp::Swap(MsgGetHostFileSystemListResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgGetHostFileSystemListResp::InternalSwap(MsgGetHostFileSystemListResp* other) {
  using std::swap;
  partilist_.InternalSwap(&other->partilist_);
  detail_.Swap(&other->detail_);
  swap(host_res_id_, other->host_res_id_);
  swap(resultcode_, other->resultcode_);
  swap(collect_time_, other->collect_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgGetHostFileSystemListResp::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DBResInfo::InitAsDefaultInstance() {
  ::mpfmessage::_DBResInfo_default_instance_._instance.get_mutable()->snmp_info_ = const_cast< ::mpfmessage::SnmpInfo*>(
      ::mpfmessage::SnmpInfo::internal_default_instance());
  ::mpfmessage::_DBResInfo_default_instance_._instance.get_mutable()->db_conn_pare_ = const_cast< ::mpfmessage::DbLoginPara*>(
      ::mpfmessage::DbLoginPara::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DBResInfo::kResIdFieldNumber;
const int DBResInfo::kSnmpInfoFieldNumber;
const int DBResInfo::kDbConnPareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DBResInfo::DBResInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsDBResInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.DBResInfo)
}
DBResInfo::DBResInfo(const DBResInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snmp_info()) {
    snmp_info_ = new ::mpfmessage::SnmpInfo(*from.snmp_info_);
  } else {
    snmp_info_ = NULL;
  }
  if (from.has_db_conn_pare()) {
    db_conn_pare_ = new ::mpfmessage::DbLoginPara(*from.db_conn_pare_);
  } else {
    db_conn_pare_ = NULL;
  }
  res_id_ = from.res_id_;
  // @@protoc_insertion_point(copy_constructor:mpfmessage.DBResInfo)
}

void DBResInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&snmp_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_id_) -
      reinterpret_cast<char*>(&snmp_info_)) + sizeof(res_id_));
}

DBResInfo::~DBResInfo() {
  // @@protoc_insertion_point(destructor:mpfmessage.DBResInfo)
  SharedDtor();
}

void DBResInfo::SharedDtor() {
  if (this != internal_default_instance()) delete snmp_info_;
  if (this != internal_default_instance()) delete db_conn_pare_;
}

void DBResInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBResInfo::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DBResInfo& DBResInfo::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsDBResInfo();
  return *internal_default_instance();
}

DBResInfo* DBResInfo::New(::google::protobuf::Arena* arena) const {
  DBResInfo* n = new DBResInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBResInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.DBResInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(snmp_info_ != NULL);
      snmp_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(db_conn_pare_ != NULL);
      db_conn_pare_->Clear();
    }
  }
  res_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DBResInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.DBResInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 res_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SnmpInfo snmp_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snmp_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.DbLoginPara db_conn_pare = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_db_conn_pare()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.DBResInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.DBResInfo)
  return false;
#undef DO_
}

void DBResInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.DBResInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->res_id(), output);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->snmp_info_, output);
  }

  // optional .mpfmessage.DbLoginPara db_conn_pare = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->db_conn_pare_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.DBResInfo)
}

::google::protobuf::uint8* DBResInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.DBResInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->res_id(), target);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->snmp_info_, deterministic, target);
  }

  // optional .mpfmessage.DbLoginPara db_conn_pare = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->db_conn_pare_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.DBResInfo)
  return target;
}

size_t DBResInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.DBResInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .mpfmessage.SnmpInfo snmp_info = 2;
    if (has_snmp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->snmp_info_);
    }

    // optional .mpfmessage.DbLoginPara db_conn_pare = 3;
    if (has_db_conn_pare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->db_conn_pare_);
    }

    // optional uint32 res_id = 1;
    if (has_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBResInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.DBResInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DBResInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DBResInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.DBResInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.DBResInfo)
    MergeFrom(*source);
  }
}

void DBResInfo::MergeFrom(const DBResInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.DBResInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_snmp_info()->::mpfmessage::SnmpInfo::MergeFrom(from.snmp_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_db_conn_pare()->::mpfmessage::DbLoginPara::MergeFrom(from.db_conn_pare());
    }
    if (cached_has_bits & 0x00000004u) {
      res_id_ = from.res_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DBResInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.DBResInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBResInfo::CopyFrom(const DBResInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.DBResInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBResInfo::IsInitialized() const {
  return true;
}

void DBResInfo::Swap(DBResInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBResInfo::InternalSwap(DBResInfo* other) {
  using std::swap;
  swap(snmp_info_, other->snmp_info_);
  swap(db_conn_pare_, other->db_conn_pare_);
  swap(res_id_, other->res_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBResInfo::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgDBPerfCollectReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgDBPerfCollectReq::kDbreslistFieldNumber;
const int MsgDBPerfCollectReq::kCollectTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgDBPerfCollectReq::MsgDBPerfCollectReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgDBPerfCollectReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgDBPerfCollectReq)
}
MsgDBPerfCollectReq::MsgDBPerfCollectReq(const MsgDBPerfCollectReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dbreslist_(from.dbreslist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collect_time_ = from.collect_time_;
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgDBPerfCollectReq)
}

void MsgDBPerfCollectReq::SharedCtor() {
  _cached_size_ = 0;
  collect_time_ = 0u;
}

MsgDBPerfCollectReq::~MsgDBPerfCollectReq() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgDBPerfCollectReq)
  SharedDtor();
}

void MsgDBPerfCollectReq::SharedDtor() {
}

void MsgDBPerfCollectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBPerfCollectReq::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgDBPerfCollectReq& MsgDBPerfCollectReq::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgDBPerfCollectReq();
  return *internal_default_instance();
}

MsgDBPerfCollectReq* MsgDBPerfCollectReq::New(::google::protobuf::Arena* arena) const {
  MsgDBPerfCollectReq* n = new MsgDBPerfCollectReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgDBPerfCollectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgDBPerfCollectReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dbreslist_.Clear();
  collect_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgDBPerfCollectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgDBPerfCollectReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpfmessage.DBResInfo dbreslist = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_dbreslist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 collect_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_collect_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collect_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgDBPerfCollectReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgDBPerfCollectReq)
  return false;
#undef DO_
}

void MsgDBPerfCollectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgDBPerfCollectReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.DBResInfo dbreslist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dbreslist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dbreslist(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 collect_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->collect_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgDBPerfCollectReq)
}

::google::protobuf::uint8* MsgDBPerfCollectReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgDBPerfCollectReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.DBResInfo dbreslist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dbreslist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->dbreslist(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 collect_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->collect_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgDBPerfCollectReq)
  return target;
}

size_t MsgDBPerfCollectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgDBPerfCollectReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.DBResInfo dbreslist = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dbreslist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dbreslist(static_cast<int>(i)));
    }
  }

  // optional uint32 collect_time = 2;
  if (has_collect_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->collect_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBPerfCollectReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgDBPerfCollectReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBPerfCollectReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgDBPerfCollectReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgDBPerfCollectReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgDBPerfCollectReq)
    MergeFrom(*source);
  }
}

void MsgDBPerfCollectReq::MergeFrom(const MsgDBPerfCollectReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgDBPerfCollectReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dbreslist_.MergeFrom(from.dbreslist_);
  if (from.has_collect_time()) {
    set_collect_time(from.collect_time());
  }
}

void MsgDBPerfCollectReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgDBPerfCollectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBPerfCollectReq::CopyFrom(const MsgDBPerfCollectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgDBPerfCollectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBPerfCollectReq::IsInitialized() const {
  return true;
}

void MsgDBPerfCollectReq::Swap(MsgDBPerfCollectReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgDBPerfCollectReq::InternalSwap(MsgDBPerfCollectReq* other) {
  using std::swap;
  dbreslist_.InternalSwap(&other->dbreslist_);
  swap(collect_time_, other->collect_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgDBPerfCollectReq::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgDBPerfCollectResp::InitAsDefaultInstance() {
  ::mpfmessage::_MsgDBPerfCollectResp_default_instance_._instance.get_mutable()->result_ = const_cast< ::mpfmessage::MsgCommonData*>(
      ::mpfmessage::MsgCommonData::internal_default_instance());
}
void MsgDBPerfCollectResp::clear_result() {
  if (result_ != NULL) result_->Clear();
  clear_has_result();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgDBPerfCollectResp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgDBPerfCollectResp::MsgDBPerfCollectResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgDBPerfCollectResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgDBPerfCollectResp)
}
MsgDBPerfCollectResp::MsgDBPerfCollectResp(const MsgDBPerfCollectResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::mpfmessage::MsgCommonData(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgDBPerfCollectResp)
}

void MsgDBPerfCollectResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
}

MsgDBPerfCollectResp::~MsgDBPerfCollectResp() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgDBPerfCollectResp)
  SharedDtor();
}

void MsgDBPerfCollectResp::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void MsgDBPerfCollectResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBPerfCollectResp::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgDBPerfCollectResp& MsgDBPerfCollectResp::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgDBPerfCollectResp();
  return *internal_default_instance();
}

MsgDBPerfCollectResp* MsgDBPerfCollectResp::New(::google::protobuf::Arena* arena) const {
  MsgDBPerfCollectResp* n = new MsgDBPerfCollectResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgDBPerfCollectResp::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgDBPerfCollectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(result_ != NULL);
    result_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgDBPerfCollectResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgDBPerfCollectResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpfmessage.MsgCommonData result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgDBPerfCollectResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgDBPerfCollectResp)
  return false;
#undef DO_
}

void MsgDBPerfCollectResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgDBPerfCollectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgDBPerfCollectResp)
}

::google::protobuf::uint8* MsgDBPerfCollectResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgDBPerfCollectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->result_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgDBPerfCollectResp)
  return target;
}

size_t MsgDBPerfCollectResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgDBPerfCollectResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .mpfmessage.MsgCommonData result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBPerfCollectResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgDBPerfCollectResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBPerfCollectResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgDBPerfCollectResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgDBPerfCollectResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgDBPerfCollectResp)
    MergeFrom(*source);
  }
}

void MsgDBPerfCollectResp::MergeFrom(const MsgDBPerfCollectResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgDBPerfCollectResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::mpfmessage::MsgCommonData::MergeFrom(from.result());
  }
}

void MsgDBPerfCollectResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgDBPerfCollectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBPerfCollectResp::CopyFrom(const MsgDBPerfCollectResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgDBPerfCollectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBPerfCollectResp::IsInitialized() const {
  return true;
}

void MsgDBPerfCollectResp::Swap(MsgDBPerfCollectResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgDBPerfCollectResp::InternalSwap(MsgDBPerfCollectResp* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgDBPerfCollectResp::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MidwareResInfo::InitAsDefaultInstance() {
  ::mpfmessage::_MidwareResInfo_default_instance_._instance.get_mutable()->snmp_info_ = const_cast< ::mpfmessage::SnmpInfo*>(
      ::mpfmessage::SnmpInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MidwareResInfo::kResIdFieldNumber;
const int MidwareResInfo::kSnmpInfoFieldNumber;
const int MidwareResInfo::kOsTypeFieldNumber;
const int MidwareResInfo::kMidTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MidwareResInfo::MidwareResInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMidwareResInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MidwareResInfo)
}
MidwareResInfo::MidwareResInfo(const MidwareResInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snmp_info()) {
    snmp_info_ = new ::mpfmessage::SnmpInfo(*from.snmp_info_);
  } else {
    snmp_info_ = NULL;
  }
  ::memcpy(&res_id_, &from.res_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mid_type_) -
    reinterpret_cast<char*>(&res_id_)) + sizeof(mid_type_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MidwareResInfo)
}

void MidwareResInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&snmp_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_id_) -
      reinterpret_cast<char*>(&snmp_info_)) + sizeof(res_id_));
  os_type_ = 1;
  mid_type_ = 1;
}

MidwareResInfo::~MidwareResInfo() {
  // @@protoc_insertion_point(destructor:mpfmessage.MidwareResInfo)
  SharedDtor();
}

void MidwareResInfo::SharedDtor() {
  if (this != internal_default_instance()) delete snmp_info_;
}

void MidwareResInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MidwareResInfo::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MidwareResInfo& MidwareResInfo::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMidwareResInfo();
  return *internal_default_instance();
}

MidwareResInfo* MidwareResInfo::New(::google::protobuf::Arena* arena) const {
  MidwareResInfo* n = new MidwareResInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MidwareResInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MidwareResInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(snmp_info_ != NULL);
    snmp_info_->Clear();
  }
  if (cached_has_bits & 14u) {
    res_id_ = 0u;
    os_type_ = 1;
    mid_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MidwareResInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MidwareResInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 res_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SnmpInfo snmp_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snmp_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.OSTYPE os_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::OSTYPE_IsValid(value)) {
            set_os_type(static_cast< ::mpfmessage::OSTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.MidwareType mid_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::MidwareType_IsValid(value)) {
            set_mid_type(static_cast< ::mpfmessage::MidwareType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MidwareResInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MidwareResInfo)
  return false;
#undef DO_
}

void MidwareResInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MidwareResInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->res_id(), output);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->snmp_info_, output);
  }

  // optional .mpfmessage.OSTYPE os_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->os_type(), output);
  }

  // optional .mpfmessage.MidwareType mid_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mid_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MidwareResInfo)
}

::google::protobuf::uint8* MidwareResInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MidwareResInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->res_id(), target);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->snmp_info_, deterministic, target);
  }

  // optional .mpfmessage.OSTYPE os_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->os_type(), target);
  }

  // optional .mpfmessage.MidwareType mid_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mid_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MidwareResInfo)
  return target;
}

size_t MidwareResInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MidwareResInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .mpfmessage.SnmpInfo snmp_info = 2;
    if (has_snmp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->snmp_info_);
    }

    // optional uint32 res_id = 1;
    if (has_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_id());
    }

    // optional .mpfmessage.OSTYPE os_type = 3;
    if (has_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->os_type());
    }

    // optional .mpfmessage.MidwareType mid_type = 4;
    if (has_mid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MidwareResInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MidwareResInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MidwareResInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MidwareResInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MidwareResInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MidwareResInfo)
    MergeFrom(*source);
  }
}

void MidwareResInfo::MergeFrom(const MidwareResInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MidwareResInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_snmp_info()->::mpfmessage::SnmpInfo::MergeFrom(from.snmp_info());
    }
    if (cached_has_bits & 0x00000002u) {
      res_id_ = from.res_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      os_type_ = from.os_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      mid_type_ = from.mid_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MidwareResInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MidwareResInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MidwareResInfo::CopyFrom(const MidwareResInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MidwareResInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MidwareResInfo::IsInitialized() const {
  return true;
}

void MidwareResInfo::Swap(MidwareResInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MidwareResInfo::InternalSwap(MidwareResInfo* other) {
  using std::swap;
  swap(snmp_info_, other->snmp_info_);
  swap(res_id_, other->res_id_);
  swap(os_type_, other->os_type_);
  swap(mid_type_, other->mid_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MidwareResInfo::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgMidwarePerfCollectReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgMidwarePerfCollectReq::kMidreslistFieldNumber;
const int MsgMidwarePerfCollectReq::kCollectTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgMidwarePerfCollectReq::MsgMidwarePerfCollectReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgMidwarePerfCollectReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgMidwarePerfCollectReq)
}
MsgMidwarePerfCollectReq::MsgMidwarePerfCollectReq(const MsgMidwarePerfCollectReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      midreslist_(from.midreslist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collect_time_ = from.collect_time_;
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgMidwarePerfCollectReq)
}

void MsgMidwarePerfCollectReq::SharedCtor() {
  _cached_size_ = 0;
  collect_time_ = 0u;
}

MsgMidwarePerfCollectReq::~MsgMidwarePerfCollectReq() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgMidwarePerfCollectReq)
  SharedDtor();
}

void MsgMidwarePerfCollectReq::SharedDtor() {
}

void MsgMidwarePerfCollectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMidwarePerfCollectReq::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgMidwarePerfCollectReq& MsgMidwarePerfCollectReq::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgMidwarePerfCollectReq();
  return *internal_default_instance();
}

MsgMidwarePerfCollectReq* MsgMidwarePerfCollectReq::New(::google::protobuf::Arena* arena) const {
  MsgMidwarePerfCollectReq* n = new MsgMidwarePerfCollectReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgMidwarePerfCollectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgMidwarePerfCollectReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  midreslist_.Clear();
  collect_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgMidwarePerfCollectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgMidwarePerfCollectReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpfmessage.MidwareResInfo midreslist = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_midreslist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 collect_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_collect_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collect_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgMidwarePerfCollectReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgMidwarePerfCollectReq)
  return false;
#undef DO_
}

void MsgMidwarePerfCollectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgMidwarePerfCollectReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.MidwareResInfo midreslist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->midreslist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->midreslist(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 collect_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->collect_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgMidwarePerfCollectReq)
}

::google::protobuf::uint8* MsgMidwarePerfCollectReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgMidwarePerfCollectReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.MidwareResInfo midreslist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->midreslist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->midreslist(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 collect_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->collect_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgMidwarePerfCollectReq)
  return target;
}

size_t MsgMidwarePerfCollectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgMidwarePerfCollectReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.MidwareResInfo midreslist = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->midreslist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->midreslist(static_cast<int>(i)));
    }
  }

  // optional uint32 collect_time = 2;
  if (has_collect_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->collect_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMidwarePerfCollectReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgMidwarePerfCollectReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgMidwarePerfCollectReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgMidwarePerfCollectReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgMidwarePerfCollectReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgMidwarePerfCollectReq)
    MergeFrom(*source);
  }
}

void MsgMidwarePerfCollectReq::MergeFrom(const MsgMidwarePerfCollectReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgMidwarePerfCollectReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  midreslist_.MergeFrom(from.midreslist_);
  if (from.has_collect_time()) {
    set_collect_time(from.collect_time());
  }
}

void MsgMidwarePerfCollectReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgMidwarePerfCollectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMidwarePerfCollectReq::CopyFrom(const MsgMidwarePerfCollectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgMidwarePerfCollectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMidwarePerfCollectReq::IsInitialized() const {
  return true;
}

void MsgMidwarePerfCollectReq::Swap(MsgMidwarePerfCollectReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgMidwarePerfCollectReq::InternalSwap(MsgMidwarePerfCollectReq* other) {
  using std::swap;
  midreslist_.InternalSwap(&other->midreslist_);
  swap(collect_time_, other->collect_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgMidwarePerfCollectReq::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgMidwarePerfCollectResp::InitAsDefaultInstance() {
  ::mpfmessage::_MsgMidwarePerfCollectResp_default_instance_._instance.get_mutable()->result_ = const_cast< ::mpfmessage::MsgCommonData*>(
      ::mpfmessage::MsgCommonData::internal_default_instance());
}
void MsgMidwarePerfCollectResp::clear_result() {
  if (result_ != NULL) result_->Clear();
  clear_has_result();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgMidwarePerfCollectResp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgMidwarePerfCollectResp::MsgMidwarePerfCollectResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgMidwarePerfCollectResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgMidwarePerfCollectResp)
}
MsgMidwarePerfCollectResp::MsgMidwarePerfCollectResp(const MsgMidwarePerfCollectResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::mpfmessage::MsgCommonData(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgMidwarePerfCollectResp)
}

void MsgMidwarePerfCollectResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
}

MsgMidwarePerfCollectResp::~MsgMidwarePerfCollectResp() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgMidwarePerfCollectResp)
  SharedDtor();
}

void MsgMidwarePerfCollectResp::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void MsgMidwarePerfCollectResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMidwarePerfCollectResp::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgMidwarePerfCollectResp& MsgMidwarePerfCollectResp::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgMidwarePerfCollectResp();
  return *internal_default_instance();
}

MsgMidwarePerfCollectResp* MsgMidwarePerfCollectResp::New(::google::protobuf::Arena* arena) const {
  MsgMidwarePerfCollectResp* n = new MsgMidwarePerfCollectResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgMidwarePerfCollectResp::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgMidwarePerfCollectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(result_ != NULL);
    result_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgMidwarePerfCollectResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgMidwarePerfCollectResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpfmessage.MsgCommonData result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgMidwarePerfCollectResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgMidwarePerfCollectResp)
  return false;
#undef DO_
}

void MsgMidwarePerfCollectResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgMidwarePerfCollectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgMidwarePerfCollectResp)
}

::google::protobuf::uint8* MsgMidwarePerfCollectResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgMidwarePerfCollectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->result_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgMidwarePerfCollectResp)
  return target;
}

size_t MsgMidwarePerfCollectResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgMidwarePerfCollectResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .mpfmessage.MsgCommonData result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMidwarePerfCollectResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgMidwarePerfCollectResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgMidwarePerfCollectResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgMidwarePerfCollectResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgMidwarePerfCollectResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgMidwarePerfCollectResp)
    MergeFrom(*source);
  }
}

void MsgMidwarePerfCollectResp::MergeFrom(const MsgMidwarePerfCollectResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgMidwarePerfCollectResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::mpfmessage::MsgCommonData::MergeFrom(from.result());
  }
}

void MsgMidwarePerfCollectResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgMidwarePerfCollectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMidwarePerfCollectResp::CopyFrom(const MsgMidwarePerfCollectResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgMidwarePerfCollectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMidwarePerfCollectResp::IsInitialized() const {
  return true;
}

void MsgMidwarePerfCollectResp::Swap(MsgMidwarePerfCollectResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgMidwarePerfCollectResp::InternalSwap(MsgMidwarePerfCollectResp* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgMidwarePerfCollectResp::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataSourceId::InitAsDefaultInstance() {
  ::mpfmessage::_DataSourceId_default_instance_._instance.get_mutable()->snmp_info_ = const_cast< ::mpfmessage::SnmpInfo*>(
      ::mpfmessage::SnmpInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataSourceId::kDeviceRoomIdFieldNumber;
const int DataSourceId::kResIdFieldNumber;
const int DataSourceId::kSnmpInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataSourceId::DataSourceId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsDataSourceId();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.DataSourceId)
}
DataSourceId::DataSourceId(const DataSourceId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snmp_info()) {
    snmp_info_ = new ::mpfmessage::SnmpInfo(*from.snmp_info_);
  } else {
    snmp_info_ = NULL;
  }
  ::memcpy(&device_room_id_, &from.device_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_id_) -
    reinterpret_cast<char*>(&device_room_id_)) + sizeof(res_id_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.DataSourceId)
}

void DataSourceId::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&snmp_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_id_) -
      reinterpret_cast<char*>(&snmp_info_)) + sizeof(res_id_));
}

DataSourceId::~DataSourceId() {
  // @@protoc_insertion_point(destructor:mpfmessage.DataSourceId)
  SharedDtor();
}

void DataSourceId::SharedDtor() {
  if (this != internal_default_instance()) delete snmp_info_;
}

void DataSourceId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSourceId::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataSourceId& DataSourceId::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsDataSourceId();
  return *internal_default_instance();
}

DataSourceId* DataSourceId::New(::google::protobuf::Arena* arena) const {
  DataSourceId* n = new DataSourceId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataSourceId::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.DataSourceId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(snmp_info_ != NULL);
    snmp_info_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&device_room_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&res_id_) -
        reinterpret_cast<char*>(&device_room_id_)) + sizeof(res_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataSourceId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.DataSourceId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device_room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_device_room_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 res_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SnmpInfo snmp_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snmp_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.DataSourceId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.DataSourceId)
  return false;
#undef DO_
}

void DataSourceId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.DataSourceId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device_room_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device_room_id(), output);
  }

  // optional uint32 res_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->res_id(), output);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->snmp_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.DataSourceId)
}

::google::protobuf::uint8* DataSourceId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.DataSourceId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device_room_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device_room_id(), target);
  }

  // optional uint32 res_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->res_id(), target);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->snmp_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.DataSourceId)
  return target;
}

size_t DataSourceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.DataSourceId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .mpfmessage.SnmpInfo snmp_info = 3;
    if (has_snmp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->snmp_info_);
    }

    // optional uint32 device_room_id = 1;
    if (has_device_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device_room_id());
    }

    // optional uint32 res_id = 2;
    if (has_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSourceId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.DataSourceId)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSourceId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataSourceId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.DataSourceId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.DataSourceId)
    MergeFrom(*source);
  }
}

void DataSourceId::MergeFrom(const DataSourceId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.DataSourceId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_snmp_info()->::mpfmessage::SnmpInfo::MergeFrom(from.snmp_info());
    }
    if (cached_has_bits & 0x00000002u) {
      device_room_id_ = from.device_room_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      res_id_ = from.res_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataSourceId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.DataSourceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSourceId::CopyFrom(const DataSourceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.DataSourceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceId::IsInitialized() const {
  return true;
}

void DataSourceId::Swap(DataSourceId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataSourceId::InternalSwap(DataSourceId* other) {
  using std::swap;
  swap(snmp_info_, other->snmp_info_);
  swap(device_room_id_, other->device_room_id_);
  swap(res_id_, other->res_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataSourceId::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgRoomResSyncReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgRoomResSyncReq::kDsListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgRoomResSyncReq::MsgRoomResSyncReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgRoomResSyncReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgRoomResSyncReq)
}
MsgRoomResSyncReq::MsgRoomResSyncReq(const MsgRoomResSyncReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ds_list_(from.ds_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgRoomResSyncReq)
}

void MsgRoomResSyncReq::SharedCtor() {
  _cached_size_ = 0;
}

MsgRoomResSyncReq::~MsgRoomResSyncReq() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgRoomResSyncReq)
  SharedDtor();
}

void MsgRoomResSyncReq::SharedDtor() {
}

void MsgRoomResSyncReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRoomResSyncReq::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgRoomResSyncReq& MsgRoomResSyncReq::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgRoomResSyncReq();
  return *internal_default_instance();
}

MsgRoomResSyncReq* MsgRoomResSyncReq::New(::google::protobuf::Arena* arena) const {
  MsgRoomResSyncReq* n = new MsgRoomResSyncReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgRoomResSyncReq::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgRoomResSyncReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ds_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgRoomResSyncReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgRoomResSyncReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpfmessage.DataSourceId ds_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_ds_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgRoomResSyncReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgRoomResSyncReq)
  return false;
#undef DO_
}

void MsgRoomResSyncReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgRoomResSyncReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.DataSourceId ds_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ds_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ds_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgRoomResSyncReq)
}

::google::protobuf::uint8* MsgRoomResSyncReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgRoomResSyncReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.DataSourceId ds_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ds_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->ds_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgRoomResSyncReq)
  return target;
}

size_t MsgRoomResSyncReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgRoomResSyncReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.DataSourceId ds_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ds_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ds_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRoomResSyncReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgRoomResSyncReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgRoomResSyncReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgRoomResSyncReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgRoomResSyncReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgRoomResSyncReq)
    MergeFrom(*source);
  }
}

void MsgRoomResSyncReq::MergeFrom(const MsgRoomResSyncReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgRoomResSyncReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ds_list_.MergeFrom(from.ds_list_);
}

void MsgRoomResSyncReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgRoomResSyncReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRoomResSyncReq::CopyFrom(const MsgRoomResSyncReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgRoomResSyncReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoomResSyncReq::IsInitialized() const {
  return true;
}

void MsgRoomResSyncReq::Swap(MsgRoomResSyncReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgRoomResSyncReq::InternalSwap(MsgRoomResSyncReq* other) {
  using std::swap;
  ds_list_.InternalSwap(&other->ds_list_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgRoomResSyncReq::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sensor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sensor::kSerialFieldNumber;
const int Sensor::kNameFieldNumber;
const int Sensor::kTypeFieldNumber;
const int Sensor::kUnitsFieldNumber;
const int Sensor::kStatusFieldNumber;
const int Sensor::kSensoridFieldNumber;
const int Sensor::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sensor::Sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSensor();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.Sensor)
}
Sensor::Sensor(const Sensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial()) {
    serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  units_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_units()) {
    units_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  index_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_index()) {
    index_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.index_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&type_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.Sensor)
}

void Sensor::SharedCtor() {
  _cached_size_ = 0;
  serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensorid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sensorid_));
  status_ = 1;
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:mpfmessage.Sensor)
  SharedDtor();
}

void Sensor::SharedDtor() {
  serial_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sensor::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sensor& Sensor::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSensor();
  return *internal_default_instance();
}

Sensor* Sensor::New(::google::protobuf::Arena* arena) const {
  Sensor* n = new Sensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!serial_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serial_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!units_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*units_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!index_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*index_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sensorid_) -
        reinterpret_cast<char*>(&type_)) + sizeof(sensorid_));
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.Sensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial().data(), static_cast<int>(this->serial().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.Sensor.serial");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.Sensor.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string units = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->units().data(), static_cast<int>(this->units().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.Sensor.units");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.AvailableStatus status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::AvailableStatus_IsValid(value)) {
            set_status(static_cast< ::mpfmessage::AvailableStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sensorid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_sensorid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensorid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index().data(), static_cast<int>(this->index().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.Sensor.index");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.Sensor)
  return false;
#undef DO_
}

void Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial().data(), static_cast<int>(this->serial().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.Sensor.serial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.Sensor.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional string units = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->units().data(), static_cast<int>(this->units().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.Sensor.units");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->units(), output);
  }

  // optional .mpfmessage.AvailableStatus status = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // optional uint32 sensorid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sensorid(), output);
  }

  // optional string index = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index().data(), static_cast<int>(this->index().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.Sensor.index");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.Sensor)
}

::google::protobuf::uint8* Sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial().data(), static_cast<int>(this->serial().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.Sensor.serial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.Sensor.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional string units = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->units().data(), static_cast<int>(this->units().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.Sensor.units");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->units(), target);
  }

  // optional .mpfmessage.AvailableStatus status = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // optional uint32 sensorid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sensorid(), target);
  }

  // optional string index = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index().data(), static_cast<int>(this->index().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.Sensor.index");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.Sensor)
  return target;
}

size_t Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.Sensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string units = 4;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->units());
    }

    // optional string index = 7;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->index());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 sensorid = 6;
    if (has_sensorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensorid());
    }

    // optional .mpfmessage.AvailableStatus status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.Sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.Sensor)
    MergeFrom(*source);
  }
}

void Sensor::MergeFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial();
      serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_units();
      units_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.units_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_index();
      index_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.index_);
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      sensorid_ = from.sensorid_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sensor::CopyFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const {
  return true;
}

void Sensor::Swap(Sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sensor::InternalSwap(Sensor* other) {
  using std::swap;
  serial_.Swap(&other->serial_);
  name_.Swap(&other->name_);
  units_.Swap(&other->units_);
  index_.Swap(&other->index_);
  swap(type_, other->type_);
  swap(sensorid_, other->sensorid_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sensor::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataSourceSyncResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataSourceSyncResult::kDsResIdFieldNumber;
const int DataSourceSyncResult::kResultcodeFieldNumber;
const int DataSourceSyncResult::kDetailFieldNumber;
const int DataSourceSyncResult::kSensorlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataSourceSyncResult::DataSourceSyncResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsDataSourceSyncResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.DataSourceSyncResult)
}
DataSourceSyncResult::DataSourceSyncResult(const DataSourceSyncResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sensorlist_(from.sensorlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_detail()) {
    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  ::memcpy(&ds_res_id_, &from.ds_res_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&resultcode_) -
    reinterpret_cast<char*>(&ds_res_id_)) + sizeof(resultcode_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.DataSourceSyncResult)
}

void DataSourceSyncResult::SharedCtor() {
  _cached_size_ = 0;
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ds_res_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resultcode_) -
      reinterpret_cast<char*>(&ds_res_id_)) + sizeof(resultcode_));
}

DataSourceSyncResult::~DataSourceSyncResult() {
  // @@protoc_insertion_point(destructor:mpfmessage.DataSourceSyncResult)
  SharedDtor();
}

void DataSourceSyncResult::SharedDtor() {
  detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataSourceSyncResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSourceSyncResult::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataSourceSyncResult& DataSourceSyncResult::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsDataSourceSyncResult();
  return *internal_default_instance();
}

DataSourceSyncResult* DataSourceSyncResult::New(::google::protobuf::Arena* arena) const {
  DataSourceSyncResult* n = new DataSourceSyncResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataSourceSyncResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.DataSourceSyncResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensorlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!detail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*detail_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&ds_res_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&resultcode_) -
        reinterpret_cast<char*>(&ds_res_id_)) + sizeof(resultcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataSourceSyncResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.DataSourceSyncResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ds_res_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ds_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ds_res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 resultcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_resultcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string detail = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detail().data(), static_cast<int>(this->detail().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.DataSourceSyncResult.detail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mpfmessage.Sensor sensorlist = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sensorlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.DataSourceSyncResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.DataSourceSyncResult)
  return false;
#undef DO_
}

void DataSourceSyncResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.DataSourceSyncResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ds_res_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ds_res_id(), output);
  }

  // optional uint32 resultcode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resultcode(), output);
  }

  // optional string detail = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DataSourceSyncResult.detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->detail(), output);
  }

  // repeated .mpfmessage.Sensor sensorlist = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensorlist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sensorlist(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.DataSourceSyncResult)
}

::google::protobuf::uint8* DataSourceSyncResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.DataSourceSyncResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ds_res_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ds_res_id(), target);
  }

  // optional uint32 resultcode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resultcode(), target);
  }

  // optional string detail = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.DataSourceSyncResult.detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->detail(), target);
  }

  // repeated .mpfmessage.Sensor sensorlist = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensorlist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->sensorlist(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.DataSourceSyncResult)
  return target;
}

size_t DataSourceSyncResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.DataSourceSyncResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.Sensor sensorlist = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->sensorlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensorlist(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string detail = 3;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detail());
    }

    // optional uint32 ds_res_id = 1;
    if (has_ds_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ds_res_id());
    }

    // optional uint32 resultcode = 2;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultcode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSourceSyncResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.DataSourceSyncResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSourceSyncResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataSourceSyncResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.DataSourceSyncResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.DataSourceSyncResult)
    MergeFrom(*source);
  }
}

void DataSourceSyncResult::MergeFrom(const DataSourceSyncResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.DataSourceSyncResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensorlist_.MergeFrom(from.sensorlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_detail();
      detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
    }
    if (cached_has_bits & 0x00000002u) {
      ds_res_id_ = from.ds_res_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      resultcode_ = from.resultcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataSourceSyncResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.DataSourceSyncResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSourceSyncResult::CopyFrom(const DataSourceSyncResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.DataSourceSyncResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceSyncResult::IsInitialized() const {
  return true;
}

void DataSourceSyncResult::Swap(DataSourceSyncResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataSourceSyncResult::InternalSwap(DataSourceSyncResult* other) {
  using std::swap;
  sensorlist_.InternalSwap(&other->sensorlist_);
  detail_.Swap(&other->detail_);
  swap(ds_res_id_, other->ds_res_id_);
  swap(resultcode_, other->resultcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataSourceSyncResult::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgMachineRoomResSyncResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgMachineRoomResSyncResp::kDsResListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgMachineRoomResSyncResp::MsgMachineRoomResSyncResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgMachineRoomResSyncResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgMachineRoomResSyncResp)
}
MsgMachineRoomResSyncResp::MsgMachineRoomResSyncResp(const MsgMachineRoomResSyncResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ds_res_list_(from.ds_res_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgMachineRoomResSyncResp)
}

void MsgMachineRoomResSyncResp::SharedCtor() {
  _cached_size_ = 0;
}

MsgMachineRoomResSyncResp::~MsgMachineRoomResSyncResp() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgMachineRoomResSyncResp)
  SharedDtor();
}

void MsgMachineRoomResSyncResp::SharedDtor() {
}

void MsgMachineRoomResSyncResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMachineRoomResSyncResp::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgMachineRoomResSyncResp& MsgMachineRoomResSyncResp::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgMachineRoomResSyncResp();
  return *internal_default_instance();
}

MsgMachineRoomResSyncResp* MsgMachineRoomResSyncResp::New(::google::protobuf::Arena* arena) const {
  MsgMachineRoomResSyncResp* n = new MsgMachineRoomResSyncResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgMachineRoomResSyncResp::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgMachineRoomResSyncResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ds_res_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgMachineRoomResSyncResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgMachineRoomResSyncResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpfmessage.DataSourceSyncResult ds_res_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_ds_res_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgMachineRoomResSyncResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgMachineRoomResSyncResp)
  return false;
#undef DO_
}

void MsgMachineRoomResSyncResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgMachineRoomResSyncResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.DataSourceSyncResult ds_res_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ds_res_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ds_res_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgMachineRoomResSyncResp)
}

::google::protobuf::uint8* MsgMachineRoomResSyncResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgMachineRoomResSyncResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.DataSourceSyncResult ds_res_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ds_res_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->ds_res_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgMachineRoomResSyncResp)
  return target;
}

size_t MsgMachineRoomResSyncResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgMachineRoomResSyncResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.DataSourceSyncResult ds_res_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ds_res_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ds_res_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMachineRoomResSyncResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgMachineRoomResSyncResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgMachineRoomResSyncResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgMachineRoomResSyncResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgMachineRoomResSyncResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgMachineRoomResSyncResp)
    MergeFrom(*source);
  }
}

void MsgMachineRoomResSyncResp::MergeFrom(const MsgMachineRoomResSyncResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgMachineRoomResSyncResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ds_res_list_.MergeFrom(from.ds_res_list_);
}

void MsgMachineRoomResSyncResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgMachineRoomResSyncResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMachineRoomResSyncResp::CopyFrom(const MsgMachineRoomResSyncResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgMachineRoomResSyncResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMachineRoomResSyncResp::IsInitialized() const {
  return true;
}

void MsgMachineRoomResSyncResp::Swap(MsgMachineRoomResSyncResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgMachineRoomResSyncResp::InternalSwap(MsgMachineRoomResSyncResp* other) {
  using std::swap;
  ds_res_list_.InternalSwap(&other->ds_res_list_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgMachineRoomResSyncResp::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgGetSenserValueReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgGetSenserValueReq::kDsListFieldNumber;
const int MsgGetSenserValueReq::kCollectTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgGetSenserValueReq::MsgGetSenserValueReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgGetSenserValueReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgGetSenserValueReq)
}
MsgGetSenserValueReq::MsgGetSenserValueReq(const MsgGetSenserValueReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ds_list_(from.ds_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collect_time_ = from.collect_time_;
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgGetSenserValueReq)
}

void MsgGetSenserValueReq::SharedCtor() {
  _cached_size_ = 0;
  collect_time_ = 0u;
}

MsgGetSenserValueReq::~MsgGetSenserValueReq() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgGetSenserValueReq)
  SharedDtor();
}

void MsgGetSenserValueReq::SharedDtor() {
}

void MsgGetSenserValueReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGetSenserValueReq::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgGetSenserValueReq& MsgGetSenserValueReq::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgGetSenserValueReq();
  return *internal_default_instance();
}

MsgGetSenserValueReq* MsgGetSenserValueReq::New(::google::protobuf::Arena* arena) const {
  MsgGetSenserValueReq* n = new MsgGetSenserValueReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgGetSenserValueReq::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgGetSenserValueReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ds_list_.Clear();
  collect_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgGetSenserValueReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgGetSenserValueReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpfmessage.DataSourceId ds_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_ds_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 collect_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_collect_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collect_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgGetSenserValueReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgGetSenserValueReq)
  return false;
#undef DO_
}

void MsgGetSenserValueReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgGetSenserValueReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.DataSourceId ds_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ds_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ds_list(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 collect_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->collect_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgGetSenserValueReq)
}

::google::protobuf::uint8* MsgGetSenserValueReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgGetSenserValueReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.DataSourceId ds_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ds_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->ds_list(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 collect_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->collect_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgGetSenserValueReq)
  return target;
}

size_t MsgGetSenserValueReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgGetSenserValueReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.DataSourceId ds_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ds_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ds_list(static_cast<int>(i)));
    }
  }

  // optional uint32 collect_time = 2;
  if (has_collect_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->collect_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGetSenserValueReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgGetSenserValueReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgGetSenserValueReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgGetSenserValueReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgGetSenserValueReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgGetSenserValueReq)
    MergeFrom(*source);
  }
}

void MsgGetSenserValueReq::MergeFrom(const MsgGetSenserValueReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgGetSenserValueReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ds_list_.MergeFrom(from.ds_list_);
  if (from.has_collect_time()) {
    set_collect_time(from.collect_time());
  }
}

void MsgGetSenserValueReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgGetSenserValueReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetSenserValueReq::CopyFrom(const MsgGetSenserValueReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgGetSenserValueReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetSenserValueReq::IsInitialized() const {
  return true;
}

void MsgGetSenserValueReq::Swap(MsgGetSenserValueReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgGetSenserValueReq::InternalSwap(MsgGetSenserValueReq* other) {
  using std::swap;
  ds_list_.InternalSwap(&other->ds_list_);
  swap(collect_time_, other->collect_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgGetSenserValueReq::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SenserValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SenserValue::kIndexFieldNumber;
const int SenserValue::kTypeFieldNumber;
const int SenserValue::kAvailableFieldNumber;
const int SenserValue::kStatusFieldNumber;
const int SenserValue::kValueFieldNumber;
const int SenserValue::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SenserValue::SenserValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSenserValue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.SenserValue)
}
SenserValue::SenserValue(const SenserValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&index_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.SenserValue)
}

void SenserValue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&index_)) + sizeof(timestamp_));
  status_ = 1;
}

SenserValue::~SenserValue() {
  // @@protoc_insertion_point(destructor:mpfmessage.SenserValue)
  SharedDtor();
}

void SenserValue::SharedDtor() {
}

void SenserValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SenserValue::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SenserValue& SenserValue::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSenserValue();
  return *internal_default_instance();
}

SenserValue* SenserValue::New(::google::protobuf::Arena* arena) const {
  SenserValue* n = new SenserValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SenserValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.SenserValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&index_)) + sizeof(timestamp_));
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SenserValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.SenserValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 available = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.Status status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::Status_IsValid(value)) {
            set_status(static_cast< ::mpfmessage::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.SenserValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.SenserValue)
  return false;
#undef DO_
}

void SenserValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.SenserValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 available = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->available(), output);
  }

  // optional .mpfmessage.Status status = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional uint32 value = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->value(), output);
  }

  // optional uint32 timestamp = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.SenserValue)
}

::google::protobuf::uint8* SenserValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.SenserValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 available = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->available(), target);
  }

  // optional .mpfmessage.Status status = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional uint32 value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->value(), target);
  }

  // optional uint32 timestamp = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.SenserValue)
  return target;
}

size_t SenserValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.SenserValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 available = 3;
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->available());
    }

    // optional uint32 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional .mpfmessage.Status status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SenserValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.SenserValue)
  GOOGLE_DCHECK_NE(&from, this);
  const SenserValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SenserValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.SenserValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.SenserValue)
    MergeFrom(*source);
  }
}

void SenserValue::MergeFrom(const SenserValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.SenserValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      available_ = from.available_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SenserValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.SenserValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SenserValue::CopyFrom(const SenserValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.SenserValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenserValue::IsInitialized() const {
  return true;
}

void SenserValue::Swap(SenserValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SenserValue::InternalSwap(SenserValue* other) {
  using std::swap;
  swap(index_, other->index_);
  swap(type_, other->type_);
  swap(available_, other->available_);
  swap(value_, other->value_);
  swap(timestamp_, other->timestamp_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SenserValue::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SenserSyncResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SenserSyncResult::kDsResIdFieldNumber;
const int SenserSyncResult::kResultcodeFieldNumber;
const int SenserSyncResult::kDetailFieldNumber;
const int SenserSyncResult::kValuelistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SenserSyncResult::SenserSyncResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSenserSyncResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.SenserSyncResult)
}
SenserSyncResult::SenserSyncResult(const SenserSyncResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      valuelist_(from.valuelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_detail()) {
    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  ::memcpy(&ds_res_id_, &from.ds_res_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&resultcode_) -
    reinterpret_cast<char*>(&ds_res_id_)) + sizeof(resultcode_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.SenserSyncResult)
}

void SenserSyncResult::SharedCtor() {
  _cached_size_ = 0;
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ds_res_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resultcode_) -
      reinterpret_cast<char*>(&ds_res_id_)) + sizeof(resultcode_));
}

SenserSyncResult::~SenserSyncResult() {
  // @@protoc_insertion_point(destructor:mpfmessage.SenserSyncResult)
  SharedDtor();
}

void SenserSyncResult::SharedDtor() {
  detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SenserSyncResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SenserSyncResult::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SenserSyncResult& SenserSyncResult::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsSenserSyncResult();
  return *internal_default_instance();
}

SenserSyncResult* SenserSyncResult::New(::google::protobuf::Arena* arena) const {
  SenserSyncResult* n = new SenserSyncResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SenserSyncResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.SenserSyncResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  valuelist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!detail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*detail_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&ds_res_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&resultcode_) -
        reinterpret_cast<char*>(&ds_res_id_)) + sizeof(resultcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SenserSyncResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.SenserSyncResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ds_res_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ds_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ds_res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 resultcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_resultcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string detail = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detail().data(), static_cast<int>(this->detail().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.SenserSyncResult.detail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mpfmessage.SenserValue valuelist = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_valuelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.SenserSyncResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.SenserSyncResult)
  return false;
#undef DO_
}

void SenserSyncResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.SenserSyncResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ds_res_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ds_res_id(), output);
  }

  // optional uint32 resultcode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resultcode(), output);
  }

  // optional string detail = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SenserSyncResult.detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->detail(), output);
  }

  // repeated .mpfmessage.SenserValue valuelist = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->valuelist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->valuelist(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.SenserSyncResult)
}

::google::protobuf::uint8* SenserSyncResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.SenserSyncResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ds_res_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ds_res_id(), target);
  }

  // optional uint32 resultcode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resultcode(), target);
  }

  // optional string detail = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.SenserSyncResult.detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->detail(), target);
  }

  // repeated .mpfmessage.SenserValue valuelist = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->valuelist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->valuelist(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.SenserSyncResult)
  return target;
}

size_t SenserSyncResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.SenserSyncResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.SenserValue valuelist = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->valuelist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->valuelist(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string detail = 3;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detail());
    }

    // optional uint32 ds_res_id = 1;
    if (has_ds_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ds_res_id());
    }

    // optional uint32 resultcode = 2;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultcode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SenserSyncResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.SenserSyncResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SenserSyncResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SenserSyncResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.SenserSyncResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.SenserSyncResult)
    MergeFrom(*source);
  }
}

void SenserSyncResult::MergeFrom(const SenserSyncResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.SenserSyncResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  valuelist_.MergeFrom(from.valuelist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_detail();
      detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
    }
    if (cached_has_bits & 0x00000002u) {
      ds_res_id_ = from.ds_res_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      resultcode_ = from.resultcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SenserSyncResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.SenserSyncResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SenserSyncResult::CopyFrom(const SenserSyncResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.SenserSyncResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenserSyncResult::IsInitialized() const {
  return true;
}

void SenserSyncResult::Swap(SenserSyncResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SenserSyncResult::InternalSwap(SenserSyncResult* other) {
  using std::swap;
  valuelist_.InternalSwap(&other->valuelist_);
  detail_.Swap(&other->detail_);
  swap(ds_res_id_, other->ds_res_id_);
  swap(resultcode_, other->resultcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SenserSyncResult::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgGetSenserValueResp::InitAsDefaultInstance() {
  ::mpfmessage::_MsgGetSenserValueResp_default_instance_._instance.get_mutable()->result_ = const_cast< ::mpfmessage::MsgCommonData*>(
      ::mpfmessage::MsgCommonData::internal_default_instance());
}
void MsgGetSenserValueResp::clear_result() {
  if (result_ != NULL) result_->Clear();
  clear_has_result();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgGetSenserValueResp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgGetSenserValueResp::MsgGetSenserValueResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgGetSenserValueResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgGetSenserValueResp)
}
MsgGetSenserValueResp::MsgGetSenserValueResp(const MsgGetSenserValueResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::mpfmessage::MsgCommonData(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgGetSenserValueResp)
}

void MsgGetSenserValueResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
}

MsgGetSenserValueResp::~MsgGetSenserValueResp() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgGetSenserValueResp)
  SharedDtor();
}

void MsgGetSenserValueResp::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void MsgGetSenserValueResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGetSenserValueResp::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgGetSenserValueResp& MsgGetSenserValueResp::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgGetSenserValueResp();
  return *internal_default_instance();
}

MsgGetSenserValueResp* MsgGetSenserValueResp::New(::google::protobuf::Arena* arena) const {
  MsgGetSenserValueResp* n = new MsgGetSenserValueResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgGetSenserValueResp::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgGetSenserValueResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(result_ != NULL);
    result_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgGetSenserValueResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgGetSenserValueResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpfmessage.MsgCommonData result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgGetSenserValueResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgGetSenserValueResp)
  return false;
#undef DO_
}

void MsgGetSenserValueResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgGetSenserValueResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgGetSenserValueResp)
}

::google::protobuf::uint8* MsgGetSenserValueResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgGetSenserValueResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->result_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgGetSenserValueResp)
  return target;
}

size_t MsgGetSenserValueResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgGetSenserValueResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .mpfmessage.MsgCommonData result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGetSenserValueResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgGetSenserValueResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgGetSenserValueResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgGetSenserValueResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgGetSenserValueResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgGetSenserValueResp)
    MergeFrom(*source);
  }
}

void MsgGetSenserValueResp::MergeFrom(const MsgGetSenserValueResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgGetSenserValueResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::mpfmessage::MsgCommonData::MergeFrom(from.result());
  }
}

void MsgGetSenserValueResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgGetSenserValueResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetSenserValueResp::CopyFrom(const MsgGetSenserValueResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgGetSenserValueResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetSenserValueResp::IsInitialized() const {
  return true;
}

void MsgGetSenserValueResp::Swap(MsgGetSenserValueResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgGetSenserValueResp::InternalSwap(MsgGetSenserValueResp* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgGetSenserValueResp::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConnectivityTestSynReq::InitAsDefaultInstance() {
  ::mpfmessage::_ConnectivityTestSynReq_default_instance_._instance.get_mutable()->snmp_info_ = const_cast< ::mpfmessage::SnmpInfo*>(
      ::mpfmessage::SnmpInfo::internal_default_instance());
  ::mpfmessage::_ConnectivityTestSynReq_default_instance_._instance.get_mutable()->telentpara_ = const_cast< ::mpfmessage::TelnetPara*>(
      ::mpfmessage::TelnetPara::internal_default_instance());
  ::mpfmessage::_ConnectivityTestSynReq_default_instance_._instance.get_mutable()->sshpara_ = const_cast< ::mpfmessage::SshPara*>(
      ::mpfmessage::SshPara::internal_default_instance());
  ::mpfmessage::_ConnectivityTestSynReq_default_instance_._instance.get_mutable()->pingpara_ = const_cast< ::mpfmessage::PingPara*>(
      ::mpfmessage::PingPara::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectivityTestSynReq::kResIdFieldNumber;
const int ConnectivityTestSynReq::kResTypeFieldNumber;
const int ConnectivityTestSynReq::kTestTypeFieldNumber;
const int ConnectivityTestSynReq::kSnmpInfoFieldNumber;
const int ConnectivityTestSynReq::kTelentParaFieldNumber;
const int ConnectivityTestSynReq::kSshParaFieldNumber;
const int ConnectivityTestSynReq::kPingParaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectivityTestSynReq::ConnectivityTestSynReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsConnectivityTestSynReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.ConnectivityTestSynReq)
}
ConnectivityTestSynReq::ConnectivityTestSynReq(const ConnectivityTestSynReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snmp_info()) {
    snmp_info_ = new ::mpfmessage::SnmpInfo(*from.snmp_info_);
  } else {
    snmp_info_ = NULL;
  }
  if (from.has_telentpara()) {
    telentpara_ = new ::mpfmessage::TelnetPara(*from.telentpara_);
  } else {
    telentpara_ = NULL;
  }
  if (from.has_sshpara()) {
    sshpara_ = new ::mpfmessage::SshPara(*from.sshpara_);
  } else {
    sshpara_ = NULL;
  }
  if (from.has_pingpara()) {
    pingpara_ = new ::mpfmessage::PingPara(*from.pingpara_);
  } else {
    pingpara_ = NULL;
  }
  ::memcpy(&res_id_, &from.res_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&test_type_) -
    reinterpret_cast<char*>(&res_id_)) + sizeof(test_type_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.ConnectivityTestSynReq)
}

void ConnectivityTestSynReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&snmp_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_id_) -
      reinterpret_cast<char*>(&snmp_info_)) + sizeof(res_id_));
  res_type_ = 1;
  test_type_ = 1;
}

ConnectivityTestSynReq::~ConnectivityTestSynReq() {
  // @@protoc_insertion_point(destructor:mpfmessage.ConnectivityTestSynReq)
  SharedDtor();
}

void ConnectivityTestSynReq::SharedDtor() {
  if (this != internal_default_instance()) delete snmp_info_;
  if (this != internal_default_instance()) delete telentpara_;
  if (this != internal_default_instance()) delete sshpara_;
  if (this != internal_default_instance()) delete pingpara_;
}

void ConnectivityTestSynReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectivityTestSynReq::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectivityTestSynReq& ConnectivityTestSynReq::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsConnectivityTestSynReq();
  return *internal_default_instance();
}

ConnectivityTestSynReq* ConnectivityTestSynReq::New(::google::protobuf::Arena* arena) const {
  ConnectivityTestSynReq* n = new ConnectivityTestSynReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectivityTestSynReq::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.ConnectivityTestSynReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(snmp_info_ != NULL);
      snmp_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(telentpara_ != NULL);
      telentpara_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sshpara_ != NULL);
      sshpara_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(pingpara_ != NULL);
      pingpara_->Clear();
    }
  }
  if (cached_has_bits & 112u) {
    res_id_ = 0u;
    res_type_ = 1;
    test_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConnectivityTestSynReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.ConnectivityTestSynReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 res_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.ResType res_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::ResType_IsValid(value)) {
            set_res_type(static_cast< ::mpfmessage::ResType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.ConnectivityTestType test_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::ConnectivityTestType_IsValid(value)) {
            set_test_type(static_cast< ::mpfmessage::ConnectivityTestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SnmpInfo snmp_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snmp_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.TelnetPara telentPara = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_telentpara()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SshPara sshPara = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sshpara()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.PingPara pingPara = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pingpara()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.ConnectivityTestSynReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.ConnectivityTestSynReq)
  return false;
#undef DO_
}

void ConnectivityTestSynReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.ConnectivityTestSynReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->res_id(), output);
  }

  // optional .mpfmessage.ResType res_type = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res_type(), output);
  }

  // optional .mpfmessage.ConnectivityTestType test_type = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->test_type(), output);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->snmp_info_, output);
  }

  // optional .mpfmessage.TelnetPara telentPara = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->telentpara_, output);
  }

  // optional .mpfmessage.SshPara sshPara = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->sshpara_, output);
  }

  // optional .mpfmessage.PingPara pingPara = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->pingpara_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.ConnectivityTestSynReq)
}

::google::protobuf::uint8* ConnectivityTestSynReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.ConnectivityTestSynReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->res_id(), target);
  }

  // optional .mpfmessage.ResType res_type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res_type(), target);
  }

  // optional .mpfmessage.ConnectivityTestType test_type = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->test_type(), target);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->snmp_info_, deterministic, target);
  }

  // optional .mpfmessage.TelnetPara telentPara = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->telentpara_, deterministic, target);
  }

  // optional .mpfmessage.SshPara sshPara = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->sshpara_, deterministic, target);
  }

  // optional .mpfmessage.PingPara pingPara = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->pingpara_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.ConnectivityTestSynReq)
  return target;
}

size_t ConnectivityTestSynReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.ConnectivityTestSynReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .mpfmessage.SnmpInfo snmp_info = 4;
    if (has_snmp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->snmp_info_);
    }

    // optional .mpfmessage.TelnetPara telentPara = 5;
    if (has_telentpara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->telentpara_);
    }

    // optional .mpfmessage.SshPara sshPara = 6;
    if (has_sshpara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->sshpara_);
    }

    // optional .mpfmessage.PingPara pingPara = 7;
    if (has_pingpara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->pingpara_);
    }

    // optional uint32 res_id = 1;
    if (has_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_id());
    }

    // optional .mpfmessage.ResType res_type = 2;
    if (has_res_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res_type());
    }

    // optional .mpfmessage.ConnectivityTestType test_type = 3;
    if (has_test_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->test_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectivityTestSynReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.ConnectivityTestSynReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectivityTestSynReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectivityTestSynReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.ConnectivityTestSynReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.ConnectivityTestSynReq)
    MergeFrom(*source);
  }
}

void ConnectivityTestSynReq::MergeFrom(const ConnectivityTestSynReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.ConnectivityTestSynReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_snmp_info()->::mpfmessage::SnmpInfo::MergeFrom(from.snmp_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_telentpara()->::mpfmessage::TelnetPara::MergeFrom(from.telentpara());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sshpara()->::mpfmessage::SshPara::MergeFrom(from.sshpara());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_pingpara()->::mpfmessage::PingPara::MergeFrom(from.pingpara());
    }
    if (cached_has_bits & 0x00000010u) {
      res_id_ = from.res_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      res_type_ = from.res_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      test_type_ = from.test_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConnectivityTestSynReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.ConnectivityTestSynReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectivityTestSynReq::CopyFrom(const ConnectivityTestSynReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.ConnectivityTestSynReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectivityTestSynReq::IsInitialized() const {
  return true;
}

void ConnectivityTestSynReq::Swap(ConnectivityTestSynReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectivityTestSynReq::InternalSwap(ConnectivityTestSynReq* other) {
  using std::swap;
  swap(snmp_info_, other->snmp_info_);
  swap(telentpara_, other->telentpara_);
  swap(sshpara_, other->sshpara_);
  swap(pingpara_, other->pingpara_);
  swap(res_id_, other->res_id_);
  swap(res_type_, other->res_type_);
  swap(test_type_, other->test_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectivityTestSynReq::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgConnectivityTestSynResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgConnectivityTestSynResp::kResIdFieldNumber;
const int MsgConnectivityTestSynResp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgConnectivityTestSynResp::MsgConnectivityTestSynResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgConnectivityTestSynResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgConnectivityTestSynResp)
}
MsgConnectivityTestSynResp::MsgConnectivityTestSynResp(const MsgConnectivityTestSynResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&res_id_, &from.res_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&res_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgConnectivityTestSynResp)
}

void MsgConnectivityTestSynResp::SharedCtor() {
  _cached_size_ = 0;
  res_id_ = 0u;
  result_ = 1;
}

MsgConnectivityTestSynResp::~MsgConnectivityTestSynResp() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgConnectivityTestSynResp)
  SharedDtor();
}

void MsgConnectivityTestSynResp::SharedDtor() {
}

void MsgConnectivityTestSynResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgConnectivityTestSynResp::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgConnectivityTestSynResp& MsgConnectivityTestSynResp::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgConnectivityTestSynResp();
  return *internal_default_instance();
}

MsgConnectivityTestSynResp* MsgConnectivityTestSynResp::New(::google::protobuf::Arena* arena) const {
  MsgConnectivityTestSynResp* n = new MsgConnectivityTestSynResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgConnectivityTestSynResp::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgConnectivityTestSynResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    res_id_ = 0u;
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgConnectivityTestSynResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgConnectivityTestSynResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 res_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.ConnectivityTestResult result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::ConnectivityTestResult_IsValid(value)) {
            set_result(static_cast< ::mpfmessage::ConnectivityTestResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgConnectivityTestSynResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgConnectivityTestSynResp)
  return false;
#undef DO_
}

void MsgConnectivityTestSynResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgConnectivityTestSynResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->res_id(), output);
  }

  // optional .mpfmessage.ConnectivityTestResult result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgConnectivityTestSynResp)
}

::google::protobuf::uint8* MsgConnectivityTestSynResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgConnectivityTestSynResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->res_id(), target);
  }

  // optional .mpfmessage.ConnectivityTestResult result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgConnectivityTestSynResp)
  return target;
}

size_t MsgConnectivityTestSynResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgConnectivityTestSynResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 res_id = 1;
    if (has_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_id());
    }

    // optional .mpfmessage.ConnectivityTestResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgConnectivityTestSynResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgConnectivityTestSynResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgConnectivityTestSynResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgConnectivityTestSynResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgConnectivityTestSynResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgConnectivityTestSynResp)
    MergeFrom(*source);
  }
}

void MsgConnectivityTestSynResp::MergeFrom(const MsgConnectivityTestSynResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgConnectivityTestSynResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      res_id_ = from.res_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgConnectivityTestSynResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgConnectivityTestSynResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgConnectivityTestSynResp::CopyFrom(const MsgConnectivityTestSynResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgConnectivityTestSynResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgConnectivityTestSynResp::IsInitialized() const {
  return true;
}

void MsgConnectivityTestSynResp::Swap(MsgConnectivityTestSynResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgConnectivityTestSynResp::InternalSwap(MsgConnectivityTestSynResp* other) {
  using std::swap;
  swap(res_id_, other->res_id_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgConnectivityTestSynResp::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgDevTestPara::InitAsDefaultInstance() {
  ::mpfmessage::_MsgDevTestPara_default_instance_._instance.get_mutable()->ping_para_ = const_cast< ::mpfmessage::PingPara*>(
      ::mpfmessage::PingPara::internal_default_instance());
  ::mpfmessage::_MsgDevTestPara_default_instance_._instance.get_mutable()->snmp_para_ = const_cast< ::mpfmessage::SnmpInfo*>(
      ::mpfmessage::SnmpInfo::internal_default_instance());
  ::mpfmessage::_MsgDevTestPara_default_instance_._instance.get_mutable()->ssh_para_ = const_cast< ::mpfmessage::SshPara*>(
      ::mpfmessage::SshPara::internal_default_instance());
  ::mpfmessage::_MsgDevTestPara_default_instance_._instance.get_mutable()->telnet_para_ = const_cast< ::mpfmessage::TelnetPara*>(
      ::mpfmessage::TelnetPara::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgDevTestPara::kResIdFieldNumber;
const int MsgDevTestPara::kIpFieldNumber;
const int MsgDevTestPara::kTestTypeFieldNumber;
const int MsgDevTestPara::kPingParaFieldNumber;
const int MsgDevTestPara::kSnmpParaFieldNumber;
const int MsgDevTestPara::kSshParaFieldNumber;
const int MsgDevTestPara::kTelnetParaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgDevTestPara::MsgDevTestPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgDevTestPara();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgDevTestPara)
}
MsgDevTestPara::MsgDevTestPara(const MsgDevTestPara& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.has_ping_para()) {
    ping_para_ = new ::mpfmessage::PingPara(*from.ping_para_);
  } else {
    ping_para_ = NULL;
  }
  if (from.has_snmp_para()) {
    snmp_para_ = new ::mpfmessage::SnmpInfo(*from.snmp_para_);
  } else {
    snmp_para_ = NULL;
  }
  if (from.has_ssh_para()) {
    ssh_para_ = new ::mpfmessage::SshPara(*from.ssh_para_);
  } else {
    ssh_para_ = NULL;
  }
  if (from.has_telnet_para()) {
    telnet_para_ = new ::mpfmessage::TelnetPara(*from.telnet_para_);
  } else {
    telnet_para_ = NULL;
  }
  ::memcpy(&res_id_, &from.res_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&test_type_) -
    reinterpret_cast<char*>(&res_id_)) + sizeof(test_type_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgDevTestPara)
}

void MsgDevTestPara::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ping_para_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&test_type_) -
      reinterpret_cast<char*>(&ping_para_)) + sizeof(test_type_));
}

MsgDevTestPara::~MsgDevTestPara() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgDevTestPara)
  SharedDtor();
}

void MsgDevTestPara::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ping_para_;
  if (this != internal_default_instance()) delete snmp_para_;
  if (this != internal_default_instance()) delete ssh_para_;
  if (this != internal_default_instance()) delete telnet_para_;
}

void MsgDevTestPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDevTestPara::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgDevTestPara& MsgDevTestPara::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgDevTestPara();
  return *internal_default_instance();
}

MsgDevTestPara* MsgDevTestPara::New(::google::protobuf::Arena* arena) const {
  MsgDevTestPara* n = new MsgDevTestPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgDevTestPara::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgDevTestPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ping_para_ != NULL);
      ping_para_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(snmp_para_ != NULL);
      snmp_para_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ssh_para_ != NULL);
      ssh_para_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(telnet_para_ != NULL);
      telnet_para_->Clear();
    }
  }
  if (cached_has_bits & 96u) {
    ::memset(&res_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&test_type_) -
        reinterpret_cast<char*>(&res_id_)) + sizeof(test_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgDevTestPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgDevTestPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 res_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.MsgDevTestPara.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 test_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_test_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.PingPara ping_para = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ping_para()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SnmpInfo snmp_para = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snmp_para()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SshPara ssh_para = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ssh_para()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.TelnetPara telnet_para = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_telnet_para()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgDevTestPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgDevTestPara)
  return false;
#undef DO_
}

void MsgDevTestPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgDevTestPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->res_id(), output);
  }

  // optional string ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.MsgDevTestPara.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional uint32 test_type = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->test_type(), output);
  }

  // optional .mpfmessage.PingPara ping_para = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ping_para_, output);
  }

  // optional .mpfmessage.SnmpInfo snmp_para = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->snmp_para_, output);
  }

  // optional .mpfmessage.SshPara ssh_para = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ssh_para_, output);
  }

  // optional .mpfmessage.TelnetPara telnet_para = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->telnet_para_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgDevTestPara)
}

::google::protobuf::uint8* MsgDevTestPara::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgDevTestPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->res_id(), target);
  }

  // optional string ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.MsgDevTestPara.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional uint32 test_type = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->test_type(), target);
  }

  // optional .mpfmessage.PingPara ping_para = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->ping_para_, deterministic, target);
  }

  // optional .mpfmessage.SnmpInfo snmp_para = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->snmp_para_, deterministic, target);
  }

  // optional .mpfmessage.SshPara ssh_para = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->ssh_para_, deterministic, target);
  }

  // optional .mpfmessage.TelnetPara telnet_para = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->telnet_para_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgDevTestPara)
  return target;
}

size_t MsgDevTestPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgDevTestPara)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional .mpfmessage.PingPara ping_para = 4;
    if (has_ping_para()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->ping_para_);
    }

    // optional .mpfmessage.SnmpInfo snmp_para = 5;
    if (has_snmp_para()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->snmp_para_);
    }

    // optional .mpfmessage.SshPara ssh_para = 6;
    if (has_ssh_para()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->ssh_para_);
    }

    // optional .mpfmessage.TelnetPara telnet_para = 7;
    if (has_telnet_para()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->telnet_para_);
    }

    // optional uint32 res_id = 1;
    if (has_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_id());
    }

    // optional uint32 test_type = 3;
    if (has_test_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDevTestPara::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgDevTestPara)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDevTestPara* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgDevTestPara>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgDevTestPara)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgDevTestPara)
    MergeFrom(*source);
  }
}

void MsgDevTestPara::MergeFrom(const MsgDevTestPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgDevTestPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ping_para()->::mpfmessage::PingPara::MergeFrom(from.ping_para());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_snmp_para()->::mpfmessage::SnmpInfo::MergeFrom(from.snmp_para());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ssh_para()->::mpfmessage::SshPara::MergeFrom(from.ssh_para());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_telnet_para()->::mpfmessage::TelnetPara::MergeFrom(from.telnet_para());
    }
    if (cached_has_bits & 0x00000020u) {
      res_id_ = from.res_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      test_type_ = from.test_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgDevTestPara::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgDevTestPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDevTestPara::CopyFrom(const MsgDevTestPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgDevTestPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDevTestPara::IsInitialized() const {
  return true;
}

void MsgDevTestPara::Swap(MsgDevTestPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgDevTestPara::InternalSwap(MsgDevTestPara* other) {
  using std::swap;
  ip_.Swap(&other->ip_);
  swap(ping_para_, other->ping_para_);
  swap(snmp_para_, other->snmp_para_);
  swap(ssh_para_, other->ssh_para_);
  swap(telnet_para_, other->telnet_para_);
  swap(res_id_, other->res_id_);
  swap(test_type_, other->test_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgDevTestPara::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgReachableTestReq::InitAsDefaultInstance() {
  ::mpfmessage::_MsgReachableTestReq_default_instance_._instance.get_mutable()->notify_addr_ = const_cast< ::mpfmessage::RespAddr*>(
      ::mpfmessage::RespAddr::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgReachableTestReq::kDevParaListFieldNumber;
const int MsgReachableTestReq::kNotifyAddrFieldNumber;
const int MsgReachableTestReq::kCollectTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgReachableTestReq::MsgReachableTestReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgReachableTestReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgReachableTestReq)
}
MsgReachableTestReq::MsgReachableTestReq(const MsgReachableTestReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dev_para_list_(from.dev_para_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_notify_addr()) {
    notify_addr_ = new ::mpfmessage::RespAddr(*from.notify_addr_);
  } else {
    notify_addr_ = NULL;
  }
  collect_time_ = from.collect_time_;
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgReachableTestReq)
}

void MsgReachableTestReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&notify_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collect_time_) -
      reinterpret_cast<char*>(&notify_addr_)) + sizeof(collect_time_));
}

MsgReachableTestReq::~MsgReachableTestReq() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgReachableTestReq)
  SharedDtor();
}

void MsgReachableTestReq::SharedDtor() {
  if (this != internal_default_instance()) delete notify_addr_;
}

void MsgReachableTestReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgReachableTestReq::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgReachableTestReq& MsgReachableTestReq::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgReachableTestReq();
  return *internal_default_instance();
}

MsgReachableTestReq* MsgReachableTestReq::New(::google::protobuf::Arena* arena) const {
  MsgReachableTestReq* n = new MsgReachableTestReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgReachableTestReq::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgReachableTestReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_para_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(notify_addr_ != NULL);
    notify_addr_->Clear();
  }
  collect_time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgReachableTestReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgReachableTestReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpfmessage.MsgDevTestPara dev_para_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_dev_para_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.RespAddr notify_addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_notify_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 collect_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_collect_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collect_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgReachableTestReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgReachableTestReq)
  return false;
#undef DO_
}

void MsgReachableTestReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgReachableTestReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.MsgDevTestPara dev_para_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dev_para_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dev_para_list(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.RespAddr notify_addr = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->notify_addr_, output);
  }

  // optional uint64 collect_time = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->collect_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgReachableTestReq)
}

::google::protobuf::uint8* MsgReachableTestReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgReachableTestReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.MsgDevTestPara dev_para_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dev_para_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->dev_para_list(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.RespAddr notify_addr = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->notify_addr_, deterministic, target);
  }

  // optional uint64 collect_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->collect_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgReachableTestReq)
  return target;
}

size_t MsgReachableTestReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgReachableTestReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.MsgDevTestPara dev_para_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dev_para_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dev_para_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .mpfmessage.RespAddr notify_addr = 2;
    if (has_notify_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->notify_addr_);
    }

    // optional uint64 collect_time = 3;
    if (has_collect_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collect_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgReachableTestReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgReachableTestReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgReachableTestReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgReachableTestReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgReachableTestReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgReachableTestReq)
    MergeFrom(*source);
  }
}

void MsgReachableTestReq::MergeFrom(const MsgReachableTestReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgReachableTestReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dev_para_list_.MergeFrom(from.dev_para_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_notify_addr()->::mpfmessage::RespAddr::MergeFrom(from.notify_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      collect_time_ = from.collect_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgReachableTestReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgReachableTestReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReachableTestReq::CopyFrom(const MsgReachableTestReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgReachableTestReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReachableTestReq::IsInitialized() const {
  return true;
}

void MsgReachableTestReq::Swap(MsgReachableTestReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgReachableTestReq::InternalSwap(MsgReachableTestReq* other) {
  using std::swap;
  dev_para_list_.InternalSwap(&other->dev_para_list_);
  swap(notify_addr_, other->notify_addr_);
  swap(collect_time_, other->collect_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgReachableTestReq::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgReachableTestResp::InitAsDefaultInstance() {
  ::mpfmessage::_MsgReachableTestResp_default_instance_._instance.get_mutable()->result_ = const_cast< ::mpfmessage::MsgCommonData*>(
      ::mpfmessage::MsgCommonData::internal_default_instance());
}
void MsgReachableTestResp::clear_result() {
  if (result_ != NULL) result_->Clear();
  clear_has_result();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgReachableTestResp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgReachableTestResp::MsgReachableTestResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgReachableTestResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgReachableTestResp)
}
MsgReachableTestResp::MsgReachableTestResp(const MsgReachableTestResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::mpfmessage::MsgCommonData(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgReachableTestResp)
}

void MsgReachableTestResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
}

MsgReachableTestResp::~MsgReachableTestResp() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgReachableTestResp)
  SharedDtor();
}

void MsgReachableTestResp::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void MsgReachableTestResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgReachableTestResp::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgReachableTestResp& MsgReachableTestResp::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgReachableTestResp();
  return *internal_default_instance();
}

MsgReachableTestResp* MsgReachableTestResp::New(::google::protobuf::Arena* arena) const {
  MsgReachableTestResp* n = new MsgReachableTestResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgReachableTestResp::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgReachableTestResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(result_ != NULL);
    result_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgReachableTestResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgReachableTestResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpfmessage.MsgCommonData result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgReachableTestResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgReachableTestResp)
  return false;
#undef DO_
}

void MsgReachableTestResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgReachableTestResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgReachableTestResp)
}

::google::protobuf::uint8* MsgReachableTestResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgReachableTestResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->result_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgReachableTestResp)
  return target;
}

size_t MsgReachableTestResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgReachableTestResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .mpfmessage.MsgCommonData result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgReachableTestResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgReachableTestResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgReachableTestResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgReachableTestResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgReachableTestResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgReachableTestResp)
    MergeFrom(*source);
  }
}

void MsgReachableTestResp::MergeFrom(const MsgReachableTestResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgReachableTestResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::mpfmessage::MsgCommonData::MergeFrom(from.result());
  }
}

void MsgReachableTestResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgReachableTestResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReachableTestResp::CopyFrom(const MsgReachableTestResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgReachableTestResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReachableTestResp::IsInitialized() const {
  return true;
}

void MsgReachableTestResp::Swap(MsgReachableTestResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgReachableTestResp::InternalSwap(MsgReachableTestResp* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgReachableTestResp::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PingPerf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingPerf::kSendPackNumFieldNumber;
const int PingPerf::kRecievePackNumFieldNumber;
const int PingPerf::kLossPackNumFieldNumber;
const int PingPerf::kMaxCostTimeFieldNumber;
const int PingPerf::kMinCostTimeFieldNumber;
const int PingPerf::kAverageCostTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingPerf::PingPerf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsPingPerf();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.PingPerf)
}
PingPerf::PingPerf(const PingPerf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&send_pack_num_, &from.send_pack_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&average_cost_time_) -
    reinterpret_cast<char*>(&send_pack_num_)) + sizeof(average_cost_time_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.PingPerf)
}

void PingPerf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&send_pack_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&average_cost_time_) -
      reinterpret_cast<char*>(&send_pack_num_)) + sizeof(average_cost_time_));
}

PingPerf::~PingPerf() {
  // @@protoc_insertion_point(destructor:mpfmessage.PingPerf)
  SharedDtor();
}

void PingPerf::SharedDtor() {
}

void PingPerf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingPerf::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PingPerf& PingPerf::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsPingPerf();
  return *internal_default_instance();
}

PingPerf* PingPerf::New(::google::protobuf::Arena* arena) const {
  PingPerf* n = new PingPerf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingPerf::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.PingPerf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&send_pack_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&average_cost_time_) -
        reinterpret_cast<char*>(&send_pack_num_)) + sizeof(average_cost_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PingPerf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.PingPerf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 send_pack_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_send_pack_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_pack_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recieve_pack_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_recieve_pack_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recieve_pack_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 loss_pack_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_loss_pack_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loss_pack_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_cost_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_max_cost_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_cost_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_cost_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_min_cost_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_cost_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float average_cost_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_average_cost_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_cost_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.PingPerf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.PingPerf)
  return false;
#undef DO_
}

void PingPerf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.PingPerf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 send_pack_num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->send_pack_num(), output);
  }

  // optional uint32 recieve_pack_num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->recieve_pack_num(), output);
  }

  // optional uint32 loss_pack_num = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->loss_pack_num(), output);
  }

  // optional float max_cost_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_cost_time(), output);
  }

  // optional float min_cost_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->min_cost_time(), output);
  }

  // optional float average_cost_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->average_cost_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.PingPerf)
}

::google::protobuf::uint8* PingPerf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.PingPerf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 send_pack_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->send_pack_num(), target);
  }

  // optional uint32 recieve_pack_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->recieve_pack_num(), target);
  }

  // optional uint32 loss_pack_num = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->loss_pack_num(), target);
  }

  // optional float max_cost_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_cost_time(), target);
  }

  // optional float min_cost_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->min_cost_time(), target);
  }

  // optional float average_cost_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->average_cost_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.PingPerf)
  return target;
}

size_t PingPerf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.PingPerf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 send_pack_num = 1;
    if (has_send_pack_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_pack_num());
    }

    // optional uint32 recieve_pack_num = 2;
    if (has_recieve_pack_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recieve_pack_num());
    }

    // optional uint32 loss_pack_num = 3;
    if (has_loss_pack_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loss_pack_num());
    }

    // optional float max_cost_time = 4;
    if (has_max_cost_time()) {
      total_size += 1 + 4;
    }

    // optional float min_cost_time = 5;
    if (has_min_cost_time()) {
      total_size += 1 + 4;
    }

    // optional float average_cost_time = 6;
    if (has_average_cost_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingPerf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.PingPerf)
  GOOGLE_DCHECK_NE(&from, this);
  const PingPerf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PingPerf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.PingPerf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.PingPerf)
    MergeFrom(*source);
  }
}

void PingPerf::MergeFrom(const PingPerf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.PingPerf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      send_pack_num_ = from.send_pack_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      recieve_pack_num_ = from.recieve_pack_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      loss_pack_num_ = from.loss_pack_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_cost_time_ = from.max_cost_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_cost_time_ = from.min_cost_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      average_cost_time_ = from.average_cost_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PingPerf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.PingPerf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingPerf::CopyFrom(const PingPerf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.PingPerf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingPerf::IsInitialized() const {
  return true;
}

void PingPerf::Swap(PingPerf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingPerf::InternalSwap(PingPerf* other) {
  using std::swap;
  swap(send_pack_num_, other->send_pack_num_);
  swap(recieve_pack_num_, other->recieve_pack_num_);
  swap(loss_pack_num_, other->loss_pack_num_);
  swap(max_cost_time_, other->max_cost_time_);
  swap(min_cost_time_, other->min_cost_time_);
  swap(average_cost_time_, other->average_cost_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingPerf::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReachableTestResult::InitAsDefaultInstance() {
  ::mpfmessage::_ReachableTestResult_default_instance_._instance.get_mutable()->ping_perf_ = const_cast< ::mpfmessage::PingPerf*>(
      ::mpfmessage::PingPerf::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReachableTestResult::kResIdFieldNumber;
const int ReachableTestResult::kIpFieldNumber;
const int ReachableTestResult::kPingResultFieldNumber;
const int ReachableTestResult::kSnmpResultFieldNumber;
const int ReachableTestResult::kSshResultFieldNumber;
const int ReachableTestResult::kTelnetResultFieldNumber;
const int ReachableTestResult::kDetailFieldNumber;
const int ReachableTestResult::kPingPerfFieldNumber;
const int ReachableTestResult::kCollectTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReachableTestResult::ReachableTestResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsReachableTestResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.ReachableTestResult)
}
ReachableTestResult::ReachableTestResult(const ReachableTestResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_detail()) {
    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  if (from.has_ping_perf()) {
    ping_perf_ = new ::mpfmessage::PingPerf(*from.ping_perf_);
  } else {
    ping_perf_ = NULL;
  }
  ::memcpy(&collect_time_, &from.collect_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&telnet_result_) -
    reinterpret_cast<char*>(&collect_time_)) + sizeof(telnet_result_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.ReachableTestResult)
}

void ReachableTestResult::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ping_perf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_id_) -
      reinterpret_cast<char*>(&ping_perf_)) + sizeof(res_id_));
  ping_result_ = 1;
  snmp_result_ = 1;
  ssh_result_ = 1;
  telnet_result_ = 1;
}

ReachableTestResult::~ReachableTestResult() {
  // @@protoc_insertion_point(destructor:mpfmessage.ReachableTestResult)
  SharedDtor();
}

void ReachableTestResult::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ping_perf_;
}

void ReachableTestResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReachableTestResult::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReachableTestResult& ReachableTestResult::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsReachableTestResult();
  return *internal_default_instance();
}

ReachableTestResult* ReachableTestResult::New(::google::protobuf::Arena* arena) const {
  ReachableTestResult* n = new ReachableTestResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReachableTestResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.ReachableTestResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!detail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*detail_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ping_perf_ != NULL);
      ping_perf_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&collect_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&res_id_) -
        reinterpret_cast<char*>(&collect_time_)) + sizeof(res_id_));
    ping_result_ = 1;
    snmp_result_ = 1;
    ssh_result_ = 1;
  }
  telnet_result_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReachableTestResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.ReachableTestResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 res_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_res_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.ReachableTestResult.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.TestResult ping_result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::TestResult_IsValid(value)) {
            set_ping_result(static_cast< ::mpfmessage::TestResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.TestResult snmp_result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::TestResult_IsValid(value)) {
            set_snmp_result(static_cast< ::mpfmessage::TestResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.TestResult ssh_result = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::TestResult_IsValid(value)) {
            set_ssh_result(static_cast< ::mpfmessage::TestResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.TestResult telnet_result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpfmessage::TestResult_IsValid(value)) {
            set_telnet_result(static_cast< ::mpfmessage::TestResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string detail = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detail().data(), static_cast<int>(this->detail().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.ReachableTestResult.detail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.PingPerf ping_perf = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ping_perf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 collect_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_collect_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collect_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.ReachableTestResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.ReachableTestResult)
  return false;
#undef DO_
}

void ReachableTestResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.ReachableTestResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->res_id(), output);
  }

  // optional string ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.ReachableTestResult.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional .mpfmessage.TestResult ping_result = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ping_result(), output);
  }

  // optional .mpfmessage.TestResult snmp_result = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->snmp_result(), output);
  }

  // optional .mpfmessage.TestResult ssh_result = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ssh_result(), output);
  }

  // optional .mpfmessage.TestResult telnet_result = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->telnet_result(), output);
  }

  // optional string detail = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.ReachableTestResult.detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->detail(), output);
  }

  // optional .mpfmessage.PingPerf ping_perf = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->ping_perf_, output);
  }

  // optional uint64 collect_time = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->collect_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.ReachableTestResult)
}

::google::protobuf::uint8* ReachableTestResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.ReachableTestResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 res_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->res_id(), target);
  }

  // optional string ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.ReachableTestResult.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional .mpfmessage.TestResult ping_result = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ping_result(), target);
  }

  // optional .mpfmessage.TestResult snmp_result = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->snmp_result(), target);
  }

  // optional .mpfmessage.TestResult ssh_result = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ssh_result(), target);
  }

  // optional .mpfmessage.TestResult telnet_result = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->telnet_result(), target);
  }

  // optional string detail = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.ReachableTestResult.detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->detail(), target);
  }

  // optional .mpfmessage.PingPerf ping_perf = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->ping_perf_, deterministic, target);
  }

  // optional uint64 collect_time = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->collect_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.ReachableTestResult)
  return target;
}

size_t ReachableTestResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.ReachableTestResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string detail = 7;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detail());
    }

    // optional .mpfmessage.PingPerf ping_perf = 8;
    if (has_ping_perf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->ping_perf_);
    }

    // optional uint64 collect_time = 9;
    if (has_collect_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collect_time());
    }

    // optional uint32 res_id = 1;
    if (has_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_id());
    }

    // optional .mpfmessage.TestResult ping_result = 3;
    if (has_ping_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ping_result());
    }

    // optional .mpfmessage.TestResult snmp_result = 4;
    if (has_snmp_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->snmp_result());
    }

    // optional .mpfmessage.TestResult ssh_result = 5;
    if (has_ssh_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ssh_result());
    }

  }
  // optional .mpfmessage.TestResult telnet_result = 6;
  if (has_telnet_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->telnet_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReachableTestResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.ReachableTestResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ReachableTestResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReachableTestResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.ReachableTestResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.ReachableTestResult)
    MergeFrom(*source);
  }
}

void ReachableTestResult::MergeFrom(const ReachableTestResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.ReachableTestResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_detail();
      detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ping_perf()->::mpfmessage::PingPerf::MergeFrom(from.ping_perf());
    }
    if (cached_has_bits & 0x00000008u) {
      collect_time_ = from.collect_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      res_id_ = from.res_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      ping_result_ = from.ping_result_;
    }
    if (cached_has_bits & 0x00000040u) {
      snmp_result_ = from.snmp_result_;
    }
    if (cached_has_bits & 0x00000080u) {
      ssh_result_ = from.ssh_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_telnet_result(from.telnet_result());
  }
}

void ReachableTestResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.ReachableTestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReachableTestResult::CopyFrom(const ReachableTestResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.ReachableTestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReachableTestResult::IsInitialized() const {
  return true;
}

void ReachableTestResult::Swap(ReachableTestResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReachableTestResult::InternalSwap(ReachableTestResult* other) {
  using std::swap;
  ip_.Swap(&other->ip_);
  detail_.Swap(&other->detail_);
  swap(ping_perf_, other->ping_perf_);
  swap(collect_time_, other->collect_time_);
  swap(res_id_, other->res_id_);
  swap(ping_result_, other->ping_result_);
  swap(snmp_result_, other->snmp_result_);
  swap(ssh_result_, other->ssh_result_);
  swap(telnet_result_, other->telnet_result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReachableTestResult::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgReachableTestNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgReachableTestNotify::kResultDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgReachableTestNotify::MsgReachableTestNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgReachableTestNotify();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgReachableTestNotify)
}
MsgReachableTestNotify::MsgReachableTestNotify(const MsgReachableTestNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      result_data_(from.result_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgReachableTestNotify)
}

void MsgReachableTestNotify::SharedCtor() {
  _cached_size_ = 0;
}

MsgReachableTestNotify::~MsgReachableTestNotify() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgReachableTestNotify)
  SharedDtor();
}

void MsgReachableTestNotify::SharedDtor() {
}

void MsgReachableTestNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgReachableTestNotify::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgReachableTestNotify& MsgReachableTestNotify::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgReachableTestNotify();
  return *internal_default_instance();
}

MsgReachableTestNotify* MsgReachableTestNotify::New(::google::protobuf::Arena* arena) const {
  MsgReachableTestNotify* n = new MsgReachableTestNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgReachableTestNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgReachableTestNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgReachableTestNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgReachableTestNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpfmessage.ReachableTestResult result_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_result_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgReachableTestNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgReachableTestNotify)
  return false;
#undef DO_
}

void MsgReachableTestNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgReachableTestNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.ReachableTestResult result_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->result_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result_data(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgReachableTestNotify)
}

::google::protobuf::uint8* MsgReachableTestNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgReachableTestNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.ReachableTestResult result_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->result_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->result_data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgReachableTestNotify)
  return target;
}

size_t MsgReachableTestNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgReachableTestNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.ReachableTestResult result_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->result_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->result_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgReachableTestNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgReachableTestNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgReachableTestNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgReachableTestNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgReachableTestNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgReachableTestNotify)
    MergeFrom(*source);
  }
}

void MsgReachableTestNotify::MergeFrom(const MsgReachableTestNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgReachableTestNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_data_.MergeFrom(from.result_data_);
}

void MsgReachableTestNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgReachableTestNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReachableTestNotify::CopyFrom(const MsgReachableTestNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgReachableTestNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReachableTestNotify::IsInitialized() const {
  return true;
}

void MsgReachableTestNotify::Swap(MsgReachableTestNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgReachableTestNotify::InternalSwap(MsgReachableTestNotify* other) {
  using std::swap;
  result_data_.InternalSwap(&other->result_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgReachableTestNotify::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IpGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IpGroup::kStartIpFieldNumber;
const int IpGroup::kEndIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IpGroup::IpGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsIpGroup();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.IpGroup)
}
IpGroup::IpGroup(const IpGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_ip()) {
    start_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_ip_);
  }
  end_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_end_ip()) {
    end_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_ip_);
  }
  // @@protoc_insertion_point(copy_constructor:mpfmessage.IpGroup)
}

void IpGroup::SharedCtor() {
  _cached_size_ = 0;
  start_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

IpGroup::~IpGroup() {
  // @@protoc_insertion_point(destructor:mpfmessage.IpGroup)
  SharedDtor();
}

void IpGroup::SharedDtor() {
  start_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IpGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpGroup::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IpGroup& IpGroup::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsIpGroup();
  return *internal_default_instance();
}

IpGroup* IpGroup::New(::google::protobuf::Arena* arena) const {
  IpGroup* n = new IpGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IpGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.IpGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!start_ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*start_ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!end_ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*end_ip_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IpGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.IpGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string start_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_ip().data(), static_cast<int>(this->start_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.IpGroup.start_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string end_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->end_ip().data(), static_cast<int>(this->end_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.IpGroup.end_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.IpGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.IpGroup)
  return false;
#undef DO_
}

void IpGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.IpGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string start_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_ip().data(), static_cast<int>(this->start_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IpGroup.start_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->start_ip(), output);
  }

  // optional string end_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end_ip().data(), static_cast<int>(this->end_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IpGroup.end_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->end_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.IpGroup)
}

::google::protobuf::uint8* IpGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.IpGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string start_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_ip().data(), static_cast<int>(this->start_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IpGroup.start_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->start_ip(), target);
  }

  // optional string end_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end_ip().data(), static_cast<int>(this->end_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.IpGroup.end_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->end_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.IpGroup)
  return target;
}

size_t IpGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.IpGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string start_ip = 1;
    if (has_start_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_ip());
    }

    // optional string end_ip = 2;
    if (has_end_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_ip());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.IpGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const IpGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IpGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.IpGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.IpGroup)
    MergeFrom(*source);
  }
}

void IpGroup::MergeFrom(const IpGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.IpGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_start_ip();
      start_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_end_ip();
      end_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_ip_);
    }
  }
}

void IpGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.IpGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpGroup::CopyFrom(const IpGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.IpGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpGroup::IsInitialized() const {
  return true;
}

void IpGroup::Swap(IpGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IpGroup::InternalSwap(IpGroup* other) {
  using std::swap;
  start_ip_.Swap(&other->start_ip_);
  end_ip_.Swap(&other->end_ip_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IpGroup::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgTopoDiscoveryReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgTopoDiscoveryReq::kSnmpFieldNumber;
const int MsgTopoDiscoveryReq::kIpGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgTopoDiscoveryReq::MsgTopoDiscoveryReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgTopoDiscoveryReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgTopoDiscoveryReq)
}
MsgTopoDiscoveryReq::MsgTopoDiscoveryReq(const MsgTopoDiscoveryReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      snmp_(from.snmp_),
      ip_group_(from.ip_group_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgTopoDiscoveryReq)
}

void MsgTopoDiscoveryReq::SharedCtor() {
  _cached_size_ = 0;
}

MsgTopoDiscoveryReq::~MsgTopoDiscoveryReq() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgTopoDiscoveryReq)
  SharedDtor();
}

void MsgTopoDiscoveryReq::SharedDtor() {
}

void MsgTopoDiscoveryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTopoDiscoveryReq::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgTopoDiscoveryReq& MsgTopoDiscoveryReq::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgTopoDiscoveryReq();
  return *internal_default_instance();
}

MsgTopoDiscoveryReq* MsgTopoDiscoveryReq::New(::google::protobuf::Arena* arena) const {
  MsgTopoDiscoveryReq* n = new MsgTopoDiscoveryReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgTopoDiscoveryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgTopoDiscoveryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snmp_.Clear();
  ip_group_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgTopoDiscoveryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgTopoDiscoveryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpfmessage.SnmpInfo snmp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_snmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mpfmessage.IpGroup ip_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_ip_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgTopoDiscoveryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgTopoDiscoveryReq)
  return false;
#undef DO_
}

void MsgTopoDiscoveryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgTopoDiscoveryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.SnmpInfo snmp = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snmp_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->snmp(static_cast<int>(i)), output);
  }

  // repeated .mpfmessage.IpGroup ip_group = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ip_group_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ip_group(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgTopoDiscoveryReq)
}

::google::protobuf::uint8* MsgTopoDiscoveryReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgTopoDiscoveryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mpfmessage.SnmpInfo snmp = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snmp_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->snmp(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mpfmessage.IpGroup ip_group = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ip_group_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->ip_group(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgTopoDiscoveryReq)
  return target;
}

size_t MsgTopoDiscoveryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgTopoDiscoveryReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mpfmessage.SnmpInfo snmp = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->snmp_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->snmp(static_cast<int>(i)));
    }
  }

  // repeated .mpfmessage.IpGroup ip_group = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->ip_group_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ip_group(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTopoDiscoveryReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgTopoDiscoveryReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTopoDiscoveryReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgTopoDiscoveryReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgTopoDiscoveryReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgTopoDiscoveryReq)
    MergeFrom(*source);
  }
}

void MsgTopoDiscoveryReq::MergeFrom(const MsgTopoDiscoveryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgTopoDiscoveryReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  snmp_.MergeFrom(from.snmp_);
  ip_group_.MergeFrom(from.ip_group_);
}

void MsgTopoDiscoveryReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgTopoDiscoveryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTopoDiscoveryReq::CopyFrom(const MsgTopoDiscoveryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgTopoDiscoveryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTopoDiscoveryReq::IsInitialized() const {
  return true;
}

void MsgTopoDiscoveryReq::Swap(MsgTopoDiscoveryReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgTopoDiscoveryReq::InternalSwap(MsgTopoDiscoveryReq* other) {
  using std::swap;
  snmp_.InternalSwap(&other->snmp_);
  ip_group_.InternalSwap(&other->ip_group_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgTopoDiscoveryReq::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgTopoFindResp::InitAsDefaultInstance() {
  ::mpfmessage::_MsgTopoFindResp_default_instance_._instance.get_mutable()->result_ = const_cast< ::mpfmessage::MsgCommonData*>(
      ::mpfmessage::MsgCommonData::internal_default_instance());
}
void MsgTopoFindResp::clear_result() {
  if (result_ != NULL) result_->Clear();
  clear_has_result();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgTopoFindResp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgTopoFindResp::MsgTopoFindResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgTopoFindResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.MsgTopoFindResp)
}
MsgTopoFindResp::MsgTopoFindResp(const MsgTopoFindResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::mpfmessage::MsgCommonData(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mpfmessage.MsgTopoFindResp)
}

void MsgTopoFindResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
}

MsgTopoFindResp::~MsgTopoFindResp() {
  // @@protoc_insertion_point(destructor:mpfmessage.MsgTopoFindResp)
  SharedDtor();
}

void MsgTopoFindResp::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void MsgTopoFindResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTopoFindResp::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgTopoFindResp& MsgTopoFindResp::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsMsgTopoFindResp();
  return *internal_default_instance();
}

MsgTopoFindResp* MsgTopoFindResp::New(::google::protobuf::Arena* arena) const {
  MsgTopoFindResp* n = new MsgTopoFindResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgTopoFindResp::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.MsgTopoFindResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(result_ != NULL);
    result_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgTopoFindResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.MsgTopoFindResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mpfmessage.MsgCommonData result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.MsgTopoFindResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.MsgTopoFindResp)
  return false;
#undef DO_
}

void MsgTopoFindResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.MsgTopoFindResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.MsgTopoFindResp)
}

::google::protobuf::uint8* MsgTopoFindResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.MsgTopoFindResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mpfmessage.MsgCommonData result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->result_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.MsgTopoFindResp)
  return target;
}

size_t MsgTopoFindResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.MsgTopoFindResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .mpfmessage.MsgCommonData result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTopoFindResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.MsgTopoFindResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTopoFindResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgTopoFindResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.MsgTopoFindResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.MsgTopoFindResp)
    MergeFrom(*source);
  }
}

void MsgTopoFindResp::MergeFrom(const MsgTopoFindResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.MsgTopoFindResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::mpfmessage::MsgCommonData::MergeFrom(from.result());
  }
}

void MsgTopoFindResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.MsgTopoFindResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTopoFindResp::CopyFrom(const MsgTopoFindResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.MsgTopoFindResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTopoFindResp::IsInitialized() const {
  return true;
}

void MsgTopoFindResp::Swap(MsgTopoFindResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgTopoFindResp::InternalSwap(MsgTopoFindResp* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgTopoFindResp::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TopoNodeInfo::InitAsDefaultInstance() {
  ::mpfmessage::_TopoNodeInfo_default_instance_._instance.get_mutable()->snmp_info_ = const_cast< ::mpfmessage::SnmpInfo*>(
      ::mpfmessage::SnmpInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopoNodeInfo::kIpFieldNumber;
const int TopoNodeInfo::kNameFieldNumber;
const int TopoNodeInfo::kTypeFieldNumber;
const int TopoNodeInfo::kRunStatusFieldNumber;
const int TopoNodeInfo::kSnmpInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopoNodeInfo::TopoNodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsTopoNodeInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.TopoNodeInfo)
}
TopoNodeInfo::TopoNodeInfo(const TopoNodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_snmp_info()) {
    snmp_info_ = new ::mpfmessage::SnmpInfo(*from.snmp_info_);
  } else {
    snmp_info_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&run_status_) -
    reinterpret_cast<char*>(&type_)) + sizeof(run_status_));
  // @@protoc_insertion_point(copy_constructor:mpfmessage.TopoNodeInfo)
}

void TopoNodeInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&snmp_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&run_status_) -
      reinterpret_cast<char*>(&snmp_info_)) + sizeof(run_status_));
}

TopoNodeInfo::~TopoNodeInfo() {
  // @@protoc_insertion_point(destructor:mpfmessage.TopoNodeInfo)
  SharedDtor();
}

void TopoNodeInfo::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete snmp_info_;
}

void TopoNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopoNodeInfo::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TopoNodeInfo& TopoNodeInfo::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsTopoNodeInfo();
  return *internal_default_instance();
}

TopoNodeInfo* TopoNodeInfo::New(::google::protobuf::Arena* arena) const {
  TopoNodeInfo* n = new TopoNodeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopoNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.TopoNodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(snmp_info_ != NULL);
      snmp_info_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&run_status_) -
        reinterpret_cast<char*>(&type_)) + sizeof(run_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TopoNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.TopoNodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.TopoNodeInfo.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.TopoNodeInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 run_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_run_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &run_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mpfmessage.SnmpInfo snmp_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snmp_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.TopoNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.TopoNodeInfo)
  return false;
#undef DO_
}

void TopoNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.TopoNodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoNodeInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoNodeInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 run_status = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->run_status(), output);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->snmp_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.TopoNodeInfo)
}

::google::protobuf::uint8* TopoNodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.TopoNodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoNodeInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoNodeInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 run_status = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->run_status(), target);
  }

  // optional .mpfmessage.SnmpInfo snmp_info = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->snmp_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.TopoNodeInfo)
  return target;
}

size_t TopoNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.TopoNodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .mpfmessage.SnmpInfo snmp_info = 5;
    if (has_snmp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->snmp_info_);
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 run_status = 4;
    if (has_run_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->run_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopoNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.TopoNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TopoNodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopoNodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.TopoNodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.TopoNodeInfo)
    MergeFrom(*source);
  }
}

void TopoNodeInfo::MergeFrom(const TopoNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.TopoNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_snmp_info()->::mpfmessage::SnmpInfo::MergeFrom(from.snmp_info());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      run_status_ = from.run_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TopoNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.TopoNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopoNodeInfo::CopyFrom(const TopoNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.TopoNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopoNodeInfo::IsInitialized() const {
  return true;
}

void TopoNodeInfo::Swap(TopoNodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopoNodeInfo::InternalSwap(TopoNodeInfo* other) {
  using std::swap;
  ip_.Swap(&other->ip_);
  name_.Swap(&other->name_);
  swap(snmp_info_, other->snmp_info_);
  swap(type_, other->type_);
  swap(run_status_, other->run_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopoNodeInfo::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TopoLinkInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopoLinkInfo::kSrcIpFieldNumber;
const int TopoLinkInfo::kDestIpFieldNumber;
const int TopoLinkInfo::kSrcNameFieldNumber;
const int TopoLinkInfo::kDestNameFieldNumber;
const int TopoLinkInfo::kSrcIfNameFieldNumber;
const int TopoLinkInfo::kDestIfNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopoLinkInfo::TopoLinkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsTopoLinkInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpfmessage.TopoLinkInfo)
}
TopoLinkInfo::TopoLinkInfo(const TopoLinkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_ip()) {
    src_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_ip_);
  }
  dest_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_ip()) {
    dest_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_ip_);
  }
  src_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_name()) {
    src_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_name_);
  }
  dest_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_name()) {
    dest_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_name_);
  }
  src_if_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_if_name()) {
    src_if_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_if_name_);
  }
  dest_if_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_if_name()) {
    dest_if_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_if_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mpfmessage.TopoLinkInfo)
}

void TopoLinkInfo::SharedCtor() {
  _cached_size_ = 0;
  src_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_if_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_if_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TopoLinkInfo::~TopoLinkInfo() {
  // @@protoc_insertion_point(destructor:mpfmessage.TopoLinkInfo)
  SharedDtor();
}

void TopoLinkInfo::SharedDtor() {
  src_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_if_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_if_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TopoLinkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopoLinkInfo::descriptor() {
  ::protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TopoLinkInfo& TopoLinkInfo::default_instance() {
  ::protobuf_devcollector_5fmsg_2eproto::InitDefaultsTopoLinkInfo();
  return *internal_default_instance();
}

TopoLinkInfo* TopoLinkInfo::New(::google::protobuf::Arena* arena) const {
  TopoLinkInfo* n = new TopoLinkInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopoLinkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mpfmessage.TopoLinkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!src_ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*src_ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!dest_ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dest_ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!src_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*src_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!dest_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dest_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!src_if_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*src_if_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!dest_if_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dest_if_name_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TopoLinkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpfmessage.TopoLinkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string src_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src_ip().data(), static_cast<int>(this->src_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.TopoLinkInfo.src_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dest_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest_ip().data(), static_cast<int>(this->dest_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.TopoLinkInfo.dest_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string src_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src_name().data(), static_cast<int>(this->src_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.TopoLinkInfo.src_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dest_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest_name().data(), static_cast<int>(this->dest_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.TopoLinkInfo.dest_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string src_if_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_if_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src_if_name().data(), static_cast<int>(this->src_if_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.TopoLinkInfo.src_if_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dest_if_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_if_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest_if_name().data(), static_cast<int>(this->dest_if_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mpfmessage.TopoLinkInfo.dest_if_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpfmessage.TopoLinkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpfmessage.TopoLinkInfo)
  return false;
#undef DO_
}

void TopoLinkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpfmessage.TopoLinkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string src_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_ip().data(), static_cast<int>(this->src_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoLinkInfo.src_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src_ip(), output);
  }

  // optional string dest_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_ip().data(), static_cast<int>(this->dest_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoLinkInfo.dest_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dest_ip(), output);
  }

  // optional string src_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_name().data(), static_cast<int>(this->src_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoLinkInfo.src_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->src_name(), output);
  }

  // optional string dest_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_name().data(), static_cast<int>(this->dest_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoLinkInfo.dest_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dest_name(), output);
  }

  // optional string src_if_name = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_if_name().data(), static_cast<int>(this->src_if_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoLinkInfo.src_if_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->src_if_name(), output);
  }

  // optional string dest_if_name = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_if_name().data(), static_cast<int>(this->dest_if_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoLinkInfo.dest_if_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->dest_if_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpfmessage.TopoLinkInfo)
}

::google::protobuf::uint8* TopoLinkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mpfmessage.TopoLinkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string src_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_ip().data(), static_cast<int>(this->src_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoLinkInfo.src_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src_ip(), target);
  }

  // optional string dest_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_ip().data(), static_cast<int>(this->dest_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoLinkInfo.dest_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest_ip(), target);
  }

  // optional string src_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_name().data(), static_cast<int>(this->src_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoLinkInfo.src_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->src_name(), target);
  }

  // optional string dest_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_name().data(), static_cast<int>(this->dest_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoLinkInfo.dest_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dest_name(), target);
  }

  // optional string src_if_name = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_if_name().data(), static_cast<int>(this->src_if_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoLinkInfo.src_if_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->src_if_name(), target);
  }

  // optional string dest_if_name = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_if_name().data(), static_cast<int>(this->dest_if_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mpfmessage.TopoLinkInfo.dest_if_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dest_if_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpfmessage.TopoLinkInfo)
  return target;
}

size_t TopoLinkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpfmessage.TopoLinkInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string src_ip = 1;
    if (has_src_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_ip());
    }

    // optional string dest_ip = 2;
    if (has_dest_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_ip());
    }

    // optional string src_name = 3;
    if (has_src_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_name());
    }

    // optional string dest_name = 4;
    if (has_dest_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_name());
    }

    // optional string src_if_name = 5;
    if (has_src_if_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_if_name());
    }

    // optional string dest_if_name = 6;
    if (has_dest_if_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_if_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopoLinkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mpfmessage.TopoLinkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TopoLinkInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopoLinkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mpfmessage.TopoLinkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mpfmessage.TopoLinkInfo)
    MergeFrom(*source);
  }
}

void TopoLinkInfo::MergeFrom(const TopoLinkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mpfmessage.TopoLinkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_src_ip();
      src_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_dest_ip();
      dest_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_src_name();
      src_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_dest_name();
      dest_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_src_if_name();
      src_if_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_if_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_dest_if_name();
      dest_if_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_if_name_);
    }
  }
}

void TopoLinkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mpfmessage.TopoLinkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopoLinkInfo::CopyFrom(const TopoLinkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpfmessage.TopoLinkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopoLinkInfo::IsInitialized() const {
  return true;
}

void TopoLinkInfo::Swap(TopoLinkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopoLinkInfo::InternalSwap(TopoLinkInfo* other) {
  using std::swap;
  src_ip_.Swap(&other->src_ip_);
  dest_ip_.Swap(&other->dest_ip_);
  src_name_.Swap(&other->src_name_);
  dest_name_.Swap(&other->dest_name_);
  src_if_name_.Swap(&other->src_if_name_);
  dest_if_name_.Swap(&other->dest_if_name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopoLinkInfo::GetMetadata() const {
  protobuf_devcollector_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_devcollector_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mpfmessage

// @@protoc_insertion_point(global_scope)
